      var versioneDiGioco = "v0.20220627"; //aggiunto H.Torpedo carica 3, aggiutna debugMode, aggiunta una nuova grafica per gli alert (senza usare la funz. del browser), aggiornati i prezzi dei poteri, aggiornata la lunghezza massima della barra dei poteri (da 32 a 28), aggiunti effetti visivi minori nel menu di pausa, aggiornato il modo in cui vengono gestiti i gamestate, fixato un bug con il corpo caricato 3 notmale (activeShot diventava negativo)
      debugMode=false; //you can enable debugMode with the console (press f12 in the browser)
      
      //crea il canvas
      var canvasWidth = 720;
      var canvasHeight = 540;
      if(document.getElementsByTagName('canvas').length == 0) {     //crea il canvas con le variabili che ho creato
          document.body.innerHTML += "".concat("<div class='caricaPartitaDiv' id='caricaPartitaDiv'><input type='file' id='fileCaricaPartita' disabled></div><div class='canvasDiv' id='canvasDivId' tabIndex='1'><canvas id='canvas' width=" , canvasWidth , " height=" , canvasHeight , "></canvas></div>");
      }   var ctx = document.getElementById('canvas').getContext('2d');

    var stringaSalvataggio="";

	  //variabili dei tasti - prima o poi faro' un'opzione nel menu per poterli cambiare ingame
      var keys = []; //vettore associativo dei tasti (tiene dentro dei bool)
      var tastoGiaSchiacciato = false;  //mi serve per alcune funzioni tipo selectScreen()
      var jumpkey = "z";         		//salta - default z
      var destrakey = "ArrowRight";     //muovi sinistra - default freccia destra
      var sinistrakey = "ArrowLeft";    //muovi destra - default freccia sinistra
      var sukey = "ArrowUp";           	//default freccia su
      var giukey = "ArrowDown";         //default freccia giu
      var dashkey = "x";		    	//dash - default x
      var sparokey = "a";				//shoot - default a
      var startkey = "Enter";			//start - default INVIO/ENTER
      var lkey = "d";					//power- - default e
      var rkey = "c";					//power+ - default c

      var ultimoTastoLetto="";
      document.addEventListener("keydown", function(e) {//events - leggi tasti schiacciati
          keys[e.key] = true;
          ultimoTastoLetto=e.key;
      });
      document.addEventListener("keyup", function(e) {//events - leggi tasti rilasciati
          keys[e.key] = false;
      });

      //prototipo del player
      function Player() {
      	this.lifeMax=16;
        for(i=0; i<8; i++){if(heartAcquired[i]){this.lifeMax+=2;}} //aumenta la vita massima di 2 per ogni cuore trovato
        this.life=this.lifeMax;
        this.x= 0;
        this.y= 0;
        this.yv= 0;
        this.xv= 0;
        this.slope= 0;
        this.width= 24;
        this.height= 38;
        this.color1= '#003ef0';
        this.color2= '#3AB7D4';
        this.coloreArmatura='#e1e1e1';
        this.defaultColor1='#003ef0';
        this.defaultColor2='#3AB7D4';
        this.defaultColoreArmatura='#e1e1e1';
        this.damagedColor='#990003';
        this.charge0color='#ffc000';
        this.charge1color='#49ff37';
        this.charge2color='#14dfff';        
        this.charge3color='#ff3788';        
        this.speed= 0.9;
        this.defaultspeed= 0.9;
        this.jumpheight= 11.5;
        this.giasaltato = false;
        this.giasparato = false;
        this.facingRight = true;
        this.isInWater = false;
        this.invulnerability = 0;
        this.canMove = true;
        this.carica = 0;
        this.activePower=0;
        this.activeShot=0;
        this.power = [ //vettore dei poteri
        {usageMax: 28, usage:28, color1:'#687968', color2:'#d9b289', nome:'Homing Torpedo'},
        {usageMax: 28, usage:28, color1:'#1a914f', color2:'#60d1aa', nome:'Chameleon Sting'},
        {usageMax: 28, usage:28, color1:'#e13e60', color2:'#a1c1aa', nome:'Rolling Shield'},
        {usageMax: 28, usage:28, color1:'#f14f02', color2:'#f8e179', nome:'Fire Wave'},
        {usageMax: 28, usage:28, color1:'#e40097', color2:'#e191c1', nome:'Storm Tornado'},
        {usageMax: 28, usage:28, color1:'#f8b202', color2:'#a1a1a1', nome:'Electric Spark'},
        {usageMax: 28, usage:28, color1:'#606081', color2:'#81aa89', nome:'Boomerang Cutter'},
        {usageMax: 28, usage:28, color1:'#35e1f8', color2:'#f8e14f', nome:'Shotgun Ice'},
        ];
        this.disegnaPlayer = function (xdisegnata,ydisegnata,larghezza,altezza,dettagli,colore1,colore2,coloreArmatura){
        	  var coloreTemp=colore2;
              ctx.fillStyle = colore1;
              //testa
              ctx.fillRect(xdisegnata+(larghezza/2)-6, ydisegnata-2, 12, 12);
              //gambe
              ctx.fillRect(xdisegnata+(larghezza/2)-8, ydisegnata+(altezza)-18, 6, 18);
              ctx.fillRect(xdisegnata+(larghezza/2)+2, ydisegnata+(altezza)-18, 6, 18);
              //braccia
              if(player.facingRight){
                ctx.fillRect(xdisegnata+2-6, ydisegnata+11, 6, 15);
                ctx.fillRect(xdisegnata+(larghezza)-2, ydisegnata+11, 15, 6);
              }else{
                ctx.fillRect(xdisegnata+2-15, ydisegnata+11, 15, 6);
                ctx.fillRect(xdisegnata+(larghezza)-2, ydisegnata+11, 6, 15);
              }
              if(dettagli){
                if(armaturaAcquired=="true,true,true,true"){
                    colore2=colore1;
                }
                //testa
                if(armaturaAcquired[0]){
                  ctx.fillStyle = coloreArmatura;
                  ctx.fillRect(xdisegnata+(larghezza/2)-6, ydisegnata-2, 12, 3);
                  ctx.fillRect(xdisegnata+(larghezza/2)-6, ydisegnata-2, 2, 9);
                  ctx.fillRect(xdisegnata+(larghezza/2)+6-2, ydisegnata-2, 2, 9);
                }
                //gambe
                ctx.fillStyle = colore2;
                ctx.fillRect(xdisegnata+(larghezza/2)-8, ydisegnata+(altezza)-18, 6, 12);
                ctx.fillRect(xdisegnata+(larghezza/2)+2, ydisegnata+(altezza)-18, 6, 12);
                if(armaturaAcquired[1]){
                  ctx.fillStyle = coloreArmatura;
                  ctx.fillRect(xdisegnata+(larghezza/2)-8, ydisegnata+(altezza)-6, 6, 6);
                  ctx.fillRect(xdisegnata+(larghezza/2)+2, ydisegnata+(altezza)-6, 6, 6);
                  if(armaturaAcquired=="true,true,true,true"){
	                  ctx.fillStyle = coloreTemp;
	                  ctx.fillRect(xdisegnata+(larghezza/2)-8, ydisegnata+(altezza)-8, 6, 2);
	                  ctx.fillRect(xdisegnata+(larghezza/2)+2, ydisegnata+(altezza)-8, 6, 2);
                  }
                }
                //braccia
                ctx.fillStyle = colore2;                
                if(player.facingRight){
                  ctx.fillRect(xdisegnata+2-6, ydisegnata+11, 6, 10);
                  ctx.fillRect(xdisegnata+(larghezza)-2, ydisegnata+11, 10, 6);
                  if(armaturaAcquired[2]){
                    ctx.fillStyle = coloreArmatura;
                    ctx.fillRect(xdisegnata+2-6, ydisegnata+11+10, 6, 5);
                    ctx.fillRect(xdisegnata+(larghezza)-2+15-5, ydisegnata+11, 5, 6);
                    if(armaturaAcquired=="true,true,true,true"){
                    	ctx.fillStyle = coloreTemp;
	                    ctx.fillRect(xdisegnata+2-6, ydisegnata+11+10-2, 6, 2);
	                    ctx.fillRect(xdisegnata+(larghezza)-2+15-5-2, ydisegnata+11, 2, 6);
                    }                    
                  }                  
                }else{
                  ctx.fillRect(xdisegnata+2-10, ydisegnata+11, 10, 6);
                  ctx.fillRect(xdisegnata+(larghezza)-2, ydisegnata+11, 6, 10);
                  if(armaturaAcquired[2]){
                    ctx.fillStyle = coloreArmatura;
                    ctx.fillRect(xdisegnata+2-15, ydisegnata+11, 5, 6);
                    ctx.fillRect(xdisegnata+(larghezza)-2, ydisegnata+11+10, 6, 5);
                    if(armaturaAcquired=="true,true,true,true"){
                    	ctx.fillStyle = coloreTemp;
	                    ctx.fillRect(xdisegnata+2-15+5, ydisegnata+11, 2, 6);
	                    ctx.fillRect(xdisegnata+(larghezza)-2, ydisegnata+11+10-2, 6, 2);
                    }                                        
                  }                     
                }                
                //corpo
                if(armaturaAcquired[3]){
                  ctx.fillStyle = coloreArmatura;
                }else{
                  ctx.fillStyle = colore1;
                }                
              }                
              //corpo
              ctx.beginPath();
      		  ctx.lineWidth = "0";
      		  ctx.moveTo(xdisegnata-3, ydisegnata+10);
      		  ctx.lineTo(xdisegnata+larghezza+3, ydisegnata+10);
              ctx.lineTo(xdisegnata+(larghezza/2), ydisegnata+(altezza)-5);
              ctx.lineTo(xdisegnata-3, ydisegnata+10);
      		  ctx.fill();                         
        }
      }
      
      levelDefeated = [false, false, false, false, false, true, false, true]; //vettore che tiene quanti livelli sono stati superati
      heartAcquired = [false, false, false, false, false, false, false, false]; //vettore che tiene quanti cuori sono stati trovati
      subtank = [//vettore di subtanks - e' scollegata dal player almeno non si resetta al cambio del livello
    		{lifeMax: 20, life:parseInt(0,10), acquired:false},
    		{lifeMax: 20, life:parseInt(0,10), acquired:false},
    		{lifeMax: 20, life:parseInt(0,10), acquired:false},
    		{lifeMax: 20, life:parseInt(0,10), acquired:false},
      ];
      armaturaAcquired = [false, false, false, false];//vettore che tiene quante armatura e' stata trovata - 0:testa, 1:gambe, 2:buster, 3:corpo (quando ci sara': 4:aduchen)
      
  //gamestate - se == -1: stato in gioco
  var gamestate=0;
  //stato 0: nel menu principale - var nelMenuPrincipale=true; 
  //stato 1: selezione del livello - var stageSelection=false; 
  //stato 2: menu di pausa - var menuDiPausa=false; 
  //stato 3: menu opzioni - var nelMenuOpzioni=false; 
  //stato 4: opzioni nelle stage selection - var nelleOpzioniStageSelect=false; 
  //stato 5: c'e' un alert aperto - var alertAperto=false; 
  //stato 6: nel menu carica partita - var nelMenuCaricaPartita=false; 
  var objMenuPrincipale= new newMenuPrincipale(); //inizializza il menu principale
  
	//caricare il livello
	var level = []; //create the level array
	var lvlNumber=1;
      					
    //prendo lvlNumber e carico il livello scelto - sadly non ancora da file perchè siamo a corto di budget
	function leggiLivelloDaFile() {	//funz che carica il livello scelto - i livello sono salvati come stringhe
		switch (lvlNumber) {/*
i livelli sono disposti cosi in realta':1 8
			  						  3     4    
			  						  5     7
										6 2     (mi serve per assegnare correttamente i poteri)*/
										
			case 1: stringToLevel("tttttttttttttttttttttttttttttttttttl.........................aaaaaaaaal.................................al.....................aa..........al...........aaaaa.....aa.P........al.....................aa..........al...aaaaa.............aaaaaaaaaaaaal.....................aaaaaaaaaaaaal.........................à.À......la.................................l..................................l..................................l...aa.............................l...È.è............................l..................................la.................................l..................................l..................................l........⁰.¹.².³.⁴.⁵.⁶.⁷.........aal...aaaaaaaaaaaaaaaaaaaaaaaaa......l..................................l..................................la...0..1..2..3...4..5..6..7...aaaal..............................a...l..X...........................a.P.l..............................a...z0.62;0.85;");			
				break;

			case 8: stringToLevel("tttttttttttttttttttttttttttttttttttttttttttttttttttttttttttl..........................................................l..........................................................l..eeeeeee.................................................l..........................................................l............ggggggg.......................................l..........................................................l.....................fffffff..............................l..........................................................l..........................................................l..............................ggggggg.....................l..........................................................l........................................eeeeeee...........l..........................................................l..................................................aaa.....l..........a...............................................l..........a.......h...h..ccccc.ddd.ccc.d.d.c.ddd.c.c.....fl..........a...bbb.h.h.h..c.....d.d.c.c.d.d....d..c.c......l..........a...b.b.h.h.h..c..cc.dd..ccc.d.d.c..d...c.......l..........aaa.bbb..h.h...c...c.d.d.c.c..d..c..d...c.......l.........................cccc.............................l.........................................................gl..........................................................l..........................................................l...........................cccccccccccccccccccccccccccc...l....X.....................................................l....................bb....................................l................bb........................................l............gg............................................l........ff................................................l....ee....................................................z0.25;0.85;moon.jpg;#2F4858;#716F71;#81B2C5;#6D98BA;#EACDC2;#ebdb9d;#d6ba54;#490047;");
				break;

			case 4: stringToLevel("ttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttl...................................................................................................................................................................................................................l...................................................................................................................................................................................................................l...................................................................................................................................................................................................................l..j...j.kkk.jjj.k...jj...kkk...j.....kkk...j.......................................................................................................................................................................l..j...j.k.k.j.j.k...j.j..k.k..jj.....k.k..jj.......................................................................................................................................................................l..j.j.j.k.k.jjj.k...j.j..k.k.j.j.iii.k.k.j.j.......................................................................................................................................................................l..j.j.j.k.k.jj..k...j.j..k.k...j.....k.k...j.......................................................................................................................................................................l...j.j..kkk.j.j.kkk.jj...kkk...j.....kkk...j.......................................................................................................................................................................l...................................................................................................................................................................................................................l...................................................................................................................................................................................................................l.........................................................................................................................................................................................................f.........l.........................................................................................................................................................................................................hi........l.........................................................................................................................................................................................................hii.......l................................................................................................................................................................................................gg.......h.........l...............................................................................................................................................................................................ggg.......h.........l......................d.........................................................dddddddd...dddd................e............ddd....dddd.......................................................gggg.......h.........l.............................................................................................................................................................................................ggggg.......h...g.g.g.l.............................................ffff.......ffff................................................................................g..g..........gg..g.............................gggggg.......h...ggggg.l...............d....deddd............ffff.....ff.........ff..................ddd..............e......dd.....e..e..e.....d...........de.....gg..gg........ggg..gg...........dddd............ggggggg.......h...ggggg.l.X.........................ffff.......ff......ff.........ff...............................................................................ggg..ggg......gggg..ggg....ffff............ffff.gggggggg.......h...gg.gg.l............................ff........ff......ff.........ff..............................................................................gggg..gggg....ggggg..gggg....ff..............ff.ggggggggg......ggg..gg.gg.lccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc..ccccccccccccccc...ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc..ccccccccccccccccccccccccccccccccccccccccccccccccccccclbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbc..cbbbbbbbbbbbbbc...cbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbc..cbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbblbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb..bbbbbbbbbbbbbbb...bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb..bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbblbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb..bbbbbbbbbbbbbbb...bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb..bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbblbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb..bbbbbbbbbbbbbbb...bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb..bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbblbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb..bbbbbbbbbbbbbbb...bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb..bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbblbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbSSbbbbbbbbbbbbbbbSSSbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbSSbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbz0.62;0.85;sunnySky.png;#00000000;#5d4900;#21ad10;#c34e29;#d6ba54;#005f00;#86310e;#bcbcbc;#fcfcfc;#a60000;#402fd6;");
				break;
        
	    case 7: stringToLevel("tttttttttttttttttttttttttttttttttttttttttttttttttttl...................................................l..................................................l..................................................l......................................P...........l..................................................l..................................................l..................................................l..................................................l..................................................l..................................................l..................................................l..................................................l..................................................l..................................................w...bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb................l..................................................l..................................................l..................................................l..................................................l..................................................l..................................................l..................................................l..................................................l..................................................l..............................P...................l..X.................................P.............l..................................................z0.62;0.85;");  
	     	break;
        
			case 5: stringToLevel("ttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttl...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l..................................................................................................................................................................................................mmmmmmcccccccccccccccccccddccccccccccccccccccccc.............................................................................................................................................................l..................................................................................................................................................................................................mmmmmmcccccccccccccccccccddccccccccccccccccccccc.............................................................................................................................................................l..................................................................................................................................................................................................mmmmmmcccccccccccccccccccddccccccccccccccccccccc.............................................................................................................................................................l..................................................................................................................................................................................................mmmmmmcccccccccccccccccccddccccccccccccccccccccc.............................................................................................................................................................l..................................................................................................................................................................................................mmmmmmcccccccccccccccccccddccccccccccccccccccccc.............................................................................................................................................................l..................................................................................................................................................................................................mmmmmmcccccccccccccccccccddccccccccccccccccccccc.............................................................................................................................................................l..................................................................................................................................................................................................mmmmmmcccccccccccccccccccddccccccccccccccccccccc.............................................................................................................................................................l..................................................................................................................................................................................................mmmmmmcccccccccccccccccccddccccccccccccccccccccc.............................................................................................................................................................l..................................................................................................................................................................................................mmmmmmcccccccccccccccccccddccccccccccccccccccccc.............................................................................................................................................................l..................................................................................................................................................................................................mmmmmmcccccccccccccccccccddccccccccccccccccccccc.............................................................................................................................................................l..................................................................................................................................................................................................mmmmmmcccccccccccccccccccddccccccccccccccccccccc.............................................................................................................................................................l...................................................................................................................................................................................................mmmmmcccccccccccccccccccddccccccccccccccccccccc.............................................................................................................................................................l...................................................................................................................................................................................................mmmmmcccccccccccccqqqqqqddccccccccccccccccccccc.............................................................................................................................................................l....................................................................................................................................................................................................mmmmcccccccccccccqqqqqqddccccccccccccccccccccc.............................................................................................................................................................l....................................................................................................................................................................................................mmmmmqccccqqqqqqqqqqqqqddccccccccccccccccccccc.............................................................................................................................................................l....................................................................................................................................................................................................pqmmmqccccqqqqqqqqqqqqqddccccccccccccccccccccc.............................................................................................................................................................l....................................................................................................................................................................................................pqmmmqPqqqqqqqqqqqqqqqqddddddddddddddddddddddd.............................................................................................................................................................l....................................................................................................................................................................................................pqmmmqqqqqqqqqqqqqqqqqqddddddddddddddddddddddd.............................................................................................................................................................l....................................................................................................................................................................................................pqmmmqqqqqqqqqqqqqqqqqqddccccccccccccccccccccc.............................................................................................................................................................l....................................................................................................................................................................................................pqmmmqqqqqqqqqqqqqqqqqqddccccccccccccccccccccc.............................................................................................................................................................l..........................................................................................................bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb..........................................................pqmmmqqqqqqqqqqqqqqqqqqddccccccccccccccccccccc.............................................................................................................................................................l..........................................................................................................bccccccccccccccccccccccccccccccc..........................................................pqmmmqqqqqqqqqqqqqqqqqqddccccccccccccccccccccc.............................................................................................................................................................l..........................................................................................................ccccccccccccccccccccccccccccccccbbbb............................................bbbbbbbbbbbbbbddddd..............ddccccccccccccccccccccc.............................................................................................................................................................l..........................................................................................................cccccccccccccccccccccccccccccccccccb............................................ccccccccccccccccccc..............ddccccccccccccccccccccc.............................................................................................................................................................l..............................................bbbbbbbbbbbbbbbbbbbbbbbb....................................cccccccccccccccccccccccccccccccccccc................................bbbbbbbbbbbbccccccccccccccccccc..............ddddddddddddddddddddddd.............................................................................................................................................................l..............................................cccccccccccccccccccccccc....................................cccccccccccccccccccccccccccccccccccc................................ccccccccccccccccccccccccccccccc..............ddddddddddddddddddddddd.............................................................................................................................................................l.X................................bbbbbbbbbbbbccccccccccccccccccccccccbbbb................................cccccccccccccccccccccccccccccccccccc....................bbbbbbbbbbbbcccccccccccccccccccccccccccccccdd............ddccccccccccccccccccccc.............................................................................................................................................................l..................................cccccccccccccccccccccccccccccccccccccccc................................cccccccccccccccccccccccccccccccccccc....................ccccccccccccccccccccccccccccccccccccccccccccc............ddccccccccccccccccccccc.............................................................................................................................................................lbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccccccccccccccccccccccccccccccccccccccbbbb....................bbbbbbbbccccccccccccccccccccccccccccccccccccbbbbbbbbbbbbbbbbbbbbccccccccccccccccccccccccccccccccccccccccccccc...............cccccccccccccccccccc.............................................................................................................................................................lcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc....................ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc...............cccccccccccccccccccc.............................................................................................................................................................lccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccbbbbbbbbbbbbbbbbbbbbccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc...............cccccccccccccccccccc.............................................................................................................................................................lccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc...............cccccccccccccccccccc.............................................................................................................................................................lccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc...............ccccccccccccccccccccd............................................................................................................................................................lcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccd..............cccccccccccccccccccdd............................................................................................................................................................lccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccd...................cccccccccccccdd............................................................................................................................................................lcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccd..................cccccccccccccdd............................................................................................................................................................lccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccd.................cccccccccccccdd............................................................................................................................................................lcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccd................cccccccccccccdd............................................................................................................................................................lccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccd...............cccccccccccccdd............................................................................................................................................................lccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc...............cccccccccccccdd............................................................................................................................................................l..........................................................cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc..................................................................................ccccccccccc...............cccccccccccccdd............................................................................................................................................................l..........................................................cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc..................................................................................ccccccccccc...............cccccccccccccdd............................................................................................................................................................l..........................................................................................................................................................................................................ccccccccccc...................cccccccccdd............................................................................................................................................................l..........................................................................................................................................................................................................ccccccccccc...................cccccccccdddddddddddddddddddddddddddddddddddddddddddddddd..............................................................................................................l..........................................................................................................................................................................................................ccccccccccc...................cccccccccdddddddddddddddddddddddddddddddddddddddddddddddd..............................................................................................................l..........................................................................................................................................................................................................ccccccccccc.......................qqqccddcccccccccccccccccccccccccccccccccccccccccccccc..............................................................................................................l..........................................................................................................................................................................................................cccccccccccd......................qqqccddcccccccccccccccccccccccccccccccccccccccccccccc..............................................................................................................l..........................................................................................................................................................................................................ccccccccccccd.....................qqqccdd............................................................................................................................................................l..........................................................................................................................................................................................................cccccccccccccd....................qqqccdd............................................................................................................................................................l..........................................................................................................................................................................................................ccccccccccccccd...................qqqccdd............................................................................................................................................................l..........................................................................................................................................................................................................cccccccccccccccd..................qqqcc..............................................................................................................................................................l..........................................................................................................................................................................................................ccccccccccccccccd.................qqqcc..............................................................................................................................................................l..........................................................................................................................................................................................................ccccccccccccccccc.................qqrrr..............................................................................................................................................................l..........................................................................................................................................................................................................ccccccccccccccccc.................qrrrr..............................................................................................................................................................l..........................................................................................................................................................................................................ccccccccccccccccc.................qrrrr..............................................................................................................................................................l..........................................................................................................................................................................................................ccccccccccccccccc.................qrrrr..............................................................................................................................................................l..........................................................................................................................................................................................................ccccccccccccccccc.................qrrrr..............................................................................................................................................................l..........................................................................................................................................................................................................cccccccccccccccccdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd..............................................................................................................l..........................................................................................................................................................................................................ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc..............................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................z0.62;0.85;ice.png;#00000000;#dee9ff;#ccce7c;#8fdada;;;;;;;;#aa9f11;;;#81790c;#413003;#123551;");
				break; //questo diventera' il case 8

			case 3: stringToLevel("tttttttttttttttttttttttttttttttttttl..................................l.aaa.bbb.ccc.dd..eee.fff.gggg.h.h.l.a.a.b.b.c...d.d.e...f...g....h.h.l.aaa.bb..c.P.d.d.eee.fff.g.gg.hhh.l.a.a.b.b.c...d.d.e...f...g..g.h.h.l.a.a.bbb.ccc.dd..eee.f...ggg..h.h.l..................................l..................................l...aaaaaaaaaaaaaaaaaaaaaaaaaaaa...l..................................l..................................l.i.jjjjj.k.k......................l.....j...k.k......................l.i...j...kk.......................l.i.j.j...k.k......................l.i.jjj...k.k......................l..................................l..................................l..................................l...m...m.n...n.ooo.ppp.qqqq.rrr...l...mm.mm.nn..n.o.o.p.p.q..q.r.r...l...m.m.m.n.n.n.o.o.ppp.q..q.rrr...l.X.m...m.n..nn.o.o.p...q.qq.rr....l...m...m.n...n.ooo.p...qqqq.r.r...l..................................z0.62;0.85;ice.png;#000000;#dee9ff;#ccce7c;#8fdada;#d7dc8f;;;;;;;#aa9f11;;;#81790c;#413003;#123551;");
				break;

			case 2: stringToLevel("tttttttttttttttttttttttttttttttttttl...a.....a...a.....a...a.....a...al.P.a.....a.P.a.....a.P.a.....a.P.al...a.....a...a.....a...a.....a...alaaaa.....aaaaa.....aaaaa.....aaaaal.......aaaaa.........aaaaa.......al.......a...a.........a...a.......al.......a.P.a.........a.P.a.......al.......a...a.........a...a.......al.......aaaaa.........aaaaa.......al.............aaaaaaa.............alaaaa..aaaaa..a.....a..aaaaa..aaaaal...a..a...a..a.....a..a...a..a...al.P.a..a.P.a..a..X..a..a.P.a..a.P.al...a..a...a..a..a..a..a...a..a...alaaaa..aaaaa..a..a..a..aaaaa..aaaaal.............aaaaaaa.............al.......aaaaa.........aaaaa.......al.......a...a.........a...a.......al.......a.P.a.........a.P.a.......al.......a...a.........a...a.......al.......aaaaa.........aaaaa.......alaaaa.....aaaaa.....aaaaa.....aaaaal...a.....a...a.....a...a.....a...al.P.a.....a.P.a.....a.P.a.....a.P.al...a.....a...a.....a...a.....a...az0.62;0.85;");
				break;				
				
			default:
        objAlert = new newAlert("Errore nel caricamento del livello - carico il level 1",gamestate); gamestate=5; 
				lvlNumber=1;
				leggiLivelloDaFile();
		}
		return
	}

	function stringToLevel(lvlString){			
		level = []; //azzera level
		entity = []; //azzera entity
		var foreground = []; //crea un vettore tipo level per i blocchi di foreground
		var background = []; //crea un vettore tipo level per i blocchi di background
		var widthTot=0;
		var heightTot=1;
		for (i = 0; i < lvlString.length; i++) { //ciclo la stringa livello per trasformarlo da stringa a livello vero
			switch (lvlString[i]){
				case 'X'://posizione iniziale del player
					level['xStartingPos'] = (i%widthTot)*20;
					level['yStartingPos'] = (heightTot-2)*20;
					if(lvlString[i-1]=='p' || lvlString[i-1]=='q' || lvlString[i-1]=='r' ){blockBackground(lvlString[i-1]);} //se il blocco prima era un background lo carica sotto il player
					break;

				case 't': // t è il top floor/ceiling
					widthTot++;
					break;
					
				case 'l': // l è il left floor
					heightTot++;
					break;
        
        		case 'w': // w funziona come left floor ma indica anche il water level
					heightTot++;
          			level['waterLevel'] = ((heightTot-1)*20)+7; //setta il waterlevel
					break;

				case '.': // . è vuoto/aria
					break;
              
		        //ora le entita' (lettere maiuscole)
		        case 'P': // P indica un pipistrello
		        	var pipistrello = new newPipistrello();
		         	pipistrello.x= (i%widthTot)*20;
		        	pipistrello.y= (heightTot-1)*20+10;
					entity.push(pipistrello);
					if(lvlString[i-1]=='p' || lvlString[i-1]=='q' || lvlString[i-1]=='r' ){leggiBlocco(background,lvlString[i-1]);} //se il blocco prima era un background lo carica sotto la entita' letta
					break;
		          
		        case 'S': //S sono le spike (le spine che instaKillano)
		          var spike= new newSpike();
		          spike.x= (i%widthTot)*20;
		          spike.y= (heightTot-1)*20; 
				  entity.push(spike);
				  if(lvlString[i-1]=='p' || lvlString[i-1]=='q' || lvlString[i-1]=='r' ){leggiBlocco(background,lvlString[i-1]);} //se il blocco prima era un background lo carica sotto la entita' letta
		          break;

		        case '0': case '1': case '2': case '3': //sono i pezzi di armatura
			        var armatura = new newPickUp_Armor(parseInt(lvlString[i],10));
				    armatura.x= (i%widthTot)*20;
				    armatura.y= (heightTot-1)*20; 
					entity.push(armatura);
					if(lvlString[i-1]=='p' || lvlString[i-1]=='q' || lvlString[i-1]=='r' ){leggiBlocco(background,lvlString[i-1]);} //se il blocco prima era un background lo carica sotto la entita' letta
				    break;

		        case '4': case '5': case '6': case '7': //sono le subtank
			        var subtankLetta = new newPickUp_Subtank(parseInt(lvlString[i],10)-4);
				    subtankLetta.x= (i%widthTot)*20;
				    subtankLetta.y= (heightTot-1)*20; 
					entity.push(subtankLetta);
					if(lvlString[i-1]=='p' || lvlString[i-1]=='q' || lvlString[i-1]=='r' ){leggiBlocco(background,lvlString[i-1]);} //se il blocco prima era un background lo carica sotto la entita' letta
				    break;

				case '⁰': case '¹': case '²': case '³': case '⁴': case '⁵': case '⁶': case '⁷': //sono i cuori che aumentano la vita
					//caratteri per copiare/incollare:  ⁰ ¹ ² ³ ⁴ ⁵ ⁶ ⁷ ⁸ ⁹
			        var cuore = new newPickUp_Cuore(lvlString[i]);
				    cuore.x= (i%widthTot)*20;
				    cuore.y= (heightTot-1)*20-1; 
					entity.push(cuore);
					if(lvlString[i-1]=='p' || lvlString[i-1]=='q' || lvlString[i-1]=='r' ){leggiBlocco(background,lvlString[i-1]);} //se il blocco prima era un background lo carica sotto la entita' letta
				    break;				    

				case 'à'://small life recovery
			        var lifeRec = new newPickUp_LifeEnergy(2);
			        lifeRec.width=10;
			        lifeRec.height=10;
				    lifeRec.x= (i%widthTot)*20+(10-lifeRec.width/2);
				    lifeRec.y= (heightTot-1)*20+1; 
					entity.push(lifeRec);
					if(lvlString[i-1]=='p' || lvlString[i-1]=='q' || lvlString[i-1]=='r' ){leggiBlocco(background,lvlString[i-1]);} //se il blocco prima era un background lo carica sotto la entita' letta
				    break;

				case 'À'://big life recovery
			        var lifeRec = new newPickUp_LifeEnergy(8);
			        lifeRec.width=18;
			        lifeRec.height=18;			        
				    lifeRec.x= (i%widthTot)*20+(10-lifeRec.width/2);
				    lifeRec.y= (heightTot-1)*20+1; 
					entity.push(lifeRec);
					if(lvlString[i-1]=='p' || lvlString[i-1]=='q' || lvlString[i-1]=='r' ){leggiBlocco(background,lvlString[i-1]);} //se il blocco prima era un background lo carica sotto la entita' letta
				    break;

				case 'è'://small weapon recovery
			        var weaponRec = new newPickUp_WeaponEnergy(2);
			        weaponRec.width=10;
			        weaponRec.height=10;			        
				    weaponRec.x= (i%widthTot)*20+(10-weaponRec.width/2);
				    weaponRec.y= (heightTot-1)*20+1; 
					entity.push(weaponRec);
					if(lvlString[i-1]=='p' || lvlString[i-1]=='q' || lvlString[i-1]=='r' ){leggiBlocco(background,lvlString[i-1]);} //se il blocco prima era un background lo carica sotto la entita' letta
				    break;
				case 'È'://big weapon recovery
			        var weaponRec = new newPickUp_WeaponEnergy(8);
			        weaponRec.width=18;
			        weaponRec.height=18;			        
				    weaponRec.x= (i%widthTot)*20+(10-weaponRec.width/2);
				    weaponRec.y= (heightTot-1)*20+1;
					entity.push(weaponRec);
					if(lvlString[i-1]=='p' || lvlString[i-1]=='q' || lvlString[i-1]=='r' ){leggiBlocco(background,lvlString[i-1]);} //se il blocco prima era un background lo carica sotto la entita' letta
				    break;																		    	        	 							

				//i blocchi
				case 'a': case 'b': case 'c': case 'd': case 'e': case 'f': case 'g': case 'h': case 'i': case 'j': case 'k': 
					// le lettere dalla a alla k indicano un blocco da 20px*20px di colori diversi
					leggiBlocco(level,lvlString[i]);
					break;

				case 'm': case 'n': case 'o'://foreground
					leggiBlocco(foreground,lvlString[i]);
					break;

				case 'p': case 'q': case 'r'://background 
					leggiBlocco(background,lvlString[i]);
					break;	
											
				case 'z': // 'z' indica la fine del livello. Da qui in poi non sto leggendo piu blocchi e entita' ma le caratteristiche del livello come gravita', posizione iniziale del player e colore dei blocchi del livello
					widthTot++;
					heightTot++;
					level['gravity'] = readNumber();
					level['friction'] = readNumber();
          level['gravityWater'] = level.gravity*4/7;
          level['frictionWater'] = level.friction*9/10;
					level['backGroundImg'] = readBackground();
					blocksColors(level,11);//this will push color[] to level, it will contain the blocks colors
					blocksColors(foreground,3);
					blocksColors(background,3);
					level['foreground'] = foreground;
					level['background'] = background;
					break;
			}//fine dello switch case															
		}//fine del for
					        
		//imposto la grandezza del livello e lo confronto con la grandezza del canvas
		level['maxWidth'] = widthTot*20;
		level['maxHeight'] = heightTot*20;
        if (level.maxWidth < canvas.width){ //controlla che il livello non sia piu piccolo del canvas, che se no si bugga tutto - le x
           		canvasWidth=level.maxWidth;
        }else{
           		canvasWidth=canvas.width;
        }
        if (level.maxHeight < canvas.height){ //controlla che il livello non sia piu piccolo del canvas, che se no si bugga tutto - le y
           		canvasHeight=level.maxHeight;
        }else{
           		canvasHeight=canvas.height;
        }     
		//imposto i colori dei blocchi in base a quello che ho letto
		for(i=0; i<level.length;i++){
			switch(level[i].lettera){
				case 'a': level[i].color=level.color[0]; break;
				case 'b': level[i].color=level.color[1]; break;
				case 'c': level[i].color=level.color[2]; break;
				case 'd': level[i].color=level.color[3]; break;
				case 'e': level[i].color=level.color[4]; break;
				case 'f': level[i].color=level.color[5]; break;
				case 'g': level[i].color=level.color[6]; break;
				case 'h': level[i].color=level.color[7]; break;
				case 'i': level[i].color=level.color[8]; break;
				case 'j': level[i].color=level.color[9]; break;
				case 'k': level[i].color=level.color[10]; break;
			}
		}
		for(i=0; i<level.foreground.length;i++){
			switch(level.foreground[i].lettera){
				case 'm': level.foreground[i].color=level.foreground.color[0]; break;
				case 'n': level.foreground[i].color=level.foreground.color[1]; break;
				case 'o': level.foreground[i].color=level.foreground.color[2]; break;
			}
		}
		for(i=0; i<level.background.length;i++){
			switch(level.background[i].lettera){
				case 'p': level.background[i].color=level.background.color[0]; break;
				case 'q': level.background[i].color=level.background.color[1]; break;
				case 'r': level.background[i].color=level.background.color[2]; break;
			}
		}				
    //ora inizializzo i bordi - ho schiacciato il codice perche' occupava righe inutili. e' molto simile al prototipo di blocco    
		var ground = {x: 0, width: level.maxWidth, height: (20)+1, color: level.color[0]};  ground['y']=level.maxHeight-ground.height;
    	var ceiling = {x: 0, y: 0, width: level.maxWidth, height: (20)+1, color: level.color[0]};        	            
    	var leftWall = {x: 0, y: 0, width: (20)+1, height: level.maxHeight, color: level.color[0]};
    	var rightWall = {y: 0, width: (20)+1, height: level.maxHeight, color: level.color[0]}; rightWall['x']= level.maxWidth-rightWall.width;	            				
		level.push(ground, ceiling, leftWall, rightWall); //this pushes all of the static objects into the level				   

    // ora definisco le funzioni interne di stringToLevel()
		function readNumber(){//compone i vari caratteri di una stringa in numero. Esempio traduce "10.91;" in numeroLetto=10.91
			var numeroLetto=0;
			var isDecimale=false;
			var esponente=0;
			for (i++ ; i < lvlString.length; i++) {
				if (lvlString[i] != ";"){
					if (lvlString[i]=='.' || lvlString[i]==','){ //determina se il numero che sto leggendo avra' delle cifre decimali
						isDecimale=true;
					}else{
						if(!isDecimale){
							numeroLetto=(numeroLetto*10)+Number(lvlString[i]);
						}else{
							esponente--;
							numeroLetto=numeroLetto+(Number(lvlString[i])*Math.pow(10,esponente))
						}
					}
				}else{
					break;
				}			
			}
			return numeroLetto;
		}
		function readBackground(){
			var immagineLetta="";
			if (i < lvlString.length){
				for (i++ ; i < lvlString.length; i++) {
					if (lvlString[i] != ";"){
						immagineLetta+=lvlString[i]
					}else{
						break;
					}
				}
			}
			if (immagineLetta!=""){
				return document.getElementById(immagineLetta);
			}else{
				return immagineLetta;
			}
		}
		function readColor(){
			var coloreLetto="";
			if (i < lvlString.length){
				for (i++ ; i < lvlString.length; i++) {
					if (lvlString[i] != ";"){
						coloreLetto+=lvlString[i]
					}else{
						break;
					}
				}
			}
			if (coloreLetto==""){
				return "#155261";
			}else{
				return coloreLetto;
			}						
		}
		function blocksColors(vettore,numeroDiLetture){
			var color = [];
			for (n=0; n<numeroDiLetture; n++){
				color[n]=readColor();	
			}
			vettore['color']=color;
		}
		function leggiBlocco(vettore,lettera){
			var blocco = new Blocco(i,widthTot,heightTot);
			for (n=1; ;n++){	//controllo che se le lettere dopo sono uguali a questo blocco. Se lo sono non sto a creare tanti blocchetti ma ne faccio solo uno piu' largo per ottimizzare
					if(lvlString[i+n]==lettera){
						blocco.width=blocco.width+(20);
					}else{
						i=i+n-1;
						break; //del for
					}
			}
			blocco.width=blocco.width+1;
			blocco['lettera'] = lettera;
			vettore.push(blocco);
		}				
		function Blocco(i,widthTot,heightTot) { //prototipo di blocco
           	this.x= (i%widthTot)*20;
            this.y= (heightTot-1)*20;
            this.width= 20;
      		this.height= 20+1;
            this.color= '#155261';            													
		}					
	}//fine di stringToLevel()
      
      var entity = []; //create the entity array. Ogni entità deve avere: x, y, width, height e il metodo physics che determinerà come si comporta l'entità
      //adesso inizio i prototipi delle entita'
      
      function newSparo(larghezza,altezza) {//lo sparo creato dal player
        this.life= 1;
        this.active=true;
        this.type= "sparoDelPlayer";
        this.damage= 1;
        this.facingRight=player.facingRight;        
        if(this.facingRight){
         this.x= player.x+player.width+6;
        }else{
         this.x= player.x-6-larghezza; 
        }
        this.xv= 0;
        this.width= larghezza;
        this.height= altezza;
        this.y=player.y+9;
        this.color=player.charge0color;
        this.speed= 3.9;
        this.perforation=false;
        this.canPassWall=false;
        this.hasPhysics=true;
        this.physics= function( xdisegnata, ydisegnata, indiceDiQuestaEntity){
          //movimento dello sparo
          if (this.facingRight){
            this.xv -= this.speed;
          }else{
            this.xv += this.speed;
          }
          this.xv *= level.friction;
          this.x += -this.xv;    
          //collisione dello sparo con level
          if(!this.canPassWall){
	          for (i=0; i<level.length;i++){
	            if (collisionBetween(this,level[i])){
	              this.life=-1;
	            }
	          }
          }else{
	        	if((this.x > (player.x+player.width+(canvasWidth*2)))||( this.x < (player.x-(canvasWidth*2)))){
	        		this.life=-1;
	        	}          
          }
          //collisione dello sparo con altre entita'
          for (i=0; i<entity.length;i++){
            if (!(i == indiceDiQuestaEntity)){
              if ( entity[i].life > 0 && !(this.type == entity[i].type || entity[i].type=="pickup" )  && collisionBetween(this,entity[i]) ){	//controlla che l'entita da colpire sia viva, che non siano lo stesso proiettile e infine se c'è una collisione
                entity[i].life-=this.damage;
                if (!(entity[i].life < 1 && this.perforation)){
                  this.life=-1;
                }
              }
            }
          }
          
          if(this.active && (this.life<1 || ((xdisegnata > canvasWidth)||( xdisegnata+this.width < 0)))){
            player.activeShot=player.activeShot-1;
            this.active=false;
          }
        }
      }

      function newSparoCharge3(xPassata,yPassata,larghezza,altezza,indicePassato,faceRight,goUp) {//lo sparo creato dal player - carica 3
      	this.index=indicePassato;
      	this.numeroFigli=5;
        this.life= 1;
        this.type= "sparoDelPlayer";
        this.damage= 1;
        this.facingRight=faceRight;
        this.x=xPassata;       
        this.startingX=this.x;
        this.xv= 0;
        this.yv= 0;
        this.width= larghezza;
        this.height= altezza;
        this.y=yPassata;
        this.startingY=yPassata;
        this.minY=this.startingY-(this.height);
        this.maxY=this.startingY+(this.height);
        this.startingDirection=goUp;
        this.goingUp=goUp;
        this.color=player.charge0color;
        this.speed=2.5;
        this.ySpeed=2.5;//velocita con cui va su e giu
        this.perforation=true;
        this.canPassWall=true;
        this.hasPhysics=true;
        this.physics= function(xdisegnata, ydisegnata, indiceDiQuestaEntity){
	        //movimento x dello sparo
	        if (this.facingRight){
	          this.xv -= this.speed;
	        }else{
	          this.xv += this.speed;
	        }
	        this.xv *= level.friction;
	        this.x += -this.xv; 
			//movimento y dello sparo
	        if (this.goingUp){
	          this.yv -= this.ySpeed;
	          if(this.y < this.minY){
	          	this.goingUp=false;
	          }
	        }else{
	          this.yv += this.ySpeed;
	          if(this.y > this.maxY){
	          	this.goingUp=true;
	          }	          
	        }
	        this.yv *= level.friction;
	        this.y += this.yv;
	        //creazione degli spari figli
	        if(this.index<this.numeroFigli-1){
				if(creaFiglio(this.startingX,this.facingRight,this.x,this.width,this.startingY,this.height,this.index,this.color,this.startingDirection)){
					this.index=this.numeroFigli;
				}
	        }
	        //collisione dello sparo con level
	        if(!this.canPassWall){
	         for (i=0; i<level.length;i++){
	           if (collisionBetween(this,level[i])){
	             this.life=-1;
	           }
	         }
	        }else{
	        	if((this.x > (player.x+player.width+(canvasWidth*2)))||( this.x < (player.x-(canvasWidth*2)))){
	        		this.life=-1;
	        	}
	        }
	        //collisione dello sparo con altre entita'
	        for (i=0; i<entity.length;i++){
	          if (!(i == indiceDiQuestaEntity)){
	            if ( entity[i].life > 0 && !(this.type==entity[i].type || entity[i].type=="pickup" || entity[i].type=="ostacolo" || entity[i].type=="piattaforma" )  && collisionBetween(this,entity[i]) ){	//controlla che l'entita da colpire sia viva, che non siano lo stesso proiettile e infine se c'è una collisione
	              entity[i].life-=this.damage;
	              if (!(entity[i].life < 1 && this.perforation)){
	                this.life=-1;
	              }
	            }
	          }
	        }
          //non c'e' nessun activeShot-- perche' il counter lo altera lo sparoInvisibile
                    
			function creaFiglio(startingX,facingRight,x,width,startingY,height,index,color,startingDirection){
				var xMax=startingX;		
				if(facingRight){
					if(((x)-(width))>xMax){
						var sparoFiglio = new newSparoCharge3((x-width),startingY,width,height,index+1,facingRight,startingDirection);
		                sparoFiglio.color= color;
		                entity.push(sparoFiglio);						
						return true;
					}
				}else{
					if(x+(width)<(xMax)){
						var sparoFiglio = new newSparoCharge3((x+(width)),startingY,width,height,index+1,facingRight,startingDirection);
		                sparoFiglio.color= color;
		                entity.push(sparoFiglio);						
						return true;
					}	
				}
				return false;
			}//fine di crea figlio
	      }//fine di this.physics      
      }

      function newHomingMissle(larghezza,altezza,color1Pass,color2Pass,pesoShot) {//lo sparo creato dal player
        this.life= 1;
        this.active=true;
        this.activeShotCounter=pesoShot;
        this.type= "sparoDelPlayer";
        this.damage= 1;
        if(player.facingRight){
         this.x= player.x+player.width+6;
         this.xv=3;
        }else{
         this.x= player.x-6-larghezza; 
         this.xv=-3;
        }
        this.speed= 1.3;
        this.yv= 0;
        this.width= larghezza;
        this.height= altezza;
        this.y=player.y+9;
        this.targetIndex=-1;
        this.color1=color1Pass;
        this.color2=color2Pass;
        this.perforation=false;
        this.canPassWall=true;
        this.hasPhysics=true;
        this.canSelfDraw=true;
        this.selfDraw= function(xdisegnata, ydisegnata, indiceDiQuestaEntity){
          ctx.fillStyle=this.color1;
          ctx.beginPath();
	      ctx.lineWidth = 1;
	      var larghezzaMissile=this.width/2;
		  var velMin=3;
	      if(this.xv<velMin && this.xv>-velMin && this.yv>velMin){//dritto verso l'alto
			  baseMissileVerticale( (xdisegnata), (ydisegnata), (this.width), (this.height), (larghezzaMissile), (larghezzaMissile));
		      ctx.fillStyle=this.color2;
		      ctx.fillRect(xdisegnata+this.width/2+larghezzaMissile/2-1, ydisegnata+larghezzaMissile+2, 2, larghezzaMissile-1);
		      ctx.fillRect(xdisegnata+this.width/2-larghezzaMissile/2-1, ydisegnata+larghezzaMissile+2, 2, larghezzaMissile-1);			
	      }else if(this.xv<velMin && this.xv>-velMin && this.yv<velMin){//dritto verso il basso
      		  baseMissileVerticale( (xdisegnata), (ydisegnata+this.height), (this.width), (-this.height), (larghezzaMissile), (-larghezzaMissile));
		      ctx.fillStyle=this.color2;
		      ctx.fillRect(xdisegnata+this.width/2+larghezzaMissile/2-1, ydisegnata-1, 2, larghezzaMissile-1);
		      ctx.fillRect(xdisegnata+this.width/2-larghezzaMissile/2-1, ydisegnata-1, 2, larghezzaMissile-1);      		  
	      }else if(this.yv<velMin && this.yv>-velMin && this.xv>velMin){//dritto a destra
     		  baseMissileLaterale( (xdisegnata), (ydisegnata), (this.width), (this.height), (larghezzaMissile), (larghezzaMissile), this.color2);
		      ctx.fillStyle=this.color2;
		      ctx.fillRect(xdisegnata-1, ydisegnata+this.height/2-larghezzaMissile/2-1, larghezzaMissile-1, 2);
		      ctx.fillRect(xdisegnata-1, ydisegnata+this.height/2+larghezzaMissile/2-1, larghezzaMissile-1, 2);	     		  
	      }else if(this.yv<velMin && this.yv>-velMin && this.xv<velMin){//dritto a sinistra
			  baseMissileLaterale( (xdisegnata+this.width), (ydisegnata), (-this.width), (this.height), (-larghezzaMissile), (larghezzaMissile));
		      ctx.fillStyle=this.color2;
		      ctx.fillRect(xdisegnata+this.width-larghezzaMissile+2, ydisegnata+this.height/2-larghezzaMissile/2-1, larghezzaMissile-1, 2);
		      ctx.fillRect(xdisegnata+this.width-larghezzaMissile+2, ydisegnata+this.height/2+larghezzaMissile/2-1, larghezzaMissile-1, 2);			  
	      }else if(this.xv>velMin && this.yv>velMin){//verso l'alto e destra
	       	  baseMissileDiagonale( (xdisegnata), (ydisegnata), (this.width), (this.height), (larghezzaMissile), (larghezzaMissile));
	          ctx.beginPath(); ctx.lineWidth = 2; ctx.strokeStyle=this.color2;
		      ctx.moveTo(xdisegnata-1, ydisegnata+this.height-larghezzaMissile+1);
		      ctx.lineTo(xdisegnata+larghezzaMissile-1, ydisegnata+this.height-larghezzaMissile-larghezzaMissile/2-2);
		      ctx.moveTo(xdisegnata+larghezzaMissile-1, ydisegnata+this.height+1);
		      ctx.lineTo(xdisegnata+larghezzaMissile*2-1, ydisegnata+this.height-larghezzaMissile/2-2); 
		      ctx.stroke();	       	  
	      }else if(this.xv<velMin && this.yv>velMin){//verso l'alto e sinistra
			  baseMissileDiagonale( (xdisegnata+this.width), (ydisegnata), (-this.width), (this.height), (-larghezzaMissile), (larghezzaMissile));
	          ctx.beginPath(); ctx.lineWidth = 2; ctx.strokeStyle=this.color2;
		      ctx.moveTo(xdisegnata+this.width-larghezzaMissile+1, ydisegnata+this.height+1);
		      ctx.lineTo(xdisegnata+this.width-larghezzaMissile-larghezzaMissile/2-1, ydisegnata+this.height-larghezzaMissile/2-1);
		      ctx.moveTo(xdisegnata+this.width+1, ydisegnata+this.height-larghezzaMissile+1);
		      ctx.lineTo(xdisegnata+this.width-larghezzaMissile/2-1, ydisegnata+this.height-larghezzaMissile-larghezzaMissile/2-1);
		      ctx.stroke();			  
	      }else if(this.xv<velMin && this.yv<velMin){//verso il basso e sinistra
			  baseMissileDiagonale( (xdisegnata+this.width), (ydisegnata+this.height), (-this.width), (-this.height), (-larghezzaMissile), (-larghezzaMissile));
	          ctx.beginPath(); ctx.lineWidth = 2; ctx.strokeStyle=this.color2;
		      ctx.moveTo(xdisegnata+this.width-larghezzaMissile+1, ydisegnata-1);
		      ctx.lineTo(xdisegnata+this.width-larghezzaMissile-larghezzaMissile/2-1, ydisegnata+larghezzaMissile-2);
		      ctx.moveTo(xdisegnata+this.width+1, ydisegnata+larghezzaMissile-1);
		      ctx.lineTo(xdisegnata+this.width-larghezzaMissile/2-1, ydisegnata+larghezzaMissile+larghezzaMissile/2+1);
		      ctx.stroke();			  
	      }else if(this.xv>velMin && this.yv<velMin){//verso il basso e destra
			  baseMissileDiagonale( (xdisegnata), (ydisegnata+this.height), (this.width), (-this.height), (larghezzaMissile), (-larghezzaMissile));
	          ctx.beginPath(); ctx.lineWidth = 2; ctx.strokeStyle=this.color2;
		      ctx.moveTo(xdisegnata-1, ydisegnata+this.height-larghezzaMissile-1);
		      ctx.lineTo(xdisegnata+larghezzaMissile/2+1, ydisegnata+this.height-larghezzaMissile+larghezzaMissile/2+1);
		      ctx.moveTo(xdisegnata+larghezzaMissile-1, ydisegnata-1);
		      ctx.lineTo(xdisegnata+larghezzaMissile+larghezzaMissile/2+1, ydisegnata+larghezzaMissile/2+1);
		      ctx.stroke();			  
	      }
	      function baseMissileVerticale(xdisegnata,ydisegnata,width,height,larghezzaMissile,altezzaMissile){
		      ctx.moveTo(xdisegnata+width/2, ydisegnata);
		      ctx.lineTo(xdisegnata+width/2+larghezzaMissile/2, ydisegnata+altezzaMissile);
		      ctx.lineTo(xdisegnata+width/2+larghezzaMissile/2, ydisegnata+height);
		      ctx.lineTo(xdisegnata+width/2-larghezzaMissile/2, ydisegnata+height);
		      ctx.lineTo(xdisegnata+width/2-larghezzaMissile/2, ydisegnata+altezzaMissile);
		      ctx.lineTo(xdisegnata+width/2, ydisegnata);
		      ctx.fill();     	
	      }
	      function baseMissileLaterale(xdisegnata,ydisegnata,width,height,larghezzaMissile,altezzaMissile){
		      ctx.moveTo(xdisegnata+width, ydisegnata+height/2);
		      ctx.lineTo(xdisegnata+width-larghezzaMissile, ydisegnata+height/2+altezzaMissile/2);
		      ctx.lineTo(xdisegnata, ydisegnata+height/2+altezzaMissile/2);
		      ctx.lineTo(xdisegnata, ydisegnata+height/2-altezzaMissile/2);
		      ctx.lineTo(xdisegnata+width-larghezzaMissile, ydisegnata+height/2-altezzaMissile/2);
		      ctx.lineTo(xdisegnata+width, ydisegnata+height/2);
		      ctx.fill();     	
	      }
	      function baseMissileDiagonale(xdisegnata,ydisegnata,width,height,larghezzaMissile,altezzaMissile){
		      ctx.moveTo(xdisegnata+width, ydisegnata);
		      ctx.lineTo(xdisegnata+width, ydisegnata+altezzaMissile);
		      ctx.lineTo(xdisegnata+larghezzaMissile, ydisegnata+height);
		      ctx.lineTo(xdisegnata, ydisegnata+height-altezzaMissile);
		      ctx.lineTo(xdisegnata+width-larghezzaMissile, ydisegnata);
		      ctx.lineTo(xdisegnata+width, ydisegnata);
		      ctx.fill();	      	
	      }	                
        }        
        this.physics= function( xdisegnata, ydisegnata, indiceDiQuestaEntity){
          //movimento dello sparo
          if(this.targetIndex==-1){
          	this.targetIndex=findTarget(this.x+this.width/2,this.y+this.height/2);
          	if(this.xv<0){this.xv-=this.speed}else{this.xv+=this.speed}
          }else{
          	if(entity[this.targetIndex].life>0){//insegue il target
	          	if(this.x<entity[this.targetIndex].x+(entity[this.targetIndex].width/2)){
	          		this.xv += this.speed;
	          	}else{
	          		this.xv -= this.speed;	
	          	}
	          	if(this.y<entity[this.targetIndex].y+(entity[this.targetIndex].height/2)){
	          		this.yv -= this.speed/(1.5);
	          	}else{
	          		this.yv += this.speed/(1.5);	
	          	}          		
          	}else{
          		this.targetIndex=-1;
          	}
          }
          this.xv *= level.friction;
          this.x += this.xv;
          this.yv *= level.friction;
          this.y += -this.yv;             
          //collisione dello sparo con level
          if(!this.canPassWall){
	          for (i=0; i<level.length;i++){
	            if (collisionBetween(this,level[i])){
	              this.life=-1;
	            }
	          }
          }else{
	        	if((this.x > (player.x+player.width+(canvasWidth*2)))||( this.x < (player.x-(canvasWidth*2)))){
	        		this.life=-1;
	        	}          
          }
          //collisione dello sparo con altre entita'
          for (i=0; i<entity.length;i++){
            if (!(i == indiceDiQuestaEntity)){
              if ( entity[i].life > 0 && !(this.type == entity[i].type || entity[i].type=="pickup" )  && collisionBetween(this,entity[i]) ){	//controlla che l'entita da colpire sia viva, che non siano lo stesso proiettile e infine se c'è una collisione
                entity[i].life-=this.damage;
                if (!(entity[i].life < 1 && this.perforation)){
                  this.life=-1;
                }
              }
            }
          }          
          if(this.active && (this.life<1 || ((xdisegnata > canvasWidth)||( xdisegnata+this.width < 0)))){
            player.activeShot=player.activeShot-this.activeShotCounter;
            this.active=false;
          }
          function findTarget(x,y){
          	var closestEntityX=999999999999; 
          	var closestEntityY=999999999999; 
          	var closestEntityIndex=-1;
          	for (i=0; i<entity.length;i++){
				if(entity[i].life > 0){
					if(entity[i].type=="mostro"){
						if(((entity[i].x<x && entity[i].x>x-canvasWidth/1.25)||(entity[i].x>x && entity[i].x<x+canvasWidth/1.25))&&((entity[i].y<y && entity[i].y>y-canvasHeight/1.25)||(entity[i].y>y && entity[i].y<y+canvasHeight/1.25))){//se e' circa nello schermo
							var entX=entity[i].x+entity[i].width/2;
							var entY=entity[i].y+entity[i].height/2;
							prevDistanceX=x-closestEntityX; if(prevDistanceX<0){prevDistanceX=-1*prevDistanceX;}
							prevDistanceY=y-closestEntityY; if(prevDistanceY<0){prevDistanceY=-1*prevDistanceY;}
							distanceX=x-entX; if(distanceX<0){distanceX=-1*distanceX;}
							distanceY=y-entY; if(distanceY<0){distanceY=-1*distanceY;}
							if((distanceX+distanceY)<(prevDistanceX+prevDistanceY)){
								closestEntityX=entX;
								closestEntityY=entY;
								closestEntityIndex=i;		
							}
						}
					}
				}
          	}
          	return closestEntityIndex;
          }//fine findTarget
        }//fine homingMissle physics
      }//fine newHomingMissle      

      function newChameleonSting(larghezza,altezza) {//lo sparo creato dal player - cham sting main
        this.life= 1;
        this.type= "sparoDelPlayer";
        this.damage= 1;
        this.facingRight=player.facingRight;        
        if(this.facingRight){
         this.x= player.x+player.width+17;
        }else{
         this.x= player.x-17-larghezza; 
        }
        this.width= larghezza;
        this.height= altezza;
        this.y=player.y+7;
        this.figliY=player.y+14;
        this.color="#b0f000";
        this.timer=0;
        this.growthSpeed=0.1;
        this.hasPhysics=true;
        this.physics= function( xdisegnata, ydisegnata, indiceDiQuestaEntity){
        	this.timer++;
        	this.width+=this.growthSpeed;
        	this.x-=this.growthSpeed/2;
        	this.height+=this.growthSpeed;
        	this.y-=this.growthSpeed/2;
	        //collisione dello sparo con altre entita'
	        for (i=0; i<entity.length;i++){
	          if (!(i == indiceDiQuestaEntity)){
	            if ( entity[i].life > 0 && !(this.type == entity[i].type || entity[i].type=="pickup" )  && collisionBetween(this,entity[i]) ){	//controlla che l'entita da colpire sia viva, che non siano lo stesso proiettile e infine se c'è una collisione
	              entity[i].life-=this.damage;
	              if (!(entity[i].life < 1)){
	                this.life=-1;
	              }
	            }
	          }
	        }
        	if(this.timer>10 && this.life>0){//crea figli
				var sparoFiglio = new newChameleonSting_Figli(this.x,this.figliY,30,6,4,0,this.facingRight,this.color);
	            entity.push(sparoFiglio);
				var sparoFiglio = new newChameleonSting_Figli(this.x,this.figliY-5,30,6,4,1,this.facingRight,this.color);
	            entity.push(sparoFiglio);
				var sparoFiglio = new newChameleonSting_Figli(this.x,this.figliY-1,30,6,4,-1,this.facingRight,this.color);
	            entity.push(sparoFiglio);	            	            		
	        	this.life=-1;	
        	}	                	
        }//fine physics
      }//fine cham sting main
      function newChameleonSting_Figli(xPass,yPass,larghezza,altezza,xSpeedPass,ySpeedPass,facingRightPass,colorPass) {//figli di cham sting
        this.life= 1;
        this.active=true;
        this.type= "sparoDelPlayer";
        this.damage= 1;
        this.facingRight=facingRightPass;
        this.x=xPass;
        this.xv= 0;
        this.yv= 0;
        this.width= larghezza;
        this.height= altezza;
        this.y=yPass;
        this.color=colorPass;
        this.xSpeed= xSpeedPass;
        this.ySpeed= ySpeedPass;
        this.perforation=false;
        this.canPassWall=true;
        this.hasPhysics=true;
        this.canSelfDraw=true;
        this.selfDraw= function( xdisegnata, ydisegnata, indiceDiQuestaEntity){
          ctx.strokeStyle=this.color;
          ctx.beginPath();
          var larghezzaLinea=6;
	      ctx.lineWidth = larghezzaLinea;
	      if(this.ySpeed==0){//dritto
		      ctx.moveTo(xdisegnata, ydisegnata+this.height/2-larghezzaLinea/2);
		      ctx.lineTo(xdisegnata+this.width, ydisegnata+this.height/2-larghezzaLinea/2);
		  }else if((this.ySpeed>0.1 && this.facingRight)||(this.ySpeed<-0.1 && !this.facingRight)){
		      ctx.moveTo(xdisegnata, ydisegnata+this.height);
		      ctx.lineTo(xdisegnata+this.width, ydisegnata);		  	
		  }else if((this.ySpeed<-0.1 && this.facingRight)||(this.ySpeed>0.1 && !this.facingRight)){
		      ctx.moveTo(xdisegnata, ydisegnata);
		      ctx.lineTo(xdisegnata+this.width, ydisegnata+this.height);		  	
		  }
		  ctx.stroke();
		}        
        this.physics= function( xdisegnata, ydisegnata, indiceDiQuestaEntity){
          //movimento dello sparo
          if (this.facingRight){
            this.xv -= this.xSpeed;
          }else{
            this.xv += this.xSpeed;
          }
          this.xv *= level.friction;
          this.x += -this.xv;    
          this.yv -= this.ySpeed;
          this.yv *= level.friction;
          this.y += this.yv;          
          //collisione dello sparo con level
          if(!this.canPassWall){
	          for (i=0; i<level.length;i++){
	            if (collisionBetween(this,level[i])){
	              this.life=-1;
	            }
	          }
          }else{
	        	if((this.x > (player.x+player.width+(canvasWidth*2)))||( this.x < (player.x-(canvasWidth*2)))){
	        		this.life=-1;
	        	}          
          }
          //collisione dello sparo con altre entita'
          for (i=0; i<entity.length;i++){
            if (!(i == indiceDiQuestaEntity)){
              if ( entity[i].life > 0 && !(this.type == entity[i].type || entity[i].type=="pickup" )  && collisionBetween(this,entity[i]) ){	//controlla che l'entita da colpire sia viva, che non siano lo stesso proiettile e infine se c'è una collisione
                entity[i].life-=this.damage;
                if (!(entity[i].life < 1 && this.perforation)){
                  this.life=-1;
                }
              }
            }
          }
		  //disattiva counter dei colpi          
          if(this.active && (this.life<1 || ((xdisegnata > canvasWidth)||( xdisegnata+this.width < 0)))){
            player.activeShot=player.activeShot-1;
            this.active=false;
          }
        }
      }      

      function newRollingShield(larghezza,altezza) {//lo sparo creato dal player
        this.life= 1;
        this.active=true;
        this.type= "sparoDelPlayer";
        this.damage= 1;
        this.facingRight=player.facingRight;        
        if(this.facingRight){
         this.x= player.x+player.width+6;
         this.xv= -10;
        }else{
         this.x= player.x-6-larghezza; 
         this.xv= 10;
        }
        this.yv= 0;
        this.width= larghezza;
        this.height= altezza;
        this.y=player.y;
        this.color="#2860b8";
        this.speed= 2;
        this.rotation=0;
        this.isInWater=false;
        this.canBounce=true;
        this.perforation=false;
        this.hasPhysics=true;
        this.canSelfDraw=true;
        this.selfDraw= function( xdisegnata, ydisegnata, indiceDiQuestaEntity){
          ctx.fillStyle=this.color;
          ctx.beginPath();
	      ctx.lineWidth = 1;
	      if(this.rotation<5){
	      	  var lungLato = this.width/2;
		      ctx.moveTo(xdisegnata+this.width/2-lungLato/2, ydisegnata);
		      ctx.lineTo(xdisegnata+this.width/2+lungLato/2, ydisegnata);
		      ctx.lineTo(xdisegnata+this.width, ydisegnata+this.height/2-lungLato/2);
		      ctx.lineTo(xdisegnata+this.width, ydisegnata+this.height/2+lungLato/2);
		      ctx.lineTo(xdisegnata+this.width/2+lungLato/2, ydisegnata+this.height);
		      ctx.lineTo(xdisegnata+this.width/2-lungLato/2, ydisegnata+this.height);
		      ctx.lineTo(xdisegnata, ydisegnata+this.height/2+lungLato/2);
		      ctx.lineTo(xdisegnata, ydisegnata+this.height/2-lungLato/2);
		      ctx.lineTo(xdisegnata+this.width/2-lungLato/2, ydisegnata);
		      ctx.fill();
	      }else{
		      ctx.moveTo(xdisegnata+this.width/2, ydisegnata);
		      ctx.lineTo(xdisegnata+this.width-this.width/4, ydisegnata+this.height/8);
		      ctx.lineTo(xdisegnata+this.width, ydisegnata+this.height/2);
		      ctx.lineTo(xdisegnata+this.width-this.width/4, ydisegnata+this.height-this.height/8);
		      ctx.lineTo(xdisegnata+this.width/2, ydisegnata+this.height);
		      ctx.lineTo(xdisegnata+this.width/4, ydisegnata+this.height-this.height/8);
		      ctx.lineTo(xdisegnata, ydisegnata+this.height/2);
		      ctx.lineTo(xdisegnata+this.width/4, ydisegnata+this.height/8);
		      ctx.lineTo(xdisegnata+this.width/2, ydisegnata);
		      ctx.fill();	      	      	      	
	      }
        }        
        this.physics= function( xdisegnata, ydisegnata, indiceDiQuestaEntity){
          this.rotation++; if(this.rotation>10){this.rotation=0;} //animazione rotazione
          //movimento dello sparo
          if (this.facingRight){
            this.xv -= this.speed;
          }else{
            this.xv += this.speed;
          }
          this.xv *= level.friction;
          this.x += -this.xv;
	      var gravityApplicata = 0; var frizioneApplicata = 0;
	        if (this.y > level.waterLevel){  //determina se sei in acqua o no
	            if (!this.isInWater){
	                this.isInWater = true;
	                this.yv = 0;
	            }
	            gravityApplicata = level.gravityWater;
	            frizioneApplicata = level.frictionWater;
	        }else{
	            this.isInWater = false;
	            gravityApplicata = level.gravity;
	            frizioneApplicata = level.friction;            
	        }      
	        this.yv += gravityApplicata;//get level gravity
	        if(this.yv>19){this.yv=19;}//limita la gravita'
	        this.y += this.yv;//apply gravity

	        for(i=0; i<level.length; i++) {//y collision with level
	          if(((this.y+this.height)>level[i].y)&&((this.y+this.height)<level[i].y+19)&&(collisionBetween(this,level[i]))){//collison verso il basso
	            this.y=level[i].y-this.height-1;
	            this.yv=this.yv/2;
	          }
	          if((((this.x+this.width)>level[i].x)||(this.x<(level[i].x+level[i].width)))&&(collisionBetween(this,level[i]))){//collsion laterale
	          	if(this.canBounce){
	          		this.canBounce=false;
	          		if(this.facingRight){
	          			this.x=level[i].x-this.width-1;	
	          		}else{
	          			this.x=level[i].x+level[i].width+1;
	          		}
	          		this.xv=0;
	          		this.facingRight=!this.facingRight;	
	          	}else{
	          		this.life=-1;	
	          	}
	          }	
	        }
          //collisione dello sparo con altre entita'
          for (i=0; i<entity.length;i++){
            if (!(i == indiceDiQuestaEntity)){
              if ( entity[i].life > 0 && !(this.type == entity[i].type || entity[i].type=="pickup" )  && collisionBetween(this,entity[i]) ){	//controlla che l'entita da colpire sia viva, che non siano lo stesso proiettile e infine se c'è una collisione
                entity[i].life-=this.damage;
                if (!(entity[i].life < 1 && this.perforation)){
                  this.life=-1;
                }
              }
            }
          }          
          if(this.active && (this.life<1 || ((xdisegnata > canvasWidth)||( xdisegnata+this.width < 0)))){
            player.activeShot=player.activeShot-3;
            this.active=false;
          }
        }//fine physics
      }//fine rolling shield

      function newFireWave(larghezza,altezza) {//lo sparo creato dal player
      	this.timer=0;
        this.life= 1;
        this.type= "sparoDelPlayer";
        this.damage= 1;
        if(player.facingRight){
         this.x= player.x+player.width+14;
        }else{
         this.x= player.x-8-larghezza; 
        }
        this.y=player.y+9;
        this.width= larghezza;
        this.height= altezza;
        this.color1=player.power[3].color1;
        this.color2=player.power[3].color2;
        this.hasPhysics=true;
        this.canSelfDraw=true;
        this.selfDraw= function( xdisegnata, ydisegnata, indiceDiQuestaEntity){
          var numeroFiamme=Math.round((this.width/10));
          var fiammeWidth=(this.width/numeroFiamme)-1;
          for(i=0;i<numeroFiamme;i++){
          	ctx.fillStyle=this.color1;
          	ctx.fillRect(xdisegnata+1+i*fiammeWidth, ydisegnata, fiammeWidth-1, this.height);
          	disegnaFiammella(xdisegnata+1+i*fiammeWidth, ydisegnata,fiammeWidth-1,this.color1);	
          	ctx.fillStyle=this.color2;
          	ctx.fillRect(xdisegnata+3+i*fiammeWidth, ydisegnata+2, fiammeWidth-5, this.height-4);
          	disegnaFiammella(xdisegnata+3+i*fiammeWidth, ydisegnata+2,fiammeWidth-5,this.color2);	
          }         
          function disegnaFiammella(x,y,fiammeWidth,color){
	          ctx.fillStyle=color;
	          ctx.beginPath();
		      ctx.lineWidth = 1;
		      var lato=fiammeWidth/6;
		      ctx.moveTo(x, y+1);
		      ctx.lineTo(x+lato, y-lato*2);
		      ctx.lineTo(x+lato*2, y+1);
		      ctx.lineTo(x+lato*4, y-lato*4);
		      ctx.lineTo(x+lato*6, y+1);
		      ctx.lineTo(x, y+1);
		      ctx.fill();          	
          }          
        }       
        this.physics= function( xdisegnata, ydisegnata, indiceDiQuestaEntity){
          //movimento(insieme al player)
	      if(player.facingRight){
	       this.x= player.x+player.width+14;
	      }else{
	       this.x= player.x-8-larghezza; 
	      }
	      this.y=player.y+9;          
          //collisione dello sparo con altre entita'
          for (i=0; i<entity.length;i++){
            if (!(i == indiceDiQuestaEntity)){
              if ( entity[i].life > 0 && !(this.type == entity[i].type || entity[i].type=="pickup" )  && collisionBetween(this,entity[i]) ){	//controlla che l'entita da colpire sia viva, che non siano lo stesso proiettile e infine se c'è una collisione
                entity[i].life-=this.damage;
              }
            }
          }
          if(keys[sparokey] && player.power[3].usage>0 && (player.carica<150 || !armaturaAcquired[2])){
          	if(this.timer==40){
          		player.power[3].usage--;
          		this.timer=0;
          	}else{this.timer++;}
          }else{
          	this.life= -1;
          	player.activeShot=player.activeShot-3;
          }
        }
      }

      function newStormTornado(xPassata,yPassata,larghezza,altezza,indicePassato,faceRight,goUp) {//lo sparo creato dal player - carica 3
      	this.index=indicePassato;
        this.active=true;
        this.main=false;
        this.contaLife=0;
        this.facingRight=faceRight;
        if(indicePassato==0){
        	if(goUp){//individua il main
        		this.main=true;
        	}
	        if(this.facingRight){
	         this.x= xPassata+player.width+6;
	        }else{
	         this.x= xPassata-6-larghezza; 
	        }        	
        }else{this.x=xPassata;}
        this.startingX=this.x;
      	this.numeroFigli=40;
        this.life= 1;
        this.type= "sparoDelPlayer";
        this.damage= 0.2;
        this.xv= 0;
        this.yv= 0;
        this.width=larghezza;
        this.height=altezza;
        this.y=yPassata;
        this.startingY=yPassata;
        this.minY=this.startingY-(this.height/4);
        this.maxY=this.startingY+(this.height/4);
        this.minX=this.startingX-(this.width);
        this.maxX=this.startingX+(this.width);        
        this.startingDirection=goUp;
        this.goingUp=goUp;
        this.moveNext=faceRight;
        this.color="#f5aad5";
        this.speed=0.5;
        this.xSpeed=1;
        this.ySpeed=0.5;//velocita con cui va su e giu
        this.perforation=true;
        this.canPassWall=true;
        this.hasPhysics=true;
        this.physics= function(xdisegnata, ydisegnata, indiceDiQuestaEntity){
        	this.speed+=0.0012;
	        //movimento x dello sparo
	        if (this.facingRight){
	          this.xv -= this.speed;
	        }else{
	          this.xv += this.speed;
	        }
	        this.xv *= level.friction;
	        this.x += -this.xv; 
			//movimento y dello sparo
	        if (this.goingUp){
	          this.yv -= this.ySpeed;
	          if (this.facingRight){this.xv -= this.xSpeed/2;
	          }else{this.xv += this.xSpeed/2;}
	          if(this.y < this.minY){
	          	this.goingUp=false;
	          }
	        }else{
	          this.yv += this.ySpeed;
	          if (this.facingRight){this.xv += this.xSpeed;
	          }else{this.xv -= this.xSpeed;}	          
	          if(this.y > this.maxY){
	          	this.goingUp=true;
	          }	          
	        }	        
	        this.yv *= level.friction;
	        this.y += this.yv;
	        this.xv *= level.friction;
	        this.x += -this.xv; 	        
	        //creazione degli spari figli
	        if(this.index<this.numeroFigli-1){
				if(creaFiglio(this.startingX,this.facingRight,this.x,this.width,this.startingY,this.height,this.index,this.color,this.startingDirection,this.speed)){
					this.index=this.numeroFigli;
				}
	        }
	        //collisione dello sparo con level
	        if(!this.canPassWall){
	         for (i=0; i<level.length;i++){
	           if (collisionBetween(this,level[i])){
	             this.life=-1;
	           }
	         }
	        }else{
	        	if((this.x > (player.x+player.width+(canvasWidth*2)))||( this.x < (player.x-(canvasWidth*2)))){
	        		this.life=-1;
	        	}
	        }
	        //collisione dello sparo con altre entita'
	        for (i=0; i<entity.length;i++){
	          if (!(i == indiceDiQuestaEntity)){
	            if ( entity[i].life > 0 && !(this.type==entity[i].type || entity[i].type=="pickup" || entity[i].type=="ostacolo" || entity[i].type=="piattaforma" )  && collisionBetween(this,entity[i]) ){	//controlla che l'entita da colpire sia viva, che non siano lo stesso proiettile e infine se c'è una collisione
	              entity[i].life-=this.damage;
	              this.damage= 0;
	              if (!(entity[i].life < 1 && this.perforation)){
	                this.life=-1;
	              }
	            }
	          }
	        }
          if(this.contaLife>420){
          	this.life=-1;	
          }this.contaLife++;
          
          if(this.main){
            //disattiva colpi su schermo
            if(this.active && (this.life<1 || ((xdisegnata > canvasWidth)||( xdisegnata+this.width < 0)))){
              player.activeShot=player.activeShot-3; 
              this.active=false;       
            }
          }
                    
			function creaFiglio(startingX,facingRight,x,width,startingY,height,index,color,startingDirection,velocita){
				var xMax=startingX;		
				if(facingRight){
					if(((x)-(width))>xMax){
						var sparoFiglio = new newStormTornado((x-width),startingY,width,height,index+1,facingRight,startingDirection);
		                sparoFiglio.color= color;
		                sparoFiglio.speed=velocita;
		                entity.push(sparoFiglio);						
						return true;
					}
				}else{
					if(x+(width)<(xMax)){
						var sparoFiglio = new newStormTornado((x+(width)),startingY,width,height,index+1,facingRight,startingDirection);
		                sparoFiglio.color= color;
		                sparoFiglio.speed=velocita;
		                entity.push(sparoFiglio);						
						return true;
					}	
				}
				return false;
			}//fine di crea figlio
	      }//fine di this.physics      
      }

      function newElectricSpark(larghezza,altezza){//lo sparo creato dal player - electric spark charge 0
        this.life= 1;
        this.active=true;
        this.type= "sparoDelPlayer";
        this.damage= 1;
        this.facingRight=player.facingRight;        
        if(this.facingRight){
         this.x= player.x+player.width+6;
        }else{
         this.x= player.x-6-larghezza; 
        }
        this.xv= 0;
        this.yv= 0;
        this.width= larghezza;
        this.height= altezza;
        this.y=player.y+9;
        this.color=player.charge0color;
        this.speedX= 2;
        this.speedY= 0;
        this.perforation=false;
        this.canPassWall=false;
        this.hasPhysics=true;
        this.canSelfDraw=true;
        this.selfDraw= function( xdisegnata, ydisegnata, indiceDiQuestaEntity){
          ctx.fillStyle="#f83cf8";
          ctx.beginPath();
	      ctx.lineWidth = 1;
	      var lungLato = this.width/4;
	      ctx.moveTo(xdisegnata+this.width/2-lungLato/2, ydisegnata);
	      ctx.lineTo(xdisegnata+this.width/2+lungLato/2, ydisegnata);
	      ctx.lineTo(xdisegnata+this.width, ydisegnata+this.height/2-lungLato/2);
	      ctx.lineTo(xdisegnata+this.width, ydisegnata+this.height/2+lungLato/2);
	      ctx.lineTo(xdisegnata+this.width/2+lungLato/2, ydisegnata+this.height);
	      ctx.lineTo(xdisegnata+this.width/2-lungLato/2, ydisegnata+this.height);
	      ctx.lineTo(xdisegnata, ydisegnata+this.height/2+lungLato/2);
	      ctx.lineTo(xdisegnata, ydisegnata+this.height/2-lungLato/2);
	      ctx.lineTo(xdisegnata+this.width/2-lungLato/2, ydisegnata);
	      ctx.fill();          
        }
        this.physics= function( xdisegnata, ydisegnata, indiceDiQuestaEntity){ 
          if (this.facingRight){//movimento dello sparo
            this.xv -= this.speedX;
          }else{
            this.xv += this.speedX;
          }
          this.yv += this.speedY; 
          this.xv *= level.friction;
          this.yv *= level.friction;
          this.x += -this.xv;
          this.y += -this.yv;
              
          //collisione dello sparo con level
          if(!this.canPassWall){
	          for (i=0; i<level.length;i++){
	            if (collisionBetween(this,level[i])){
	              this.life=-1;
	              if(this.speedX!=0){//ora genera figli (quindi solo con collisioni con level)
		              var sparoFiglioUp = new newElectricSpark(this.width,this.height);
		              sparoFiglioUp.x=this.x+this.xv/2;
		              sparoFiglioUp.y=this.y;
		              sparoFiglioUp.canPassWall=true;
		              sparoFiglioUp.active=false;
		              sparoFiglioUp.speedX=0; sparoFiglioUp.speedY=-this.speedX;
		              entity.push(sparoFiglioUp);
		              var sparoFiglioDown = new newElectricSpark(this.width,this.height);
		              sparoFiglioDown.x=this.x+this.xv/2;
		              sparoFiglioDown.y=this.y;
		              sparoFiglioDown.canPassWall=true;
		              sparoFiglioDown.active=false;
		              sparoFiglioDown.speedX=0; sparoFiglioDown.speedY=this.speedX;
		              entity.push(sparoFiglioDown);
	              }	              
	            }
	          }
          }else{
          	if(this.x>level.maxWidth+100 || this.x<-100){
          		this.life=-1;
          	}
          }
          //collisione dello sparo con altre entita'
          for (i=0; i<entity.length;i++){
            if (!(i == indiceDiQuestaEntity)){
              if ( entity[i].life > 0 && !(this.type == entity[i].type || entity[i].type=="pickup" )  && collisionBetween(this,entity[i]) ){	//controlla che l'entita da colpire sia viva, che non siano lo stesso proiettile e infine se c'è una collisione
                entity[i].life-=this.damage;
                if (!(entity[i].life < 1 && this.perforation)){
                  this.life=-1;
                }
              }
            }
          }
          //disattiva colpi su schermo
          if(this.active && (this.life<1 || ((xdisegnata > canvasWidth)||( xdisegnata+this.width < 0)))){
            this.active=false;
            player.activeShot=player.activeShot-1;       
          }          
        }
      }      

      function newBoomerangCutter(larghezza,altezza) {//lo sparo creato dal player
        this.type= "sparoDelPlayer";
        this.damage= 1;      
        this.life= 1;
        this.active=true;
        if(player.yv>0){
        	this.goUp=false;
        }else{
        	this.goUp=true;
        }
        this.facingRight=player.facingRight;        
        if(this.facingRight){
         this.x= player.x+player.width+6;
        }else{
         this.x= player.x-6-larghezza; 
        }
        this.xv= 0;
        this.yv= 0;
        this.rotation=0;
        this.width= larghezza;
        this.height= altezza;
        this.y=player.y+9;
        this.color=player.charge0color;
        this.speedX= 2.6;
        this.speedY= 0;
        this.speedX2= 0;
        this.speed= 0;
        this.entityPickedIndex=-1;
        this.hitSomething=false;
        this.perforation=true;
        this.canPassWall=true;
        this.hasPhysics=true;
        this.canSelfDraw=true;
        this.selfDraw= function (xdisegnata, ydisegnata, indiceDiQuestaEntity){
          ctx.strokeStyle=player.power[6].color1;
          ctx.beginPath();
	      ctx.lineWidth = 8;
	      ctx.moveTo(xdisegnata, ydisegnata);
	      ctx.lineTo(xdisegnata+this.width-(ctx.lineWidth/2), ydisegnata);
          ctx.lineTo(xdisegnata+this.width, ydisegnata+this.height-(ctx.lineWidth/2));
	      ctx.stroke();
	      ctx.lineWidth = 4;
	      ctx.strokeStyle=player.power[6].color2;
	      ctx.stroke();
        }        
        this.physics= function( xdisegnata, ydisegnata, indiceDiQuestaEntity){
          //movimento dello sparo
          if(this.speedX>0){
	        if (this.facingRight){
	          this.xv -= this.speedX;
	        }else{
	          this.xv += this.speedX;
	        }
	        if (this.goUp){
	          this.yv += this.speedY;
	        }else{
	          this.yv -= this.speedY;
	        }	          	          
	        this.speedX-=0.2;
			this.speedY+=0.2;
		  }else if(this.speedY>0){
	        if (this.facingRight){
	          this.xv += this.speedX2;
	        }else{
	          this.xv -= this.speedX2;
	        }
	        if (this.goUp){
	          this.yv += this.speedY;
	        }else{
	          this.yv -= this.speedY;
	        }          	          
	        this.speedY-=0.2;
			this.speedX2+=0.2;
		  }else if (this.speedX2>0){
	        if (this.facingRight){
	          this.xv += this.speedX2;
	        }else{
	          this.xv -= this.speedX2;
	        }
	        if (this.goUp){
	          this.yv -= this.speed;
	        }else{
	          this.yv += this.speed;
	        }          	          
	        this.speedX2-=0.2;
			this.speed+=0.2;		  	
          }else{//da qui in poi insegue il player
          	if(this.x>player.x+(player.width/2)){
          		this.xv += this.speed/2;
          	}else{
          		this.xv -= this.speed/2;	
          	}
          	if(this.y>player.y+(player.height/2)){
          		this.yv += this.speed/2;
          	}else{
          		this.yv -= this.speed/2;	
          	}          	
          }
          this.xv *= level.friction;
          this.x += -this.xv;
          this.yv *= level.friction;
          this.y += -this.yv;
          	             
          //collisione dello sparo con level
          if(!this.canPassWall){
	          for (i=0; i<level.length;i++){
	            if (collisionBetween(this,level[i])){
	              this.life=-1;
	            }
	          }
          }else{
	        	if((this.x > (player.x+player.width+(canvasWidth*2)))||( this.x < (player.x-(canvasWidth*2)))){
	        		this.life=-1;
	        	}          
          }
          //collisione dello sparo con altre entita'
          for (i=0; i<entity.length;i++){
            if (!(i == indiceDiQuestaEntity)){//danno ai mostri
              if ( entity[i].life > 0 && !(this.type == entity[i].type || entity[i].type=="pickup" )  && collisionBetween(this,entity[i]) ){	//controlla che l'entita da colpire sia viva, che non siano lo stesso proiettile e infine se c'è una collisione
                entity[i].life-=this.damage;
                this.hitSomething=true;
                if (!(entity[i].life < 1 && this.perforation)){
                  this.life=-1;
                }
              }
			  if(this.entityPickedIndex==-1){//raccoglie gli oggetti
			  	if(entity[i].life > 0 && entity[i].type=="pickup"){
			  		if(collisionBetween(this,entity[i])){
		              	this.entityPickedIndex=i;
		              	this.hitSomething=true;			  			
			  		}
			  	}
			  }
            }
          }
          if(this.entityPickedIndex!=-1){
          	entity[this.entityPickedIndex].x=this.x;
          	entity[this.entityPickedIndex].y=this.y;
          }
          if(collisionBetween(this,player) && this.speedX<0.3){
          	if(!this.hitSomething){
          		if(player.power[6].usage<player.power[6].usageMax){player.power[6].usage++;}
          	}
          	this.life=-1;
          }          
          if(this.active && (this.life<1 || ((xdisegnata > canvasWidth)||( xdisegnata+this.width < 0)))){
            player.activeShot=player.activeShot-1;
            this.active=false;       
          }
        }
      }
      
      function newShotgunIce(xPassataR,xPassataL,yPassata,larghezza,altezza,isPadrePassato,xSpeedPassato,ySpeedPassato,facingRightPassato) {//lo sparo creato dal player - shotgun ice charge 0
        this.life= 1;
        this.active=isPadrePassato;
        this.type= "sparoDelPlayer";
        this.damage= 1;
        this.facingRight=facingRightPassato;        
        if(this.facingRight){
         this.x= xPassataR;
        }else{
         this.x= xPassataL; 
        }
        this.xv= 0;
        this.yv= 0;
        this.width= larghezza;
        this.height= altezza;
        this.y=yPassata; 
        this.speed= xSpeedPassato;
        this.yspeed= ySpeedPassato;
        this.isFather=isPadrePassato;
        this.isDying=false;
        this.perforation=false;
        this.canPassWall=false;
        this.hasPhysics=true;
        this.canSelfDraw=true;
        this.selfDraw= function( xdisegnata, ydisegnata, indiceDiQuestaEntity){
          ctx.strokeStyle=player.power[7].color1;
          ctx.beginPath();
	      ctx.lineWidth = (this.width/8);
	      ctx.moveTo(xdisegnata+this.width/2, ydisegnata);
	      ctx.lineTo(xdisegnata+this.width/2, ydisegnata+this.height/2);
          ctx.lineTo(xdisegnata+this.width, ydisegnata);
          ctx.lineTo(xdisegnata+this.width/2, ydisegnata+this.height/2);
          ctx.lineTo(xdisegnata+this.width, ydisegnata+this.height/2);
          ctx.lineTo(xdisegnata+this.width/2, ydisegnata+this.height/2);
          ctx.lineTo(xdisegnata+this.width, ydisegnata+this.height);
          ctx.lineTo(xdisegnata+this.width/2, ydisegnata+this.height/2);
          ctx.lineTo(xdisegnata+this.width/2, ydisegnata+this.height);
          ctx.lineTo(xdisegnata+this.width/2, ydisegnata+this.height/2);
          ctx.lineTo(xdisegnata, ydisegnata+this.height);
          ctx.lineTo(xdisegnata+this.width/2, ydisegnata+this.height/2);
          ctx.lineTo(xdisegnata, ydisegnata+this.height/2);
          ctx.lineTo(xdisegnata+this.width/2, ydisegnata+this.height/2);
          ctx.lineTo(xdisegnata, ydisegnata);
          ctx.lineTo(xdisegnata+this.width/2, ydisegnata+this.height/2);
          ctx.lineTo(xdisegnata+this.width/2, ydisegnata);
	      ctx.stroke();          
        }
        this.physics= function( xdisegnata, ydisegnata, indiceDiQuestaEntity){ 
          if (this.facingRight){//movimento dello sparo
            this.xv -= this.speed;
          }else{
            this.xv += this.speed;
          }
          this.yv += this.yspeed; 
          this.xv *= level.friction;
          this.yv *= level.friction;
          this.x += -this.xv;
          this.y += -this.yv;
              
          //collisione dello sparo con level
          if(!this.canPassWall){
	          for (i=0; i<level.length;i++){
	            if (collisionBetween(this,level[i])){
	              this.isDying=true;
	              if(this.facingRight){
	              	this.x=level[i].x-this.width-1;
	              }else{
	              	this.x=level[i].x+level[i].width+1;
	              }
	            }
	          }
          }else{
          	if(this.x>level.maxWidth+100 || this.x<-100){
          		this.life=-1;
              this.isFather=false;
          	}
          }
          //collisione dello sparo con altre entita'
          for (i=0; i<entity.length;i++){
            if (!(i == indiceDiQuestaEntity)){
              if ( entity[i].life > 0 && !(this.type == entity[i].type || entity[i].type=="pickup" )  && collisionBetween(this,entity[i]) ){	//controlla che l'entita da colpire sia viva, che non siano lo stesso proiettile e infine se c'è una collisione
                entity[i].life-=this.damage;
                if (!(entity[i].life < 1 && this.perforation)){
                  this.isDying=true;
                }
              }
            }
          }
          
          //genera figlio alla morte se isPadre, altrimenti muore e basta
          if(this.isDying){
            //this.x += this.xv;         
            if(this.isFather){
              var sparoFiglio = new newShotgunIce(this.x,this.x,(this.y+this.height/4),this.width/2,this.height/2,false,2.5,0,!this.facingRight); entity.push(sparoFiglio);
              var sparoFiglio = new newShotgunIce(this.x,this.x,(this.y+this.height/4),this.width/2,this.height/2,false,2.5,1,!this.facingRight); entity.push(sparoFiglio);
              var sparoFiglio = new newShotgunIce(this.x,this.x,(this.y+this.height/4),this.width/2,this.height/2,false,2.5,2,!this.facingRight); entity.push(sparoFiglio);
              var sparoFiglio = new newShotgunIce(this.x,this.x,(this.y+this.height/4),this.width/2,this.height/2,false,2.5,-1,!this.facingRight); entity.push(sparoFiglio);
              var sparoFiglio = new newShotgunIce(this.x,this.x,(this.y+this.height/4),this.width/2,this.height/2,false,2.5,-2,!this.facingRight); entity.push(sparoFiglio);
            }
            this.life=-1;
          }
          
          if(this.isFather){
            //disattiva colpi su schermo
            if(this.active && (this.life<1 || ((xdisegnata > canvasWidth)||( xdisegnata+this.width < 0)))){
              this.active=false;
              player.activeShot=player.activeShot-3;       
            }
          }          
        }
      }      

      function newPipistrello() {//mostro pipistrello
        this.life= 1;
        this.type= "mostro";
        this.damage= 1;
        this.x= 0;
        this.y= 0;
        this.xv= 0;
        this.yv= 0;
        this.slope = 0;
        this.width= 30;
        this.height= 30;
        this.color= '#a400ff';
        this.speed= 0.5;
        this.hasPhysics=true;
        this.physics= function( xdisegnata, ydisegnata, indiceDiQuestaEntity){
          //movimento
          if (this.x < player.x-1){
            this.xv -= this.speed;
          }else if(this.x > player.x+player.width-1){
            this.xv += this.speed;
          }
          if (this.y < player.y+1){
            this.yv -= this.speed;
          }else{
            this.yv += this.speed;
          }
          this.xv *= level.friction;
          this.yv *= level.friction;
          this.x += -this.xv;
          this.y += -this.yv;   
          
          this.slope = 0;	//serve per i bordi tipo
          for(var i = 0; i < level.length; i++) {
            if(collisionBetween(this, level[i])) {
              if(this.slope != -8) {
                this.y -= 1;
                this.slope += 1;
              }
            }
          }
          // level collision
          for(var i = 0; i < level.length; i++) {
            if(collisionBetween(this, level[i])) {
              this.y += this.slope;
              this.x += this.xv*2;
              this.xv = 0;
            } 
            if(collisionBetween(this, level[i])) {
              this.y += this.yv*2;
              this.yv = 0;
            }   
          }
          //other entity mostro collision - e' un po buggata
          for(var i = 0; i < entity.length; i++) {
          	if (entity[i].life > 0 && entity[i].type=="mostro" && !(i==indiceDiQuestaEntity)){
            	if(collisionBetween(this, entity[i])) {
              		this.x += this.xv*1.95;
              		this.xv = 0;
					this.y += this.yv*1.95;
					this.yv = 0;
            	}  
            }
          }
          //collision col player
          if(collisionBetween(this, player)) {
        	 this.xv = 0;
			     this.yv = 0;		
          }            
        }              
      }
                  
      function newSpike() {//le spine per terra
        this.life= 9999999999;
        this.type= "ostacolo";
        this.damage= 9999999999;
        this.x= 0;
        this.y= 0;
        this.width= 20;
        this.height= 20;
        this.canSelfDraw=true;
        this.hasPhysics=false;
        this.color= '#bcbcbc';
        this.selfDraw= function( xdisegnata, ydisegnata, indiceDiQuestaEntity){
          //funzione per disegnare la spina
        	ctx.beginPath();
		      ctx.lineWidth = "1";
		      ctx.fillStyle = this.color;
		      ctx.moveTo(xdisegnata, ydisegnata+this.height);
		      ctx.lineTo(xdisegnata+this.width, ydisegnata+this.height);
	          ctx.lineTo(xdisegnata+(this.width/2), ydisegnata-2);
	          ctx.lineTo(xdisegnata, ydisegnata+this.height);
		      ctx.fill();
        }              
      }

      function newPickUp_Armor(indicePassato) {//le spine per terra
        this.life= 9999999999;
        this.type= "pickup";
        this.indice=indicePassato;//indicePassato=0 -> helmet, indicePassato=1 -> legs, indicePassato=2 -> buster, indicePassato=3 -> corpo
        this.damage= 0;
        this.x= 0;
        this.y= 0;
        this.width= 20;
        this.height= 20;
        this.canSelfDraw=true;
        this.hasPhysics=true;
        this.selfDraw= function( xdisegnata, ydisegnata, indiceDiQuestaEntity){//funzione per disegnare l'entita
        	ctx.fillStyle=player.defaultColor1;
			    ctx.fillRect(xdisegnata, ydisegnata, this.width, this.height);        	
        	ctx.fillStyle=player.defaultColoreArmatura;
			    ctx.fillRect(xdisegnata+1, ydisegnata+1, this.width-2, this.height-2);
			    ctx.textAlign = "center";
			    ctx.font = "small-caps bold 18px Lucida Console";
    			var textHeight=ctx.measureText("O").width; //dato che la O normalmente e' alta quanto larga (font monospace) imposto la larghezza di O come altezza approssimativa del testo
    			switch(this.indice){
    				case 0: disegnaTestoConBordino("H",xdisegnata+(this.width/2), (ydisegnata+(this.height-2)/2+textHeight/2),player.defaultColor1,player.defaultColoreArmatura);break;
    				case 1: disegnaTestoConBordino("L",xdisegnata+(this.width/2), (ydisegnata+(this.height-2)/2+textHeight/2),player.defaultColor1,player.defaultColoreArmatura);break;
    				case 2: disegnaTestoConBordino("B",xdisegnata+(this.width/2), (ydisegnata+(this.height-2)/2+textHeight/2),player.defaultColor1,player.defaultColoreArmatura);break;
    				case 3: disegnaTestoConBordino("C",xdisegnata+(this.width/2), (ydisegnata+(this.height-2)/2+textHeight/2),player.defaultColor1,player.defaultColoreArmatura);break;
			}
			ctx.textAlign = "left";//lo azzero se no mi si bugga in alcuni menu
        }//fine di selfDraw
        this.physics= function( xdisegnata, ydisegnata, indiceDiQuestaEntity){
			if(armaturaAcquired[this.indice]){//se il player l'ha gia' trovata disattiva l'entita'
				this.life=-1;
			}else{//da qui inizia this.physics vero e proprio
				if(collisionBetween(this, player)) {//quando il player lo raccoglie
					this.life=-1;
					switch(this.indice){
						case 0: objAlert = new newAlert("You have found the helmet upgrade! You can break some blocks with a headbutt.",gamestate); gamestate=5;
							break;
						case 1: objAlert = new newAlert("You have found the boots upgrade! Press "+dashkey+" to dash.",gamestate); gamestate=5;
							break;
						case 2: objAlert = new newAlert("You have found the buster upgrade! You can charge a more powerfull shot.",gamestate); gamestate=5;
							break;
						case 3: objAlert = new newAlert("You have found the chest upgrade! You receive less damage.",gamestate); gamestate=5;
							break;														
					}
					armaturaAcquired[this.indice]=true;
				}				
			} 	        
        }//fine di physics              
      }

      function newPickUp_Subtank(indicePassato) {//le spine per terra
        this.life= 9999999999;
        this.type= "pickup";
        this.indice=indicePassato;
        this.damage= 0;
        this.x= 0;
        this.y= 0;
        this.width= 20;
        this.height= 20;
        this.canSelfDraw=true;
        this.hasPhysics=true;
        this.selfDraw= function(xdisegnata, ydisegnata, indiceDiQuestaEntity){//funzione per disegnare l'entita
        	ctx.fillStyle=player.defaultColor1;
			ctx.fillRect(xdisegnata, ydisegnata, this.width, this.height);
			ctx.textAlign = "center";
			ctx.font = "small-caps bold 18px Lucida Console";
			var textHeight=ctx.measureText("O").width; //dato che la O normalmente e' alta quanto larga (font monospace) imposto la larghezza di O come altezza approssimativa del testo			
			disegnaTestoConBordino("S",xdisegnata+(this.width/2), (ydisegnata+(this.height-2)/2+textHeight/2),player.charge0color,player.defaultColor1);
			ctx.textAlign = "left";//lo azzero se no mi si bugga in alcuni menu
        }//fine di selfDraw
        this.physics= function( xdisegnata, ydisegnata, indiceDiQuestaEntity){
			if(subtank[this.indice].acquired){//se il player l'ha gia' trovata disattiva l'entita'
				this.life=-1;
			}else{//da qui inizia this.physics vero e proprio
				if(collisionBetween(this, player)) {//quando il player lo raccoglie
					this.life=-1;
					objAlert = new newAlert("You have found a Subtank! Store the energy you don't need to use it later.",gamestate); gamestate=5;
					subtank[this.indice].acquired=true;
				}				
			} 	        
        }//fine di physics              
      }

      function newPickUp_Cuore(indicePassatoNonParsato) {//le spine per terra
        this.life= 9999999999;
        this.type= "pickup";
        this.indice=parsaApici(indicePassatoNonParsato);
        this.damage= 0;
        this.x= 0;
        this.y= 0;
        this.width= 20;
        this.height= 20;
        this.canSelfDraw=true;
        this.hasPhysics=true;
        this.selfDraw= function(xdisegnata, ydisegnata, indiceDiQuestaEntity){//funzione per disegnare l'entita
        	ctx.beginPath();
		    ctx.lineWidth = "2";
		    ctx.fillStyle = "#ff2f97"; //rosa
		    ctx.strokeStyle = "#999999"; //grigio
		    ctx.moveTo(xdisegnata, ydisegnata);
		    ctx.lineTo(xdisegnata+(this.width/2)-(this.width/10), ydisegnata);
		    ctx.lineTo(xdisegnata+(this.width/2), ydisegnata+(this.height/5));
		    ctx.lineTo(xdisegnata+(this.width/2)+(this.width/10), ydisegnata);
		    ctx.lineTo(xdisegnata+(this.width), ydisegnata);
		    ctx.lineTo(xdisegnata+(this.width), ydisegnata+(this.height/2));
		    ctx.lineTo(xdisegnata+(this.width/2), ydisegnata+this.height);
		    ctx.lineTo(xdisegnata, ydisegnata+(this.height/2));
		    ctx.lineTo(xdisegnata, ydisegnata);
		    ctx.fill();
		    ctx.stroke();
        }//fine di selfDraw
        this.physics= function( xdisegnata, ydisegnata, indiceDiQuestaEntity){
			if(heartAcquired[this.indice]){//se il player l'ha gia' trovata disattiva l'entita'
				this.life=-1;
			}else{//da qui inizia this.physics vero e proprio
				if(collisionBetween(this, player)) {//quando il player lo raccoglie
					this.life=-1;
					objAlert = new newAlert("You have found a Heart! Max life augmented.",gamestate); gamestate=5;
					heartAcquired[this.indice]=true;
					player.lifeMax+=2;
					player.life+=2;
				}				
			} 	        
        }//fine di physics
        function parsaApici(stringaDiApici){//parsa ⁰ ¹ ² ³ ⁴ ⁵ ⁶ ⁷ ⁸ ⁹ in numeri
			switch(stringaDiApici){
				case "⁰": return 0;break;
				case "¹": return 1;break;
				case "²": return 2;break;
				case "³": return 3;break;
				case "⁴": return 4;break;
				case "⁵": return 5;break;
				case "⁶": return 6;break;
				case "⁷": return 7;break;
				case "⁸": return 8;break;
				case "⁹": return 9;break;
			}        	
        }
      }              

      function newPickUp_LifeEnergy(vitaRecuperata) {
        this.life= 9999999999;
        this.type= "pickup";
        this.damage= -vitaRecuperata;
        this.x= 0;
        this.y= 0;
        this.yv = 0;
        this.width= 20;
        this.height= 20;
        this.isInWater = false;
        this.canSelfDraw=true;
        this.hasPhysics=true;
        this.selfDraw= function( xdisegnata, ydisegnata, indiceDiQuestaEntity){//funzione per disegnare l'entita
        	ctx.fillStyle = "#868686";
			ctx.fillRect(xdisegnata-3, ydisegnata+3, this.width+6, this.height-6);        
        	ctx.fillStyle = "#d70000";
        	ctx.fillRect(xdisegnata, ydisegnata, this.width, this.height);
        	ctx.fillStyle = "#ffe100";
			ctx.fillRect(xdisegnata+2, ydisegnata+2, this.width-4, this.height-4);			
        }//fine di selfDraw
        this.physics= function( xdisegnata, ydisegnata, indiceDiQuestaEntity){
	      var gravityApplicata = 0; var frizioneApplicata = 0;
	        if (this.y > level.waterLevel){  //determina se sei in acqua o no
	            if (!this.isInWater){
	                this.isInWater = true;
	                this.yv = 0;
	            }
	            gravityApplicata = level.gravityWater;
	            frizioneApplicata = level.frictionWater;
	        }else{
	            this.isInWater = false;
	            gravityApplicata = level.gravity;
	            frizioneApplicata = level.friction;            
	        }      
	        this.yv += gravityApplicata;//get level gravity
	        if(this.yv>(this.height)){//limita la gravita' massima raggiungibile
	        	this.yv=this.height;
	        }
	        this.y += this.yv;//apply gravity

	        for(var i = 0; i < level.length; i++) {//y collision with level
	          if(collisionBetween(this, level[i])) {
	            this.y=level[i].y-this.height;
	          }	
	        }
			for(var i = 0; i < entity.length; i++) {//y collision with entities that are solid (ostacolo e piattaforma)
				if(entity[i].type=="ostacolo" || entity[i].type=="piattaforma"){
		          if(collisionBetween(this, entity[i])) {
		            this.y=entity[i].y-this.height;
		          }
		        }
	        }	        		        
	        
			if(collisionBetween(this, player)) {//quando il player lo raccoglie
				this.life=-1;
			}
        }//fine di physics              
      }

      function newPickUp_WeaponEnergy(usageRecuparato) {
        this.life= 9999999999;
        this.type= "pickup";
        this.damage= 0;
        this.usageRestore=usageRecuparato;
        this.x= 0;
        this.y= 0;
        this.yv = 0;
        this.width= 20;
        this.height= 20;
        this.isInWater = false;
        this.canSelfDraw=true;
        this.hasPhysics=true;
        this.selfDraw= function( xdisegnata, ydisegnata, indiceDiQuestaEntity){//funzione per disegnare l'entita
        	ctx.fillStyle = "#003ef0";
        	ctx.fillRect(xdisegnata, ydisegnata, this.width, this.height);
        	ctx.fillStyle = "#3AB7D4";
			ctx.fillRect(xdisegnata+2, ydisegnata+2, this.width-4, this.height-4);
        	ctx.fillStyle = "#ff7c00";
        	ctx.fillRect(xdisegnata, ydisegnata-1.5+this.height/2, this.width, 3);			
        }//fine di selfDraw
        this.physics= function( xdisegnata, ydisegnata, indiceDiQuestaEntity){
	      var gravityApplicata = 0; var frizioneApplicata = 0;
	        if (this.y > level.waterLevel){  //determina se sei in acqua o no
	            if (!this.isInWater){
	                this.isInWater = true;
	                this.yv = 0;
	            }
	            gravityApplicata = level.gravityWater;
	            frizioneApplicata = level.frictionWater;
	        }else{
	            this.isInWater = false;
	            gravityApplicata = level.gravity;
	            frizioneApplicata = level.friction;            
	        }      
	        this.yv += gravityApplicata;//get level gravity
	        if(this.yv>(this.height)){//limita la gravita' massima raggiungibile
	        	this.yv=this.height;
	        }
	        this.y += this.yv;//apply gravity

	        for(var i = 0; i < level.length; i++) {//y collision with level
	          if(collisionBetween(this, level[i])) {
	            this.y=level[i].y-this.height;
	          }	
	        }
			for(var i = 0; i < entity.length; i++) {//y collision with entities that are solid (ostacolo e piattaforma)
				if(entity[i].type=="ostacolo" || entity[i].type=="piattaforma"){
		          if(collisionBetween(this, entity[i])) {
		            this.y=entity[i].y-this.height;
		          }
		        }
	        }	        		        
	        
			if(collisionBetween(this, player)) {//quando il player lo raccoglie
				this.life=-1;
				if(levelDefeated!="false,false,false,false,false,false,false,false"){
					for(;this.usageRestore>0;){
						if(player.activePower!=0){
							if(player.power[player.activePower-1].usage<player.power[player.activePower-1].usageMax){
								this.usageRestore--;
								player.power[player.activePower-1].usage++;	
							}else{
								for(i=0;i<9;i++){
									if(i!=8){
										if(levelDefeated[i]){
											if(player.power[i].usage<player.power[i].usageMax){
												this.usageRestore--;
												player.power[i].usage++;
												break;	
											}									
										}
									}else{this.usageRestore=-1;}
								}
							}
						}else{
							for(i=0;i<9;i++){
								if(i!=8){
									if(levelDefeated[i]){
										if(player.power[i].usage<player.power[i].usageMax){
											this.usageRestore--;
											player.power[i].usage++;
											break;	
										}
									}
								}else{this.usageRestore=-1;}					
							}						
						}
					}
				}
			}
        }//fine di physics              
      }                         
      			
  //start the engine
  window.onload = start;
            
  //this function is called at the start
	function start() {
    var player = new Player(); //creo il player
    update();
	}
	
  function nuovoLivello(){	//azzera i dati del player e carica un nuovo livello (da stringa e non da file...)
		player = new Player();
		leggiLivelloDaFile();
    	player.x = level.xStartingPos;
    	player.y = level.yStartingPos;
	}
                                
  function update() {//this function is called every frame
    requestAnimationFrame(update); //credo che sia la roba che crea il ciclo del gioco
    if (gamestate==1){
      stageSelect();
    }else if (gamestate==2){
      objMenuDiPausa.drawMenuDiPausa();
    }else if(gamestate==3){
      objMenuOpzioni.drawMenuOpzioni();
    }else if(gamestate==0){
      objMenuPrincipale.drawMenuPrincipale(true);
    }else if (gamestate==4){
      objMenuOpzioniStageSelect.drawMenu(); 
    }else if (gamestate==6){
      objMenuCaricaPartita.drawMenu();
    }else if (gamestate==5){
      objAlert.drawMenu();
    }else{
      disegnaSchermoDiGioco(true); //ATTENZIONE: se le viene passato true oltre a disegnare le entita' calcola anche le lore physics
      playerPhysics(player, level); //chiama la funzione physics del player
    }
  }
      
      function disegnaSchermoDiGioco(doEntityPhysics){
          ctx.clearRect(0, 0, canvas.width, canvas.height);	//pulisci tutto il canvas
          drawBackgroundImage();
          drawLvl(level.background);//disegna i blocchi non materiali che colorano lo sfondo (passa false come isDrawingWater - non disegna l'acqua)
          drawLvl(level);//disegna i blocchi fisici del livello (passa false come isDrawingWater - non disegna l'acqua)
          drawHUD(); //if you move drawHUD() under playerPhysics() the HUD will always be drawn on top of everything, but i like it this way. Entities and the player are more important then the hud lol
          drawEntity(doEntityPhysics); //in questa funzione viene chiamata anche il metodo entity[i].physics per le entità che vengono disegnate su schermo (le uniche che carico)
          drawPlayer(); //disegna il player
          drawLvl(level.foreground);//disegna i blocchi non materiali che stanno sopra tutto il resto (effetto grafico) e il waterlevel (passa true a isDrawingWater)
          drawWater();
      }

      function xDisegnata(){
        if (player.x+(player.width/2) < canvasWidth/2) {	//se la x del player è minore di mezzo canvas la tiene com'è
          xdisegnata=player.x;
        }else{
          if (player.x+(player.width/2) > level.maxWidth-canvasWidth/2){ //altrimenti controlla: se è in mezzo al livello disegna il player al centro del canvas, altrimenti lo lascia scorrere dal centro verso la fine
              xdisegnata=canvasWidth-level.maxWidth+player.x;
          }else{
              xdisegnata=canvasWidth/2-(player.width/2);	
          }
        }
        return xdisegnata;	
	  }
	  function yDisegnata(){
       if (player.y < canvasHeight/2) {	//se la y del player è minore di mezzo canvas la tiene com'è
           ydisegnata=player.y;
        }else{
            if (player.y > level.maxHeight-canvasHeight/2){ //altrimenti controlla: se è in mezzo al livello disegna il player al centro del canvas, altrimenti lo lascia scorrere dal centro verso la fine
              ydisegnata=canvasHeight-level.maxHeight+player.y;
            }else{
              ydisegnata=canvasHeight/2;	
            }
        }
        return ydisegnata;
	  }
            
      function drawPlayer() {
        var xdisegnata=xDisegnata(); //mi serve per semplificare le scritture dopo, praticamente gestisce la visuale sull asse x
        var ydisegnata=yDisegnata(); //mi serve per semplificare le scritture dopo, praticamente gestisce la visuale sull'asse y  
        //ombre del dash
        if (player.speed>player.defaultspeed){
            if (player.xv < -10){
                player.disegnaPlayer(xdisegnata-50, ydisegnata+3, player.width-3, player.height-6,false,player.color1+'AA',player.color2,player.coloreArmatura);
                player.disegnaPlayer(xdisegnata-26, ydisegnata+1, player.width-1, player.height-2,false,player.color1,player.color2,player.coloreArmatura);
            }else if (player.xv > 10){
               player.disegnaPlayer(xdisegnata+50+3, ydisegnata+3, player.width-3, player.height-6,false,player.color1+'AA',player.color2,player.coloreArmatura);
               player.disegnaPlayer(xdisegnata+26+1, ydisegnata+1, player.width-1, player.height-2,false,player.color1,player.color2,player.coloreArmatura);
            }
        }
		//ora disegna effettivamente il player
        //ctx.fillStyle = player.color1+"80"; ctx.fillRect(xdisegnata, ydisegnata, player.width, player.height); //hitbox */
        player.disegnaPlayer(xdisegnata,ydisegnata,player.width,player.height,true,player.color1,player.color2,player.coloreArmatura);        
      }

	function drawBackgroundImage(){//disegna immagine di sfondo
        if(level.backGroundImg != "" && level.backGroundImg != null ){//se esiste disegna lo sfondo
        	ctx.drawImage(level.backGroundImg, 0, 0, canvasWidth,canvasHeight);
        }
	}
  
  function drawWater(){  //disegna l'acqua
      ctx.fillStyle = player.defaultColor1 + "50";
      var ydisegnata=0
      if (player.y < canvasHeight/2){
        ydisegnata=level.waterLevel;
      }else{
        if (player.y > level.maxHeight-canvasHeight/2){
        ydisegnata=level.waterLevel-level.maxHeight+canvasHeight;
        }else{
          ydisegnata=level.waterLevel-player.y+canvasHeight/2;
        }
      }
      ctx.fillRect(0, ydisegnata, canvasWidth, canvasHeight);        
  }
	          
      //this function draws the level (usata anche per level.foreground e level.background - basta che sia un arrey di oggetti blocco)
      function drawLvl(lvl) {
        for (var i = 0; i < lvl.length; i++) {
          ctx.fillStyle = lvl[i].color;
          //variabili per disegnare il livello rispetto alla posizione di x (rispetto ai bordi del canvas) - visuale
          var xdisegnata=0
          if (player.x+(player.width/2) < canvasWidth/2){
            xdisegnata=lvl[i].x;
          }else{
            if (player.x+(player.width/2) > level.maxWidth-canvasWidth/2){
              xdisegnata=lvl[i].x-level.maxWidth+canvasWidth;
            }else{
              xdisegnata=lvl[i].x-player.x-(player.width/2)+canvasWidth/2;
            }
          }
		  var ydisegnata=0
          if (player.y < canvasHeight/2){
            ydisegnata=lvl[i].y;
          }else{
            if (player.y > level.maxHeight-canvasHeight/2){
              ydisegnata=lvl[i].y-level.maxHeight+canvasHeight;
            }else{
              ydisegnata=lvl[i].y-player.y+canvasHeight/2;
            }
          }
          //ora disegno il livello[i]                    
          ctx.fillRect(xdisegnata, ydisegnata, lvl[i].width, lvl[i].height);
        }
      }

      function drawHUD(){
        if(debugMode){
          ctx.font = "small-caps bold 12px Lucida Console";
          altezzaTesto=ctx.measureText("O").width+3;
			    ctx.textAlign = "right";
			    disegnaTestoConBordino("DEBUGMODE Level:"+lvlNumber, canvasWidth-3, canvasHeight-3,"#d2d2d2","#000000");
          ctx.textAlign = "left";
          disegnaTestoConBordino("player.activePower:"+player.activePower, 10, 49,"#d2d2d2","#000000");
          disegnaTestoConBordino("player.life:"+player.life+" max:"+player.lifeMax, 10, 50+altezzaTesto,"#d2d2d2","#000000");
          if(player.activePower>0){disegnaTestoConBordino("power.usage:"+player.power[player.activePower-1].usage+" max:"+player.power[player.activePower-1].usageMax, 10, 50+altezzaTesto*2,"#d2d2d2","#000000");}
          disegnaTestoConBordino("last key pressed:"+ultimoTastoLetto, 3, canvasHeight-3-altezzaTesto,"#d2d2d2","#000000");
          disegnaTestoConBordino("player.activeShot:"+player.activeShot, 3, canvasHeight-3-altezzaTesto*2,"#d2d2d2","#000000");          
          disegnaTestoConBordino("player.x:"+Math.round(player.x)+" player.y:"+Math.round(player.y), 3, canvasHeight-3,"#d2d2d2","#000000");
        }//fine debugMode       
      	var barLenght=16*6+40;
      	var barHeight=30;
		    if(player.activePower!=0){//barra potere - la disegno prima cosi' va sotto
	      	ctx.fillStyle = player.color1;
    			ctx.fillRect(8, 8+barHeight-5, barLenght-4-1, 16-1);
    			ctx.fillStyle = '#3d3b3b';
    			ctx.fillRect(10, 10+barHeight-5, barLenght-4, 16);
    			lineWidth=((barLenght-10)/player.power[player.activePower-1].usageMax)-1;
    			for (i=0; i < player.power[player.activePower-1].usageMax; i++){ //disegno le barre della vita
    				if (i < player.power[player.activePower-1].usage){
    					ctx.fillStyle = player.power[player.activePower-1].color1;
    				}else{
    					ctx.fillStyle = '#909090';
    				}
    				ctx.fillRect(13+(i*(lineWidth+1)), 15+barHeight-5, lineWidth, 8);
    			}
    		}      	
      	ctx.fillStyle = player.color1;
    		ctx.fillRect(8, 8, barLenght-1, barHeight-1);
    		ctx.fillStyle = '#3d3b3b';
    		ctx.fillRect(10, 10, barLenght, barHeight);		
    		ctx.beginPath();//ora inizio a disegnare la x che sara' del colore del player attivo
    		ctx.lineWidth = "7";
    		ctx.strokeStyle = player.color2;
    		ctx.moveTo(15, 15);
    		ctx.lineTo(35, 35);
    		ctx.moveTo(35, 15);
    		ctx.lineTo(15, 35);
    		ctx.stroke(); // Disegna il contorno della X
    		ctx.lineWidth = "5";
    		ctx.strokeStyle = player.color1;
    		ctx.stroke(); // Disegna la parte interna della X
    		if(player.lifeMax>16){
    			if(player.life>16){
    				for (i=16; i < player.lifeMax; i++){ //disegno le barre della vita
    					if (i < player.life){
    						ctx.fillStyle = player.charge2color;
    					}else{
    						ctx.fillStyle = '#909090';
    					}
    					ctx.fillRect((i-16)*6+43, 14, 5, 21);	
    				}
    				for (i=0; i<16; i++){ //disegno le barre della vita
    					if(i+16>player.lifeMax-1){
    						ctx.fillStyle = player.charge0color;
    						ctx.fillRect(i*6+43, 17, 5, 18);							
    					}else{				
    						if(i+16>player.life-1){
    							ctx.fillStyle = player.charge0color;
    							ctx.fillRect(i*6+43, 17, 5, 18);
    						}
    						
    					}
    				}
    			}else{
    				for (i=16; i < player.lifeMax; i++){
    					ctx.fillStyle = '#707070';
    					ctx.fillRect((i-16)*6+43, 14, 5, 21);	
    				}
    				for (i=0; i < 16; i++){ //disegno le barre della vita
    					if (i < player.life){
    						ctx.fillStyle = player.charge0color;
    					}else{
    						ctx.fillStyle = '#909090';
    					}
    					//ctx.fillRect(i*6+43, 15, 5, 20);
    					ctx.fillRect(i*6+43, 17, 5, 18);
    				}				
    			}					
    		}else{
    			for (i=0; i < player.lifeMax; i++){ //disegno le barre della vita
    				if (i < player.life){
    					ctx.fillStyle = player.charge0color;
    				}else{
    					ctx.fillStyle = '#808080';
    				}
    				ctx.fillRect(i*6+43, 15, 5, 20);
    			}
    		}       		
	  }//fine drawHUD    
      
      function drawEntity(doEntityPhysics){   //disegna le entità a schermo e chiama la entity[i].physics
        for (var i = 0; i < entity.length; i++) {
          if (entity[i].life > 0){ //calcola la entita solo se la sua vita è maggiore di zero
            //variabili per disegnare il livello rispetto alla posizione di x (rispetto ai bordi del canvas) - visuale
            var xdisegnata=0;
            if (player.x+(player.width/2) < canvasWidth/2){
              xdisegnata=entity[i].x;
            }else{
              if (player.x+(player.width/2) > level.maxWidth-canvasWidth/2){
                xdisegnata=entity[i].x-level.maxWidth+canvasWidth;
              }else{
                xdisegnata=entity[i].x-player.x-(player.width/2)+canvasWidth/2;
              }
            }
			var ydisegnata=0;
            if (player.y < canvasHeight/2){
              ydisegnata=entity[i].y;
            }else{
              if (player.y > level.maxHeight-canvasHeight/2){
                ydisegnata=entity[i].y-level.maxHeight+canvasHeight;
              }else{
                ydisegnata=entity[i].y-player.y+canvasHeight/2;
              }
            }
            //ora disegno l'entita e chiamo physics se e' dentro il canvas disegnato+unQuartoDiCanvas (questa roba non si applica se è uno sparo del player - se no si bugga tutto)                    
            if ( (xdisegnata > (-canvasWidth/8) && xdisegnata < (canvasWidth+(canvasWidth/8))) && (ydisegnata > (-canvasHeight/8) && ydisegnata < (canvasHeight+(canvasHeight/8))) || entity[i].type=="sparoDelPlayer") { //questo if fa i controlli spiegati sopra 
              if(entity[i].canSelfDraw==true){
                  entity[i].selfDraw(xdisegnata,ydisegnata, i);
              }else{
              	  ctx.fillStyle = entity[i].color;
                  ctx.fillRect(xdisegnata, ydisegnata, entity[i].width, entity[i].height);
              }
              if(doEntityPhysics && entity[i].hasPhysics){entity[i].physics(xdisegnata,ydisegnata, i);}
            }
          }
        }
      }
            
      
      function playerPhysics(p1, lvl) {//this function handles the platformer physics - in realta' solo del player
      var gravityApplicata = 0; var frizioneApplicata = 0;
        if (p1.y > level.waterLevel){  //determina se sei in acqua o no
            if (!p1.isInWater){
                p1.isInWater = true;
                p1.yv = 0;
            }
            gravityApplicata = level.gravityWater;
            frizioneApplicata = level.frictionWater;
        }else{
            p1.isInWater = false;
            gravityApplicata = level.gravity;
            frizioneApplicata = level.friction;            
        }
                
        p1.yv += gravityApplicata;//get level gravity
        p1.y += p1.yv;//apply gravity
                        
        for(var i = 0; i < lvl.length; i++) {//y collision
          if(collisionBetween(p1, lvl[i])) {
            p1.y += -p1.yv;            
            if(keys[dashkey] && player.canMove && armaturaAcquired[1]) {//dash
              p1.speed=p1.defaultspeed*2.25;
            }else{
              p1.speed=player.defaultspeed;
            }            
            if(keys[jumpkey] && player.canMove) {//jump
              if(!p1.giasaltato) {
                p1.yv = -p1.jumpheight;
                p1.giasaltato = true;
              } else {
                p1.yv = 0; 
              }
            } else {
              p1.yv = 0;
              p1.giasaltato = false;
            }
          }	
        }        
                       
        if(keys[destrakey] && player.canMove) {//x movement
          p1.xv -= p1.speed;
          player.facingRight = true;
        }
        if(keys[sinistrakey] && player.canMove) {
          p1.xv += p1.speed;
          player.facingRight = false;
        }
        p1.xv *= frizioneApplicata;
        p1.x += -p1.xv;
        
        if(keys[lkey] && !tastoGiaSchiacciato && player.canMove) {//previous available power
            tastoGiaSchiacciato=true;
            for(i=player.activePower-1; ;i--){
                if(i==-1){ 
                  i=8;
                }else if(i==0){
                  player.activePower=0;                 
                  break;                
                }
                if(levelDefeated[i-1]){
                  player.activePower=i;
                  break;
                }
            }
            calcolaPlayerColor();
        }
                
        if(keys[rkey] && !tastoGiaSchiacciato && player.canMove) {//next available power
            tastoGiaSchiacciato=true;
            for(i=player.activePower+1; ; i++){
                if(i==9){ 
                  player.activePower=0;
                  break;
                }else if(levelDefeated[i-1]){
                  player.activePower=i;
                  break;
                }
            }
            calcolaPlayerColor();
        }
                
         if(keys[sparokey] && player.canMove) {//shooting
           if(!player.giasparato){
           	 if(player.activeShot<3){//se non ci sono piu di 3 colpi attivi contemporaneamente        
	             player.giasparato = true;
	             if(player.activePower==0){
	                 var sparo = new newSparo(20,10); entity.push(sparo); 
	                 player.activeShot++;
	             }else{
	               if(player.power[player.activePower-1].usage>0){
	                 switch(player.activePower){ 
	                   /*HomingTorpedo*/   case 1: var sparo = new newHomingMissle(12,12,player.power[0].color1,player.power[0].color2,1.5); entity.push(sparo); player.activeShot=player.activeShot+1.5; player.power[player.activePower-1].usage-=0.5; break;
	                   /*ChameleonSting*/  case 2: var sparo = new newChameleonSting(15,15); entity.push(sparo); player.activeShot=player.activeShot+3; player.power[player.activePower-1].usage-=0.5; break;
	                   /*RollingShield*/   case 3: var sparo = new newRollingShield(40,40); entity.push(sparo); player.activeShot=player.activeShot+3; player.power[player.activePower-1].usage-=1; break;
	                   /*Fire*/            case 4: var sparo = new newFireWave(70,10); entity.push(sparo); player.activeShot=player.activeShot+3; player.power[player.activePower-1].usage-=1; break;
	                   /*Storm*/           case 5: var sparo = new newStormTornado(player.x,(player.y+3+(15/2)),15,15,0,player.facingRight,true); entity.push(sparo); player.activeShot=player.activeShot+3; player.power[player.activePower-1].usage-=1; break;
	                   /*Electric*/        case 6: var sparo = new newElectricSpark(15,15); entity.push(sparo); player.activeShot=player.activeShot+1; player.power[player.activePower-1].usage-=1; break;
	                   /*Boomerang*/       case 7: var sparo = new newBoomerangCutter(15,15,true); entity.push(sparo); player.activeShot=player.activeShot+1; player.power[player.activePower-1].usage-=1; break;
	                   /*ShotgunIce*/      case 8: var sparo = new newShotgunIce(player.x+player.width+6,player.x-6-15,player.y+6,15,15,true,2.5,0,player.facingRight); entity.push(sparo); player.activeShot=player.activeShot+3; player.power[player.activePower-1].usage-=1; break;
	                 }
	               }
	             }
	       	 }
           }else{
             if(player.activePower==0 || armaturaAcquired[2]){
               player.carica++;//disegna i pallini del colore della carica intorno al player
               if (player.carica > 80){ //level 2 charge and 3
                 if (player.carica > 150 && armaturaAcquired[2]){//charge 3 - richiede armaturaAcquired[2]
   	              var xdisegnata=xDisegnata(); var ydisegnata=yDisegnata();
   	              var xrandom=((-player.width/4)+Math.floor(Math.random() * (player.width/2)))*3; var yrandom=((-player.height/4)+Math.floor(Math.random() * (player.height/2)))*2;
   	              ctx.fillStyle = player.charge3color;
   	              ctx.fillRect(xdisegnata+(player.width/2)+xrandom, ydisegnata+(player.height/2)+yrandom, 8, 8);              	
                 }else{//charge 2
   	              var xdisegnata=xDisegnata(); var ydisegnata=yDisegnata();
   	              var xrandom=((-player.width/4)+Math.floor(Math.random() * (player.width/2)))*3; var yrandom=((-player.height/4)+Math.floor(Math.random() * (player.height/2)))*2;
   	              ctx.fillStyle = player.charge0color;
   	              ctx.fillRect(xdisegnata+(player.width/2)+xrandom, ydisegnata+(player.height/2)+yrandom, 8, 8);
                 }
               }else if(player.carica > 25){ //level 1 charge
                 var xdisegnata=xDisegnata(); var ydisegnata=yDisegnata();
                 var xrandom=((-player.width/4)+Math.floor(Math.random() * (player.width/2)))*3; var yrandom=((-player.height/4)+Math.floor(Math.random() * (player.height/2)))*2;
                 ctx.fillStyle = player.charge1color;
                 ctx.fillRect(xdisegnata+(player.width/2)+xrandom, ydisegnata+(player.height/2)+yrandom, 8, 8);
               }   
             }
           }
         }else{
           if (player.giasparato){
 	          if (player.canMove){
 	          	if(player.activeShot<3){//se non ci sono piu di 3 colpi attivi contemporaneamente        
	               if(player.activePower==0){//default power
	     	            if (player.carica > 80){
	                     player.activeShot++;
	     	            	if (player.carica > 150 && armaturaAcquired[2]){//charge 3 shoot
  	     	            		var latoCubottiSparo=15;
    	     				        if(player.facingRight){
    	     				        	var sparo = new newSparoCharge3((player.x+player.width+6),(player.y+3+(latoCubottiSparo/2)),latoCubottiSparo,latoCubottiSparo,0,player.facingRight,true);
    	     				        	var sparoInvisibile = new newSparo(1,55); //gestisce activeShot per lo sparoCharge3
    	     				        	sparoInvisibile.x=(player.x+player.width+6);
    	     				        }else{
    	     				        	var sparo = new newSparoCharge3((player.x-6-latoCubottiSparo),(player.y+3+(latoCubottiSparo/2)),latoCubottiSparo,latoCubottiSparo,0,player.facingRight,true);
    	     				        	var sparoInvisibile = new newSparo(1,55);
    	     				        	sparoInvisibile.x=(player.x-6-latoCubottiSparo);				        	
    	     				        }
	     		                sparo.color= player.charge3color;
	     		                sparoInvisibile.color= "#00000000";//sono 8 zeri invece che 6, gli ultimi due indicano il canale alpha(trasparenza)
	     		                sparoInvisibile.speed=sparo.speed;
    	     			        	sparoInvisibile.y=sparo.startingY-20;
    	     			        	sparoInvisibile.canPassWall=true;		                
	     		                entity.push(sparo);
	     		                entity.push(sparoInvisibile);
  	     	            		var latoCubottiSparo=15;
    	     				        if(player.facingRight){
    	     				        	var sparo = new newSparoCharge3((player.x+player.width+6),(player.y+3+(latoCubottiSparo/2)),latoCubottiSparo,latoCubottiSparo,0,player.facingRight,false);			        	
    	     				        }else{
    	     				        	var sparo = new newSparoCharge3((player.x-6-latoCubottiSparo),(player.y+3+(latoCubottiSparo/2)),latoCubottiSparo,latoCubottiSparo,0,player.facingRight,false);
    	     				        }
  	     		              sparo.color= player.charge3color;
	     		                entity.push(sparo);		                	                            		
	     	             }else{//charge 2 shoot
	     	            	  var sparo = new newSparo(50,25);
	     	                sparo.y= sparo.y-7;
	     	                sparo.color= player.charge2color;
	     	                sparo.perforation=true;
	     	                entity.push(sparo);
	     	             }
	     	            }else if (player.carica > 25){//charge 1 shoot
	                     player.activeShot++;
	     	            	var sparo = new newSparo(35,15);
	     	              sparo.y= sparo.y-2;
	     	            	sparo.color= player.charge1color;
	     	            	entity.push(sparo);
	     	            }
	     	            player.carica=0;
	     	            player.giasparato=false;
	               }else{
	                   if (player.carica > 150 && armaturaAcquired[2]){
	                       switch(player.activePower){//poteri caricati
	                         /*HomingTorpedo*/case 1: if(player.power[player.activePower-1].usage>2){var sparo = new newHomingMissle(18,18,"#3d85c6","#fa8cff",3); sparo.damage=2; entity.push(sparo); player.activeShot=player.activeShot+3;
                                   var sparo = new newHomingMissle(18,18,"#3d85c6","#fa8cff",0); sparo.y+=-15; sparo.damage=2; entity.push(sparo);
                                   var sparo = new newHomingMissle(18,18,"#3d85c6","#fa8cff",0); sparo.y+=15; sparo.damage=2; entity.push(sparo);
                                   var sparo = new newHomingMissle(18,18,"#3d85c6","#fa8cff",0); sparo.y+=-30; sparo.damage=2; entity.push(sparo);                                                                      
                                   player.power[player.activePower-1].usage-=3;} break;
	                         /*ChameleonSting*/case 2: if(player.power[player.activePower-1].usage>3){player.power[player.activePower-1].usage-=4;} break; 
	                         /*RollingShield*/case 3: if(player.power[player.activePower-1].usage>1){player.power[player.activePower-1].usage-=2;} break;
	                         /*FireWave*/case 4: if(player.power[player.activePower-1].usage>2){player.power[player.activePower-1].usage-=3;} break;
	                         /*StormTornado*/case 5: if(player.power[player.activePower-1].usage>1){player.power[player.activePower-1].usage-=2;} break;
	                         /*ElectricSpark*/case 6: if(player.power[player.activePower-1].usage>1){player.power[player.activePower-1].usage-=2;} break;
	                         /*BoomerangCut*/case 7: if(player.power[player.activePower-1].usage>1){player.power[player.activePower-1].usage-=2;} break;
	                         /*ShotgunIce*/case 8: if(player.power[player.activePower-1].usage>1){player.power[player.activePower-1].usage-=2;} break;                                                    
	                       }
	                   }
	     	            player.carica=0;
	     	            player.giasparato=false;                  
	               }
	         	}
 	         }else{player.carica=-9999999999999;}
           }
         }
               
       p1.slope = 0;	//serve per i bordi tipo - serve anche per le collision
       for(var i = 0; i < lvl.length; i++) {
         if(collisionBetween(p1, lvl[i])) {
           if(p1.slope != -8) {
             p1.y -= 1;
             p1.slope += 1;
           }
         }
       }

       	for(var i = 0; i < lvl.length; i++) {//x collision
          if(collisionBetween(p1, lvl[i])) {
            p1.y += p1.slope;
            p1.x -= -p1.xv;
            if(keys[dashkey] && player.canMove && armaturaAcquired[1]) {//wall dash
              p1.speed=p1.defaultspeed*2.25;
            }else{
              p1.speed=player.defaultspeed;
            }           
            if(keys[jumpkey] && player.canMove) {//wall jumping
              if(!p1.giasaltato) { 
                p1.yv = -p1.jumpheight + 1;
                if(p1.xv > 0) {
                  p1.xv = -9.9;
                } else {
                  p1.xv = 9.9;
                }
                p1.giasaltato = true;
              } else {
                p1.xv = 0;
              }
            } else {
              p1.xv = 0;
              p1.giasaltato = false;
            }   
          }
        }
      
		for(var i = 0; i < entity.length; i++) {//contatto con entita'
			if(entity[i].life > 0 && !(entity[i].type=="sparoDelPlayer")) {
	            if(collisionBetween(player, entity[i])) {
	            	if(entity[i].damage>0){
        				if (player.invulnerability < 1){//entity collison								            		
							player.color1=player.damagedColor;
				            player.color2=player.damagedColor;
				            player.coloreArmatura=player.damagedColor;
				            if(armaturaAcquired[3]&&(entity[i].damage>1)){
				              player.life=player.life-(entity[i].damage-1);
				            }else{
				              player.life=player.life-entity[i].damage;
				            }
						    player.invulnerability=40;
						    player.canMove=false;
						    break;
					    }
	            	}else{//qui stiamo parlando delle entita' con danno<1, praticamente i pickup (se hanno il danno in negativo restituiscono la vita a X)
	            		if((player.life-entity[i].damage) > player.lifeMax){
	            			var vitaRecuperabile=(0-entity[i].damage)-(player.lifeMax-player.life);
	            			player.life=player.lifeMax;
	            			for (j=0; j<4; j++){//qui inizia a riempire le subtank
	            				if(subtank[j].acquired){
	            					if((subtank[j].life+vitaRecuperabile)>subtank[j].lifeMax){
										vitaRecuperabile=vitaRecuperabile-(subtank[j].lifeMax-subtank[j].life);
	            						subtank[j].life=subtank[j].lifeMax;
	            						i++;
	            					}else{
	            						subtank[j].life=subtank[j].life+vitaRecuperabile;
	            						break;
	            					}
	            				}
	            			}
	            		}else{
	            			player.life=player.life-entity[i].damage;
	            		}
	            	}
	           	}
	       	}
	    }
       	if(player.invulnerability > 0){//se l'invulnerabilita' e' >=1 la riduce e colora x in base a che punto e'
       		player.invulnerability--;
       		if (player.invulnerability < 30){
            calcolaPlayerColor();
       			player.color1=player.color2;
            player.color2=player.color2;
            player.coloreArmatura=player.color2;
       		}
       		if (player.invulnerability < 20){
       			player.canMove=true;
       		}       		
       		if (player.invulnerability < 5){
              calcolaPlayerColor();
            	player.coloreArmatura=player.defaultColoreArmatura;                 			
       		}	
       	}
      	
      	if(player.life<1){//gameover
      		disegnaSchermoDiGioco(false);
      		objAlert = new newAlert("Gameover",1); gamestate=5;
      	}
        
        if(keys[startkey]) {//menu di pausa
          if (!tastoGiaSchiacciato && !(player.life<1)){//ho dovuto fare il check della vita se no era possibile far aprire il menu dopo essere morti se si schiacciava INVIO nello stesso frame in cui si moriva
            objMenuDiPausa=new newMenuDiPausa();
            disegnaSchermoDiGioco(false);
            tastoGiaSchiacciato=true;
            gamestate=2;
          }
        }
        
        if(player.canMove && tastoGiaSchiacciato && !(keys[startkey] || keys[lkey] || keys[rkey])){ //azzera tasto gia schiacciato
          tastoGiaSchiacciato=false;
        }
        
        function calcolaPlayerColor(){//calcola i colori attivi del player
          if (player.activePower==0){
                  player.color1=player.defaultColor1;
                  player.color2=player.defaultColor2;                               
          }else{
                  player.color1=player.power[player.activePower-1].color1;
                  player.color2=player.power[player.activePower-1].color2;  
          }
        } 
      } //fine della funzione playerPhysics - se riesco la faccio diventare un metodo di player invece che una funzione sestante
          
      function collisionBetween(p1, lvl) {//this function detects the collision between the two given objects - la uso anche con le entità lol
        if (lvl.x < p1.x + p1.width 
        && lvl.x + lvl.width > p1.x 
        && lvl.y < p1.y + p1.height 
        && lvl.y + lvl.height > p1.y) {
                return true;
        } else {
                return false;
        } 
      }     

      function stageSelect(){
          var img = document.getElementById("stageselect");
          ctx.drawImage(img, 0, 0, canvasWidth,canvasHeight);
            //leggo che tasto viene schiacciato. Con invio o dash si inizia a giocare, con le freccie si cicla tra i livelli
            if ((keys[dashkey]) && !tastoGiaSchiacciato){//avvia il livello selezionato
              gamestate=-1;
              nuovoLivello();
            }
            if ((keys[startkey]) && !tastoGiaSchiacciato){//apre le opzioni di scelta livello
              objMenuOpzioniStageSelect=new newMenuOpzioniStageSelect();
              tastoGiaSchiacciato=true;
              gamestate=4;
            }                                       
            if (keys[sukey] && !tastoGiaSchiacciato){
             if(lvlNumber==4){lvlNumber=8; }else if(lvlNumber==5){lvlNumber=3;}else if(lvlNumber==6){lvlNumber=1;}else if(lvlNumber==7){lvlNumber=4;}else if(lvlNumber==3){lvlNumber=1;}else if(lvlNumber==2){lvlNumber=8;}             
            }
            if (keys[giukey] && !tastoGiaSchiacciato){
             if(lvlNumber==1){lvlNumber=6;}else if(lvlNumber==5){lvlNumber=6;}else if(lvlNumber==3){lvlNumber=5;}else if(lvlNumber==8){lvlNumber=2;}else if(lvlNumber==7){lvlNumber=2;}else if(lvlNumber==4){lvlNumber=7;}                      
            }
            if (keys[sinistrakey] && !tastoGiaSchiacciato){
             if(lvlNumber==2){lvlNumber=6;}else if(lvlNumber==7){lvlNumber=5;}else if(lvlNumber==4){lvlNumber=3;}else if(lvlNumber==8){lvlNumber=1;}else if(lvlNumber==1){lvlNumber=3;}else if(lvlNumber==6){lvlNumber=5;}                 
            }
            if (keys[destrakey] && !tastoGiaSchiacciato){
             if(lvlNumber==1){lvlNumber=8;}else if(lvlNumber==2){lvlNumber=7;}else if(lvlNumber==5){lvlNumber=7;}else if(lvlNumber==6){lvlNumber=2;}else if(lvlNumber==3){lvlNumber=4;}else if(lvlNumber==8){lvlNumber=4;} 
            }            
            if(keys[destrakey] || keys[sinistrakey] || keys[giukey] || keys[sukey] || keys[startkey] || keys[dashkey]){ //serve per evitare che in un attimo ti sposti di un bordello di livelli 
                   tastoGiaSchiacciato=true;
            }else{ tastoGiaSchiacciato=false;}
            
            //ora disegno un quadrato intorno al livello selezionato
            if (levelDefeated[lvlNumber-1]){
                 ctx.fillStyle = "#b7a4a6";    //se il livello selezionato e' stato battuto fa il quadrato rosso
            }else{
                ctx.fillStyle = "#ffc000";    //se il livello selezionato non e' stato battuto fa il quadrato giallo
            }            
            switch (lvlNumber){
              case 1:ctx.fillRect(137, 10, 135, 10);ctx.fillRect(137, 10, 10, 135);ctx.fillRect(137, 135, 135, 10);ctx.fillRect(263, 10, 10, 135);break;                
              case 8:ctx.fillRect(265, 10, 135, 10);ctx.fillRect(265, 10, 10, 135);ctx.fillRect(265, 135, 135, 10);ctx.fillRect(391, 10, 10, 135);break;                
              case 4:ctx.fillRect(395, 140, 135, 10);ctx.fillRect(395, 140, 10, 135);ctx.fillRect(395, 265, 135, 10);ctx.fillRect(521, 140, 10, 135);break;                
              case 7:ctx.fillRect(395, 270, 135, 10);ctx.fillRect(395, 270, 10, 135);ctx.fillRect(395, 395, 135, 10);ctx.fillRect(521, 270, 10, 135);break;                
              case 2:ctx.fillRect(265, 396, 135, 10);ctx.fillRect(265, 396, 10, 135);ctx.fillRect(265, 521, 135, 10);ctx.fillRect(391, 396, 10, 135);break;                
              case 6:ctx.fillRect(137, 396, 135, 10);ctx.fillRect(137, 396, 10, 135);ctx.fillRect(137, 521, 135, 10);ctx.fillRect(263, 396, 10, 135);break;                
              case 5:ctx.fillRect(9, 270, 135, 10);ctx.fillRect(9, 270, 10, 135);ctx.fillRect(9, 395, 135, 10);ctx.fillRect(135, 270, 10, 135);break;                
              case 3:ctx.fillRect(9, 140, 135, 10);ctx.fillRect(9, 140, 10, 135);ctx.fillRect(9, 265, 135, 10);ctx.fillRect(135, 140, 10, 135);break;                                                                                                                
            }
      }

      function disegnaTestoConBordino(stringaDiTesto, xdisegnata, ydisegnata, coloreTesto, coloreBordino){
      	ctx.fillStyle = coloreBordino;
      	ctx.fillText(stringaDiTesto, xdisegnata+1, ydisegnata+1);
      	ctx.fillText(stringaDiTesto, xdisegnata+1, ydisegnata-1);
      	ctx.fillText(stringaDiTesto, xdisegnata-1, ydisegnata+1);
      	ctx.fillText(stringaDiTesto, xdisegnata-1, ydisegnata-1);
      	ctx.fillStyle = coloreTesto;
      	ctx.fillText(stringaDiTesto, xdisegnata, ydisegnata);
      }
      
      function newMenuDiPausa(){
        this.width=0;
        this.height=0;
        this.widthMax=canvasWidth-150;
        this.heightMax=canvasHeight-150;
        this.isOpen=false;
        this.isClosing=false;
        this.canInput=true;
        this.tornaStageSelection=false;
        this.indice=player.activePower;
        this.settore=0;
        this.usingSubtank=4; //4 vuol dire che non sto usando la subtank (da 0 a 3 e' l'indice della subtank usata)
        this.lastSubtankAcquired=4;//se rimane uguale a 4 vuol dire che non e' stata acquisita nessuna subtank
        this.drawMenuDiPausa = function (){
          ctx.textAlign = "left";
          ctx.font = "small-caps bold 20px Lucida Console"; //tipo di font per le scritte
          if (!this.isOpen && !this.isClosing){//animazione di apertura del menu + lettura subtank acquisite
            if (this.width < this.widthMax){this.width+=10;}
            if (this.height < this.heightMax){this.height+=15;}
            if (this.height > this.heightMax-1 && this.width > this.widthMax-1){//quando il menu e' tutto aperto:
            	this.isOpen=true;
            	for(var j=0; j<4; j++){//legge l'indice dell'ultima subtank acquisita
            		if(subtank[j].acquired){this.lastSubtankAcquired=j;}
            	}
            }
          }
          ctx.clearRect((canvasWidth/2)-this.width/2-15,(canvasHeight/2)-this.height/2-15, this.width+30, this.height+30);	//pulisci la parte dove viene mostrato il menu
          ctx.fillStyle = "#d2d2d2"; ctx.fillRect((canvasWidth/2)-this.width/2-15,(canvasHeight/2)-this.height/2-15, this.width+30, this.height+30); //disegna il bordo grigio 
          ctx.fillStyle = "#52b58b"; ctx.fillRect((canvasWidth/2)-this.width/2,(canvasHeight/2)-this.height/2, this.width, this.height); //disegna lo sfondo verde
          if (this.isOpen){ //qui dentro devo mostrare il testo del menu e gestire cosa succede quando schiaccio i tasti
              ctx.fillStyle = "#d2d2d2"; 
              ctx.fillRect((canvasWidth/2)+this.width/2-250,(canvasHeight/2)-this.height/2, 15, this.height); ctx.fillRect((canvasWidth/2)+this.width/2-250,(canvasHeight/2), 250, 15); //disegna i settori del menu
              for(i=0;i<9;i++){ //disegna le scritte del settore 0 (xbuster e poteri di X)
                var xdisegnata = (canvasWidth/2)-this.width/2+13;
                var ydisegnata = ((canvasHeight/2)-this.height/2)+(44*i)-7;
                if (i-1 < 0){ //scrive xbuster
                	disegnaTestoConBordino("X Buster", xdisegnata, ydisegnata+33,"#d2d2d2","#000000");
                }else{
                  if(levelDefeated[i-1]){//disegna i poteri e le loro barre
                  	disegnaTestoConBordino(player.power[i-1].nome, xdisegnata, ydisegnata+21,player.power[i-1].color1,"#000000");
                    for (j=0; j<player.power[i-1].usageMax; j++){
                      ctx.fillStyle = '#444444'; ctx.fillRect(j*10+xdisegnata+2, ydisegnata+25, 9, 12);
                      if(player.power[i-1].usage < j+1){ctx.fillStyle = '#a7a7a7'; }else{ctx.fillStyle = player.power[i-1].color1;}
                      ctx.fillRect(j*10+xdisegnata+3, ydisegnata+25, 8, 11);
                    }
                  }
                }
              }
              for(i=0;i<5;i++){//disegna le subtank
              	var xdisegnata=(canvasWidth/2)+this.width/2-250+15;
              	var ydisegnata=((canvasHeight/2)-this.height/2)+(40*i)-6;
                if (i < 1){ //scrive Subtanks
                	ctx.textAlign = "center";
                	disegnaTestoConBordino("Subtanks", xdisegnata+(250-15)/2, ydisegnata+30,"#d2d2d2","#000000");
                }else{ //disegna le barre delle subtanks
                	ctx.textAlign = "left";
                	if (subtank[i-1].acquired){
                		disegnaTestoConBordino("S", xdisegnata+15,ydisegnata+28,"#ffc000","#000000");
                    	for (j=0; j<subtank[i-1].lifeMax; j++){
                          ctx.fillStyle = '#444444'; ctx.fillRect(j*9+xdisegnata+39, ydisegnata+12, 8, 17);
                      		if(subtank[i-1].life < j+1){ctx.fillStyle = '#a7a7a7';}else{ctx.fillStyle = '#ffc000';}
                      		ctx.fillRect(j*9+xdisegnata+40, ydisegnata+12, 7, 16);
                      	}	
                    }                	
                }              	
              }
              for(i=0;i<3;i++){//ora disegno la parte sotto le subtanks
              	ctx.textAlign = "left";
              	var xdisegnata=(canvasWidth/2)+this.width/2-250+15+10;
              	var ydisegnata=((canvasHeight/2)+15+((canvasHeight-this.height+30)/3*(i+1)))-1;
  				switch (i){
  					case 0:
  						disegnaTestoConBordino("resume game", xdisegnata+5,ydisegnata+7-((canvasHeight-this.height+30)/3)/2,"#d2d2d2","#000000");
  						break;
  
  					case 1:
  						disegnaTestoConBordino("options", xdisegnata+5,ydisegnata+7-((canvasHeight-this.height+30)/3)/2,"#d2d2d2","#000000");
  						break;
  
  					case 2:
  						disegnaTestoConBordino("return to the", xdisegnata+5,ydisegnata-2-((canvasHeight-this.height+30)/3)/2,"#d2d2d2","#000000");
  						disegnaTestoConBordino("level selection", xdisegnata+5,ydisegnata+15-((canvasHeight-this.height+30)/3)/2,"#d2d2d2","#000000");
  						break;												
  				}
			  }
                            
              if(this.settore == 0){//disegna i quadrati intorno alla scritta scelta - parte poteri
                ctx.fillStyle = "#ffc000";
                var xdisegnata = (canvasWidth/2)-this.width/2+13;
                var ydisegnata = ((canvasHeight/2)-this.height/2)+(44*this.indice)-7;
                if (this.indice==0){
                	ctx.fillRect((canvasWidth/2)-this.width/2, ydisegnata+5, (canvasWidth/2)+this.width/2-325, 8);
                	ctx.fillRect((canvasWidth/2)-this.width/2, ydisegnata+40, (canvasWidth/2)+this.width/2-325, 8);
                	ctx.fillRect((canvasWidth/2)-this.width/2, ydisegnata+5, 8, 40);
                	ctx.fillRect((canvasWidth/2)+this.width/2-258, ydisegnata+5, 8, 40);
                }else{
                	ctx.fillRect((canvasWidth/2)-this.width/2, ydisegnata-5, (canvasWidth/2)+this.width/2-325, 8);
                	ctx.fillRect((canvasWidth/2)-this.width/2, ydisegnata+42, (canvasWidth/2)+this.width/2-325, 8);
                	ctx.fillRect((canvasWidth/2)-this.width/2, ydisegnata-5, 8, 51);
                	ctx.fillRect((canvasWidth/2)+this.width/2-258, ydisegnata-5, 8, 51);
                }
              }else if(this.settore == 1){//disegna i quadrati intorno alla scritta scelta - parte subtank e sotto subtank
              	if (this.indice < 4){//disegna quadrati del settore subtank
              		ctx.fillStyle = "#ffc000";
              		var xdisegnata=(canvasWidth/2)+this.width/2-250+15;
              		var ydisegnata=((canvasHeight/2)-this.height/2)+(40*(this.indice+1))-6;
                	ctx.fillRect(xdisegnata, ydisegnata, 235, 9);
                	ctx.fillRect(xdisegnata, ydisegnata+32, 235, 9);
                	ctx.fillRect(xdisegnata, ydisegnata, 9, 40);
                	ctx.fillRect(xdisegnata+235-9, ydisegnata, 9, 40);              	
                }else{//disegna quadrati della parte sotto le subtank
                	ctx.fillStyle = "#ffc000";
					var xdisegnata=(canvasWidth/2)+this.width/2-250+15;
              		var ydisegnata=((canvasHeight/2)+15+((canvasHeight-this.height+30)/3*(this.indice-4)))-1;
                	ctx.fillRect(xdisegnata, ydisegnata, 235, 9);
                	ctx.fillRect(xdisegnata, ydisegnata+((canvasHeight-this.height+30)/3-8), 235, 9);
                	ctx.fillRect(xdisegnata, ydisegnata, 9, ((canvasHeight-this.height+30)/3-8));
                	ctx.fillRect(xdisegnata+235-9, ydisegnata, 9, ((canvasHeight-this.height+30)/3-8));              		
                }
              }
              if(this.usingSubtank < 4){//se il menu e' impostato nell'usare una subtank:
              	if(subtank[this.usingSubtank].life > 0){
              		subtank[this.usingSubtank].life-=0.5;
              		if(player.life<player.lifeMax){
              			player.life+=0.5; drawHUD();
              		}
              	}else{//esce dallo stato di depleting della subtank
              		this.usingSubtank=4;
              		this.canInput=true;
              	}
              }              
             if(this.canInput){//cosa succede quando vengono schiacciati i tasti (solo se this e' in lettura di input - this.canInput)
              if((keys[startkey] || keys[dashkey]) && !tastoGiaSchiacciato) {//attiva la voce selezionata
              	if (this.settore==0){ // se e' nella sezione poteri, attiva il potere selezionato e chiude il menu
                  player.activePower=this.indice;
                  if (player.activePower==0){
                          player.color1=player.defaultColor1;
                          player.color2=player.defaultColor2;                               
                  }else{
                          player.color1=player.power[player.activePower-1].color1;
                          player.color2=player.power[player.activePower-1].color2;  
                  }                  
					        this.isClosing=true;
                	this.isOpen=false;
              	}else{ //se e' nell'altro settore fa delle cose in base all'indice
              		if(this.indice<4){//hai scelto una subtank
              			if(player.life<player.lifeMax){
              				this.usingSubtank=this.indice;
              				this.canInput=false;
              			}
              		}else{
              			switch (this.indice){
              				case 4://ritorna al gioco - chiude il menu
								        this.isClosing=true;
                				this.isOpen=false;              				
                				break;
                			case 5://opzioni
            					objMenuOpzioni=new newMenuOpzioni(this.width, this.height, true);
            					tastoGiaSchiacciato=true;
            					gamestate=3;                				
                				break;
                			case 6://torna alla selezione del livello
      								this.tornaStageSelection=true; lvlNumber=1;
      								this.isClosing=true;
      								this.isOpen=false;
                				break;
              			}
              		}
              	}
              }
              if(keys[jumpkey] && !tastoGiaSchiacciato) {//esci dal menu di pausa
                this.isClosing=true;
                this.isOpen=false;
              }              
              if(keys[giukey] && !tastoGiaSchiacciato) {
              	if (this.settore==0){//se sei nella parte a sinistra
                	for (i=1; i < 10; i++){
                  		if(levelDefeated[this.indice+i-1]){
                    		this.indice+=i;
                    		break;
                  		}else if(i == 9){ this.indice=0; break;}
                	}
                  if(this.indice==9){this.indice=0;}
                }else if (this.settore==1){//se sei nella parte a destra
                	if (this.indice<this.lastSubtankAcquired){//se sei nella parte delle subtank-1
                		for(var k=1; k<(4-this.indice); k++){
							if(subtank[this.indice+k].acquired){
								this.indice+=k;
								break;
							}
						}
                	}else if(this.indice==this.lastSubtankAcquired && this.lastSubtankAcquired!=4){//se hai selezionato l'ultima subtank disponibile e schiacci giu'
                		this.indice=4;
                	}else{//se sei nella parte sotto le subtank
                		if (this.indice<6){
                			this.indice++;
                		}
                	}
                }
              }
              if(keys[sukey] && !tastoGiaSchiacciato) {
              	if (this.settore==0){
                	if(this.indice == 0){ this.indice=9; }
                	for (i=1; i < this.indice+1; i++){
                  		if(levelDefeated[this.indice-i-1]){
                    		this.indice-=i;
                    		break;
                  		}else if(i == this.indice){ this.indice=0; break;}
                	}
                }else if (this.settore==1){//se sei nella parte a destra
                	if (this.indice<4){//se sei nella parte delle subtank
						if(this.indice>0){
							for(var k=1; k<this.indice+1;k++){
								if(subtank[this.indice-k].acquired){
									this.indice-=k;
									break;
								}
							}
						}
                	}else{
                		if (this.indice>4){//se sei nel menu tutto ok
                			this.indice--;
                		}else{//schiacci su e ti stai spostando nelle subtank - devo vedere che io ne possegga almeno una
							this.indice=this.lastSubtankAcquired;
                		}
                	}
                }                                
              }
              if(keys[destrakey] && !tastoGiaSchiacciato) {
				for (var j=0; j<4; j++){
					if(subtank[j].acquired){
						this.indice=j;
						break;
					}else{
						this.indice=4;
					}
				}
                this.settore=1;
              }
              if(keys[sinistrakey] && !tastoGiaSchiacciato) {
                this.indice=0;
                this.settore=0;
              }
              if(keys[startkey] || keys[sukey] || keys[giukey] || keys[sinistrakey] || keys[destrakey] || keys[dashkey] || keys[jumpkey]){
                tastoGiaSchiacciato=true;
              }else{
                tastoGiaSchiacciato=false;
              }
          }              
         }
          if(this.isClosing){//animazione di chiusura del menu + regolazione delle subtanks
              if (this.width > 0){this.width-=20;}
              if (this.height > 0){this.height-=20;}
              ctx.clearRect((canvasWidth/2)-this.width/2-15,(canvasHeight/2)-this.height/2-15, this.width+30, this.height+30);	//pulisci la parte dove viene mostrato il menu
              disegnaSchermoDiGioco(false);
              ctx.fillStyle = "#d2d2d2"; ctx.fillRect((canvasWidth/2)-this.width/2-15,(canvasHeight/2)-this.height/2-15, this.width+30, this.height+30); //disegna il bordo grigio 
              ctx.fillStyle = "#52b58b"; ctx.fillRect((canvasWidth/2)-this.width/2,(canvasHeight/2)-this.height/2, this.width, this.height); //disegna lo sfondo verde
              if (this.height-1 < 0 && this.width-1 < 0){//quando il menu e' tutto chiuso:
              	gamestate=-1;
              	if(this.tornaStageSelection){gamestate=1;}
              	var sommaSubtank=0;//aggiusto la vita delle subtank (la metto tutta nelle prime subtank disponibili)
        				for (var j=0; j<4; j++){//azzero tutte le subtank e carico tutta la vita per ridistribuirla nel prossimo for
        					if (subtank[j].acquired){
        						sommaSubtank+=subtank[j].life;
        						subtank[j].life=0;
        					}
        				}
                if(sommaSubtank>0){//ridistribuisco la vita alle subtank dalla prima all'ultima
          				for (var j=0; j<4; j++){
                    if(subtank[j].life<subtank[j].lifeMax && subtank[j].acquired){
  			              if (sommaSubtank>(subtank[j].lifeMax-subtank[j].life)){
                        sommaSubtank-=(subtank[j].lifeMax-subtank[j].life);
                        subtank[j].life=subtank[j].lifeMax;
                      }else{
                        subtank[j].life+=sommaSubtank;
                        sommaSubtank=0;
                      }
            				}
                  }
                }
             }             
          }
        }     
      }//fine menu di pausa       
	
  function newMenuOpzioniStageSelect(){
	      this.isOpen=false;
        this.isClosing=false;
        this.apriLivello=false;
        this.confermaUscita=false;
        this.width=0;
        this.height=0;
        this.widthMax=canvasWidth-440;
        this.heightMax=canvasHeight-400;
        this.indice=0;
        this.indiceUscita=0;
        this.numeroDiVoci=3;
        this.staCambiandoTasto=false;
        this.drawMenu = function (){
          if (!this.isOpen && !this.isClosing){//animazione di apertura del menu
            if (this.width < this.widthMax){this.width+=10;}
            if (this.height < this.heightMax){this.height+=15;}
            if (this.height > this.heightMax-1 && this.width > this.widthMax-1){//quando il menu e' tutto aperto:
            	this.isOpen=true;
            }
          }
          ctx.clearRect((canvasWidth/2)-this.width/2-15,(canvasHeight/2)-this.height/2-15, this.width+30, this.height+30);	//pulisci la parte dove viene mostrato il menu
		      ctx.fillStyle = "#d2d2d2"; ctx.fillRect((canvasWidth/2)-this.width/2-15,(canvasHeight/2)-this.height/2-15, this.width+30, this.height+30); //disegna il bordo grigio 
          ctx.fillStyle = "#52b58b"; ctx.fillRect((canvasWidth/2)-this.width/2,(canvasHeight/2)-this.height/2, this.width, this.height); //disegna lo sfondo verde

          if(this.isOpen){ //quando il menu e' tutto aperto
            if (!this.confermaUscita){//se non e' attivo il conferma uscita - caso del menu normale
                ctx.font = "small-caps bold 20px Lucida Console"; //tipo di font per le scritte
                for(var i=0;i<this.numeroDiVoci;i++){//disegno tutte le scritte
                  var ydisegnata=6+((canvasHeight/2)-(this.height/2))+(((this.height)/this.numeroDiVoci)*i)+(this.height/(this.numeroDiVoci*2));
                  ctx.textAlign = "center";
          				switch (i){//scrive le scritte
          					case 0:
          						disegnaTestoConBordino("open the level selected", canvasWidth/2, ydisegnata,"#d2d2d2","#000000");
          						break;
          					case 1:
          						disegnaTestoConBordino("save game", canvasWidth/2, ydisegnata,"#d2d2d2","#000000");
          						break;
          					case 2:
          						disegnaTestoConBordino("back to the main menu", canvasWidth/2, ydisegnata,"#d2d2d2","#000000");
                      break;									
          				}
                  ctx.textAlign = "left"; //lo reimposto left se no si bugga tutto
          			}		
          			{//disegno il quadrato intorno all'opzione selezionata - uso le {} per ridurre lo scope di xdisegnata e ydisegnata
                        ctx.fillStyle = "#ffc000";
                      	var xdisegnata = (canvasWidth/2)-(this.width/2);
                      	var ydisegnata = (((canvasHeight/2)-(this.height/2))+(((this.height)/this.numeroDiVoci)*this.indice));
                      	ctx.fillRect(xdisegnata, ydisegnata, this.width, 9);
                      	ctx.fillRect(xdisegnata, ydisegnata-9+(this.height)/this.numeroDiVoci, this.width, 9);
                      	ctx.fillRect(xdisegnata, ydisegnata, 9, (this.height)/this.numeroDiVoci-8);
                      	ctx.fillRect(xdisegnata+this.width-9, ydisegnata, 9, (this.height)/this.numeroDiVoci-8);			
          			}
                //ora gestisco gli input
                if(keys[sukey] && !tastoGiaSchiacciato) {
        				  if(this.indice > 0){ this.indice--;
        				  }else{ this.indice=this.numeroDiVoci-1;}
                }
                if(keys[giukey] && !tastoGiaSchiacciato) {
        				    if(this.indice < this.numeroDiVoci-1){ this.indice++;
        				    }else{ this.indice=0;}
                }
                if((keys[dashkey] || keys[startkey]) && !tastoGiaSchiacciato) {
                  switch (this.indice){
                    case 0: //apri livello selezionato
                      this.apriLivello=true;
                      this.isClosing=true;
                      this.isOpen=false;
                      break;
                    case 1: //salva la partita
                      SalvaPartita();
                      break;
                    case 2: //chiedi conferma uscita
                      this.confermaUscita=true;
                      break;
                  }
                }                            			
                if(keys[jumpkey] && !tastoGiaSchiacciato) {//chiude il menu
                  this.isOpen=false;
                  this.isClosing=true;
                }
                if(keys[startkey] || keys[sukey] || keys[giukey] || keys[sinistrakey] || keys[destrakey] || keys[dashkey] || keys[jumpkey]){
                  tastoGiaSchiacciato=true;
                }else{
                  tastoGiaSchiacciato=false;
                }
            }else{ //se e' attivo il conferma uscita
                ctx.textAlign = "center"; ctx.font = "small-caps bold 20px Lucida Console"; //tipo di font per le scritte
                disegnaTestoConBordino("do you want to go back", (canvasWidth/2), ((canvasHeight/2)+15-this.heightMax/2),"#d2d2d2","#000000");
                disegnaTestoConBordino("to the main menu?", (canvasWidth/2), ((canvasHeight/2)+35-this.heightMax/2),"#d2d2d2","#000000");
                disegnaTestoConBordino("every progress not", (canvasWidth/2), ((canvasHeight/2)+55-this.heightMax/2),"#d2d2d2","#000000");
                disegnaTestoConBordino("saved will be lost", (canvasWidth/2), ((canvasHeight/2)+75-this.heightMax/2),"#d2d2d2","#000000");
                ctx.font = "small-caps bold 28px Lucida Console"; //tipo di font per le scritte
                for(var j=0;j<2;j++){//disegno tutte le scritte
                  ctx.textAlign = "center";
                  var ydisegnata=57+canvasHeight/2;
          				switch (j){//scrive le scritte
          					case 0:
                      var xdisegnata=(canvasWidth/2)-((this.width/4));
          						disegnaTestoConBordino("no", xdisegnata, ydisegnata,"#d2d2d2","#000000");
          						break;
          					case 1:
                      var xdisegnata=(canvasWidth/2)+((this.width/4));
          						disegnaTestoConBordino("yes", xdisegnata, ydisegnata,"#d2d2d2","#000000");
          						break;								
          				}
                  ctx.textAlign = "left"; //lo reimposto left se no si bugga tutto
          			}		
          			{//disegno il quadrato intorno all'opzione selezionata - uso le {} per ridurre lo scope di xdisegnata e ydisegnata
                        ctx.fillStyle = "#ffc000";
                        var ydisegnata = 25+canvasHeight/2;
                        switch (this.indiceUscita){
                          case 0: xdisegnata = (canvasWidth/2)-(this.width/2); break;
                          case 1: xdisegnata = (canvasWidth/2); break;
                        }
                      	ctx.fillRect(xdisegnata, ydisegnata, this.width/2, 9);
                      	ctx.fillRect(xdisegnata, ydisegnata-9+(this.height)/this.numeroDiVoci, this.width/2, 9);
                      	ctx.fillRect(xdisegnata, ydisegnata, 9, (this.height)/this.numeroDiVoci-8);
                      	ctx.fillRect(xdisegnata+(this.width/2)-9, ydisegnata, 9, (this.height)/this.numeroDiVoci-8);			
          			}
                //ora gestisco gli input
                if(keys[destrakey] && !tastoGiaSchiacciato) {
                    this.indiceUscita=1;
                }
                if(keys[sinistrakey] && !tastoGiaSchiacciato) {
                    this.indiceUscita=0;
                }
                if((keys[dashkey] || keys[startkey]) && !tastoGiaSchiacciato) {
                  switch (this.indiceUscita){
                    case 0: //no
                      this.confermaUscita=false;
                      break;
                    case 1: //si
                      objMenuPrincipale= new newMenuPrincipale(); 
                      gamestate=0;                       
                      break;
                  }
                }                            			
                if(keys[jumpkey] && !tastoGiaSchiacciato) {//chiude il menu
                  this.confermaUscita=false;
                }
                if(keys[startkey] || keys[sukey] || keys[giukey] || keys[sinistrakey] || keys[destrakey] || keys[dashkey] || keys[jumpkey]){
                  tastoGiaSchiacciato=true;
                }else{
                  tastoGiaSchiacciato=false;
                }                
            }				          	
        }//fine di if(is.Open)
          
        if(this.isClosing){//animazione di chiusura del menu
            stageSelect(); //disegna stageSelect() - serve per pulire lo schermo disegnando quello che sara' lo sfondo sotto il menu
            if (this.width > 0){this.width-=20;}
            if (this.height > 0){this.height-=20;}           
            ctx.fillStyle = "#d2d2d2"; ctx.fillRect((canvasWidth/2)-this.width/2-15,(canvasHeight/2)-this.height/2-15, this.width+30, this.height+30); //disegna il bordo grigio 
            ctx.fillStyle = "#52b58b"; ctx.fillRect((canvasWidth/2)-this.width/2,(canvasHeight/2)-this.height/2, this.width, this.height); //disegna lo sfondo verde
            if (this.height-1 < 0 && this.width-1 < 0){//quando il menu e' tutto chiuso:
            	if(this.apriLivello){
                gamestate=-1;
            	  nuovoLivello();
            	}else{
                gamestate=1;
              }
            }
        }//fine di if(is.Closing)
     }
	}
  
  function newAlert(stringaDiTesto, gameStatePrecedente){
  	      this.isOpen=false;
          this.text=stringaDiTesto;
          this.width=0;
          this.height=0;
          this.prevGameState=gameStatePrecedente;
          ctx.font = "small-caps bold 16px Lucida Console"; //tipo di font per le scritte
          this.widthMax=ctx.measureText(stringaDiTesto+"aa").width;
          this.heightMax=ctx.measureText("O").width*2;
          this.drawMenu = function (){
            if (!this.isOpen && !this.isClosing){//animazione di apertura del menu
              if (this.width < this.widthMax){this.width+=(this.widthMax/20);}//always 20 frames to open, no matter how long the text is
              if (this.height < this.heightMax){this.height+=15;}
              if (this.height > this.heightMax-1 && this.width > this.widthMax-1){//quando il menu e' tutto aperto:
              	this.isOpen=true;
              }
            }
            ctx.clearRect((canvasWidth/2)-this.width/2-15,(canvasHeight/2)-this.height/2-15, this.width+30, this.height+30);	//pulisci la parte dove viene mostrato il menu
  		      ctx.fillStyle = "#d2d2d2"; ctx.fillRect((canvasWidth/2)-this.width/2-15,(canvasHeight/2)-this.height/2-15, this.width+30, this.height+30); //disegna il bordo grigio 
            ctx.fillStyle = "#52b58b"; ctx.fillRect((canvasWidth/2)-this.width/2,(canvasHeight/2)-this.height/2, this.width, this.height); //disegna lo sfondo verde  
            if(this.isOpen){  //quando il menu e' tutto aperto
                  ctx.font = "small-caps bold 16px Lucida Console"; //tipo di font per le scritte
                  var textHeight=ctx.measureText("O").width; //dato che la O normalmente e' alta quanto larga (font monospace) imposto la larghezza di O come altezza approssimativa del testo
                  ctx.textAlign = "center";
            			disegnaTestoConBordino(this.text, canvasWidth/2, canvasHeight/2+textHeight/2,"#d2d2d2","#000000");
                  ctx.textAlign = "left"; //lo reimposto left se no si bugga tutto
                  //ora gestisco gli input
                  if(keys[startkey] || keys[sukey] || keys[giukey] || keys[sinistrakey] || keys[destrakey] || keys[dashkey] || keys[jumpkey]){
                    if(!tastoGiaSchiacciato){
                     tastoGiaSchiacciato=true;
                     gamestate=this.prevGameState;
                    }
                  }else{
                    tastoGiaSchiacciato=false;
                  }		          	
          }//fine di if(is.Open)           
       }
  }  

	function newMenuOpzioni(widthPassata, heightPassata, apertoDalMenuDiPausa){
	    this.isOpen=false;
        this.isClosing=false;
        this.width=widthPassata;
        this.height=heightPassata;
        this.widthMax=canvasWidth-150;
        this.heightMax=canvasHeight-150;
        this.indice=0;
        this.contatoreAnimazione=0;
        this.staCambiandoTasto=false;
        this.drawMenuOpzioni = function (){
          if (!this.isOpen && !this.isClosing){//animazione di apertura del menu
            if (this.width < this.widthMax){this.width+=10;}
            if (this.height < this.heightMax){this.height+=15;}
            if (this.height > this.heightMax-1 && this.width > this.widthMax-1){//quando il menu e' tutto aperto:
            	this.isOpen=true;
            }
          }
          ctx.clearRect((canvasWidth/2)-this.width/2-15,(canvasHeight/2)-this.height/2-15, this.width+30, this.height+30);	//pulisci la parte dove viene mostrato il menu
		  ctx.fillStyle = "#d2d2d2"; ctx.fillRect((canvasWidth/2)-this.width/2-15,(canvasHeight/2)-this.height/2-15, this.width+30, this.height+30); //disegna il bordo grigio 
          ctx.fillStyle = "#52b58b"; ctx.fillRect((canvasWidth/2)-this.width/2,(canvasHeight/2)-this.height/2, this.width, this.height); //disegna lo sfondo verde

          if(this.isOpen){ //quando il menu e' tutto aperto
          	ctx.font = "small-caps bold 23px Lucida Console"; ctx.textAlign = "center"; disegnaTestoConBordino("OPTIONS",canvasWidth/2, 110,"#d2d2d2","#000000"); //scrive la scritta OPTIONS al centro in alto
          	ctx.font = "small-caps bold 20px Lucida Console"; //tipo di font per le scritte
            for(i=0;i<10;i++){//disegno tutte le scritte
              	var xdisegnata=75;
              	var ydisegnata=(128+(this.heightMax+75-17-128)/10*(i));
				switch (i){//scrive le varie impostazioni dei tasti
					case 0:
						ctx.textAlign = "right"; disegnaTestoConBordino("move up :   ", canvasWidth/2, ydisegnata+7+((this.heightMax+75-17-128)/10)/2,"#d2d2d2","#000000");
						ctx.textAlign = "left"; disegnaTestoConBordino("   "+tasto(sukey.toLowerCase()), canvasWidth/2, ydisegnata+7+((this.heightMax+75-17-128)/10)/2,"#d2d2d2","#000000");
						break;
					case 1:
						ctx.textAlign = "right"; disegnaTestoConBordino("move down :   ", canvasWidth/2, ydisegnata+7+((this.heightMax+75-17-128)/10)/2,"#d2d2d2","#000000");
						ctx.textAlign = "left"; disegnaTestoConBordino("   "+tasto(giukey.toLowerCase()), canvasWidth/2, ydisegnata+7+((this.heightMax+75-17-128)/10)/2,"#d2d2d2","#000000");
						break;
					case 2:
						ctx.textAlign = "right"; disegnaTestoConBordino("move left :   ", canvasWidth/2, ydisegnata+7+((this.heightMax+75-17-128)/10)/2,"#d2d2d2","#000000");
						ctx.textAlign = "left"; disegnaTestoConBordino("   "+tasto(sinistrakey.toLowerCase()), canvasWidth/2, ydisegnata+7+((this.heightMax+75-17-128)/10)/2,"#d2d2d2","#000000");
						break;	
					case 3:
						ctx.textAlign = "right"; disegnaTestoConBordino("move right :   ", canvasWidth/2, ydisegnata+7+((this.heightMax+75-17-128)/10)/2,"#d2d2d2","#000000");
						ctx.textAlign = "left"; disegnaTestoConBordino("   "+tasto(destrakey.toLowerCase()), canvasWidth/2, ydisegnata+7+((this.heightMax+75-17-128)/10)/2,"#d2d2d2","#000000");
						break;
					case 4:
						ctx.textAlign = "right"; disegnaTestoConBordino("confirm & dash :   ", canvasWidth/2, ydisegnata+7+((this.heightMax+75-17-128)/10)/2,"#d2d2d2","#000000");
						ctx.textAlign = "left"; disegnaTestoConBordino("   "+tasto(dashkey.toLowerCase()), canvasWidth/2, ydisegnata+7+((this.heightMax+75-17-128)/10)/2,"#d2d2d2","#000000");
						break;
					case 5:
						ctx.textAlign = "right"; disegnaTestoConBordino("cancel & jump :   ", canvasWidth/2, ydisegnata+7+((this.heightMax+75-17-128)/10)/2,"#d2d2d2","#000000");
						ctx.textAlign = "left"; disegnaTestoConBordino("   "+tasto(jumpkey.toLowerCase()), canvasWidth/2, ydisegnata+7+((this.heightMax+75-17-128)/10)/2,"#d2d2d2","#000000");
						break;
					case 6:
						ctx.textAlign = "right"; disegnaTestoConBordino("shoot :   ", canvasWidth/2, ydisegnata+7+((this.heightMax+75-17-128)/10)/2,"#d2d2d2","#000000");
						ctx.textAlign = "left"; disegnaTestoConBordino("   "+tasto(sparokey.toLowerCase()), canvasWidth/2, ydisegnata+7+((this.heightMax+75-17-128)/10)/2,"#d2d2d2","#000000");
						break;						
					case 7:
						ctx.textAlign = "right"; disegnaTestoConBordino("previous power :   ", canvasWidth/2, ydisegnata+7+((this.heightMax+75-17-128)/10)/2,"#d2d2d2","#000000");
						ctx.textAlign = "left"; disegnaTestoConBordino("   "+tasto(lkey.toLowerCase()), canvasWidth/2, ydisegnata+7+((this.heightMax+75-17-128)/10)/2,"#d2d2d2","#000000");
						break;																																									
					case 8:
						ctx.textAlign = "right"; disegnaTestoConBordino("next power :   ", canvasWidth/2, ydisegnata+7+((this.heightMax+75-17-128)/10)/2,"#d2d2d2","#000000");
						ctx.textAlign = "left"; disegnaTestoConBordino("   "+tasto(rkey.toLowerCase()), canvasWidth/2, ydisegnata+7+((this.heightMax+75-17-128)/10)/2,"#d2d2d2","#000000");
						break;						
					case 9:
						ctx.textAlign = "right"; disegnaTestoConBordino("menu & start :   ", canvasWidth/2, ydisegnata+7+((this.heightMax+75-17-128)/10)/2,"#d2d2d2","#000000");
						ctx.textAlign = "left"; disegnaTestoConBordino("   "+tasto(startkey.toLowerCase()), canvasWidth/2, ydisegnata+7+((this.heightMax+75-17-128)/10)/2,"#d2d2d2","#000000");
						break;

					function tasto(key){
						if (key==" "){return "space bar"}
						return key
					}											
				}
			}
			
			{//disegno il quadrato intorno all'opzione selezionata - uso le {} per ridurre lo scope di xdisegnata e ydisegnata
              ctx.fillStyle = "#ffc000";
            	var xdisegnata = 75;
            	var ydisegnata = (128+(this.heightMax+75-17-128)/10*(this.indice));
            	ctx.fillRect(xdisegnata, ydisegnata-2, this.width, 9);
            	ctx.fillRect(xdisegnata, ydisegnata+((this.heightMax+75-17-128)/10)-5, this.width, 9);
            	ctx.fillRect(xdisegnata, ydisegnata, 9, ((this.heightMax+75-17-128)/10)-5);
            	ctx.fillRect(xdisegnata+this.width-9, ydisegnata, 9, ((this.heightMax+75-17-128)/10)-5);			
			}
			
			if(this.staCambiandoTasto){//da qui in giu determino cosa succede in base a che tasto viene schiacciato. le due grosse distinzioni sono se staCambiandoTasto oppure se siamo nel menu e basta 
				if(this.contatoreAnimazione < 40){//fa l'animazione del testo che appare e disappare
					ctx.fillStyle = "#52b58b"; ctx.fillRect(canvasWidth/2,(128+(this.heightMax+75-17-128)/10*(this.indice))+7, this.width/2-9, ((this.heightMax+75-17-128)/10)-12);
					this.contatoreAnimazione++;
				}else{
					this.contatoreAnimazione++;
					if(this.contatoreAnimazione>79){
						this.contatoreAnimazione=0;
					}
				}
				if(ultimoTastoLetto!=""){//se viene schiacciato un tasto qualsiasi
					switch(this.indice){
						case 0: sukey=ultimoTastoLetto; break;
						case 1: giukey=ultimoTastoLetto; break;
						case 2: sinistrakey=ultimoTastoLetto; break;
						case 3: destrakey=ultimoTastoLetto; break;
						case 4: dashkey=ultimoTastoLetto; break;
						case 5: jumpkey=ultimoTastoLetto; break;
						case 6: sparokey=ultimoTastoLetto; break;
						case 7: lkey=ultimoTastoLetto; break;
						case 8: rkey=ultimoTastoLetto; break;
						case 9: startkey=ultimoTastoLetto; break;
					}
					this.staCambiandoTasto=false;	
				}
			}else{
              if(keys[sukey] && !tastoGiaSchiacciato) {
				if(this.indice > 0){ this.indice--;
				}else{ this.indice=9;}
              }
              if(keys[giukey] && !tastoGiaSchiacciato) {
				if(this.indice < 9){ this.indice++;
				}else{ this.indice=0;}
              }
              if((keys[dashkey] || keys[startkey]) && !tastoGiaSchiacciato) {
              	ultimoTastoLetto="";
                this.staCambiandoTasto=true;
              }                            			
              if(keys[jumpkey] && !tastoGiaSchiacciato) {//chiude il menu
                this.isOpen=false;
                this.isClosing=true;
              }
              if(keys[startkey] || keys[sukey] || keys[giukey] || keys[sinistrakey] || keys[destrakey] || keys[dashkey] || keys[jumpkey]){
                tastoGiaSchiacciato=true;
              }else{
                tastoGiaSchiacciato=false;
              }				
			}          	
          }//fine di if(is.Open)
          
          if(this.isClosing){//animazione di chiusura del menu
              if (this.width > widthPassata){this.width-=20;}
              if (this.height > heightPassata){this.height-=20;}
              ctx.clearRect((canvasWidth/2)-this.width/2-15,(canvasHeight/2)-this.height/2-15, this.width+30, this.height+30);	//pulisci la parte dove viene mostrato il menu
              if (!apertoDalMenuDiPausa){objMenuPrincipale.drawMenuPrincipale(false);}           
              ctx.fillStyle = "#d2d2d2"; ctx.fillRect((canvasWidth/2)-this.width/2-15,(canvasHeight/2)-this.height/2-15, this.width+30, this.height+30); //disegna il bordo grigio 
              ctx.fillStyle = "#52b58b"; ctx.fillRect((canvasWidth/2)-this.width/2,(canvasHeight/2)-this.height/2, this.width, this.height); //disegna lo sfondo verde
              if (this.height-1 < heightPassata && this.width-1 < widthPassata){//quando il menu e' tutto chiuso:
              	if(apertoDalMenuDiPausa){
              		gamestate=2;
              	}else{//se viene aperto dal menu principale - devo ancora crearlo pero' lol
              		gamestate=0;
              	}
              }
          }//fine di if(is.Closing)
     }
	}

  function newMenuCaricaPartita(){
	      this.isOpen=false;
        this.isClosing=false;
        this.indexAlterato=false;
        this.fileLetto=false;
        this.width=0;
        this.height=0;
        this.widthMax=canvasWidth-450;
        this.heightMax=canvasHeight-425;
        this.indice=0;
        this.daPulire=false;
        this.numeroDiVoci=1;
        this.drawMenu = async function (){ //asincrono perche' se viene caricata la partita bisogna aspettare che legga il file
          if (!this.isOpen && !this.isClosing){//animazione di apertura del menu
            if (this.width < this.widthMax){this.width+=10;}
            if (this.height < this.heightMax){this.height+=15;}
            if (this.height > this.heightMax-1 && this.width > this.widthMax-1){//quando il menu e' tutto aperto:
            	this.isOpen=true;
            }
          }
          if(this.daPulire){
            objMenuPrincipale.drawMenuPrincipale(false);
            document.getElementById("caricaPartitaDiv").style.zIndex = "10";
            this.daPulire=false;
          }
          ctx.clearRect((canvasWidth/2)-this.width/2-15,(canvasHeight/2)-this.height/2-15, this.width+30, this.height+30);	//pulisci la parte dove viene mostrato il menu
		      ctx.fillStyle = "#d2d2d2"; ctx.fillRect((canvasWidth/2)-this.width/2-15,(canvasHeight/2)-this.height/2-15, this.width+30, this.height+30); //disegna il bordo grigio 
          ctx.fillStyle = "#52b58b"; ctx.fillRect((canvasWidth/2)-this.width/2,(canvasHeight/2)-this.height/2, this.width, this.height); //disegna lo sfondo verde

          if(this.isOpen){ //quando il menu e' tutto aperto
                if (!this.indexAlterato){
                  document.getElementById("caricaPartitaDiv").style.zIndex = "10";
                  document.getElementById("fileCaricaPartita").disabled=false;
                  this.indexAlterato=true;
                }
                ctx.font = "small-caps bold 25px Lucida Console"; //tipo di font per le scritte
                {//disegno la scritta - {} per diminuire lo scope di ydisegnata
                  var ydisegnata=((canvasHeight/2)-(this.height/2))+30;
                  ctx.textAlign = "center";
                  disegnaTestoConBordino("upload save file", canvasWidth/2, ydisegnata,"#d2d2d2","#000000");
                  ctx.font = "small-caps bold 20px Lucida Console";
                  ydisegnata=((canvasHeight/2)+(this.height/2))-30;
                  disegnaTestoConBordino((dashkey+" to confirm"), canvasWidth/2, ydisegnata,"#d2d2d2","#000000");
                  if (jumpkey==" "){disegnaTestoConBordino((jumpkey+"spacebar to cancel"), canvasWidth/2, ydisegnata+20,"#d2d2d2","#000000");
                  }else{ disegnaTestoConBordino((jumpkey+" to cancel"), canvasWidth/2, ydisegnata+20,"#d2d2d2","#000000");}
                  ctx.textAlign = "left"; //lo reimposto left se no si bugga tutto
          			}		
                //ora gestisco gli input
                  if((keys[dashkey] || keys[startkey]) && !tastoGiaSchiacciato) { //conferma il caricamento del file
                    this.daPulire=true;
                    document.getElementById("caricaPartitaDiv").style.zIndex = "-1";
                    this.fileLetto=await controllaFile();
                    if (this.fileLetto){
                      this.isOpen=false;
                      this.daPulire=false;
                      this.isClosing=true;
                    }                                     
                  }                            			
                  if(keys[jumpkey] && !tastoGiaSchiacciato) {//chiude il menu
                    this.isOpen=false;
                    this.isClosing=true;
                  }
                  if(keys[startkey] || keys[sukey] || keys[giukey] || keys[sinistrakey] || keys[destrakey] || keys[dashkey] || keys[jumpkey]){
                    tastoGiaSchiacciato=true;
                  }else{
                    tastoGiaSchiacciato=false;
                  }			          	
        }//fine di if(is.Open)
          
        if(this.isClosing){//animazione di chiusura del menu
            if(this.indexAlterato){//disattiva il tasto "sfoglia file" e riporta il focus sul canvas
              document.getElementById("caricaPartitaDiv").style.zIndex = "-1";
              document.getElementById("fileCaricaPartita").disabled=true; //questo comando disattiva il focus sul canvas, devo riattivare il focus se no non legge piu i tasti
              document.getElementById('canvasDivId').focus(); //riporta il focus sul canvas
              this.indexAlterato=false;                           
            }
            objMenuPrincipale.drawMenuPrincipale(false); //pulisce lo schermo disegnando lo sfondo (menu principale)
            if (this.width > 0){this.width-=20;}
            if (this.height > 0){this.height-=20;}           
            ctx.fillStyle = "#d2d2d2"; ctx.fillRect((canvasWidth/2)-this.width/2-15,(canvasHeight/2)-this.height/2-15, this.width+30, this.height+30); //disegna il bordo grigio 
            ctx.fillStyle = "#52b58b"; ctx.fillRect((canvasWidth/2)-this.width/2,(canvasHeight/2)-this.height/2, this.width, this.height); //disegna lo sfondo verde
            if (this.height-1 < 0 && this.width-1 < 0){//quando il menu e' tutto chiuso:
            	nelMenuCaricaPartita=false;
              if (this.fileLetto){
                gamestate=1;
              }else{
                gamestate=0;
                objMenuPrincipale.drawMenuPrincipale(false);
              }
            }
        }//fine di if(is.Closing)
        
        async function controllaFile(){ //controlla che il file sia caricato correttamente
            var uploadedFile = document.getElementById("fileCaricaPartita").files[0];
            var stringaCaricaPartita="";
            if(uploadedFile.size > (512)){//controlla la dimensione del file - non deve essere superiore a 512 Byte
               objAlert = new newAlert("The file size limit is 512Byte (half a kB). Upload a smaller file.",gamestate); gamestate=5;
               return false;
            }
            async function readFileAsDataURL(uploadedFile) {
                let text = await new Promise((resolve) => {
                    let fileReader = new FileReader();
                    fileReader.onload = (e) => resolve(fileReader.result);
                    fileReader.readAsText(uploadedFile);
                });
                return text;
            }          
            stringaCaricaPartita = await readFileAsDataURL(uploadedFile);
            return caricaDatiSalvataggio(stringaCaricaPartita);
            
            function caricaDatiSalvataggio(stringaCaricaPartita) { //carica effettivamente la partita dal risultato della lettura del file
                var numeroElemento=0;
                var stringaElemento="";
                for(i=0; i<stringaCaricaPartita.length; i++){
                  if(stringaCaricaPartita[i]=="|"){
                    caricaElemento();
                    numeroElemento++;
                    stringaElemento="";   
                  }else{
                    stringaElemento+=stringaCaricaPartita[i];
                  }
                }
                if ((numeroElemento==20) && (stringaElemento!="")){//carica l'ultimo elemento se esiste (che se no verrebbe skippato, facendo poi ritornare false)
                    caricaElemento();
                    numeroElemento++;                
                }
                if (numeroElemento==21){ //se ha caricato il numero corretto di elementi
                  return true;
                }else{
                  objAlert = new newAlert("The file is not using the correct format",gamestate); gamestate=5; 
                  return false;
                }    
                function caricaElemento(){
                    switch (numeroElemento){
                        case 0: //jumpkey
                          jumpkey=stringaElemento;
                          break;
                        case 1: //destrakey
                          destrakey=stringaElemento;
                          break;
                        case 2: //sinistrakey
                          sinistrakey=stringaElemento;
                          break;
                        case 3: //sukey
                          sukey=stringaElemento;
                          break;
                        case 4: //giukey
                          giukey=stringaElemento;     
                          break;
                        case 5: //dashkey
                          dashkey=stringaElemento;
                          break;
                        case 6: //sparokey
                          sparokey=stringaElemento;
                          break;
                        case 7: //startkey
                          startkey=stringaElemento;
                          break;
                        case 8: //lkey
                          lkey=stringaElemento;
                          break;
                        case 9: //rkey
                          rkey=stringaElemento;
                          break;
                        case 10: //levelDefeated
                          var nuovoElementino="";
                          for (k=0; k<8; k++){
                            for(j=0; j<stringaElemento.length;j++){
                              if(stringaElemento[j]!=","){
                                nuovoElementino+=stringaElemento[j];
                                if (nuovoElementino=="true"){
                                  levelDefeated[k]=true; nuovoElementino=""; k++;
                                }else if (nuovoElementino=="false"){
                                  levelDefeated[k]=false; nuovoElementino=""; k++;
                                }   
                              }else{
                                nuovoElementino="";
                              }                            
                            }
                          }
                          break;
                        case 11: //heartAcquired
                          var nuovoElementino="";
                          for (k=0; k<8; k++){
                            for(j=0; j<stringaElemento.length;j++){
                              if(stringaElemento[j]!=","){
                                nuovoElementino+=stringaElemento[j];
                                if (nuovoElementino=="true"){
                                  heartAcquired[k]=true; nuovoElementino=""; k++;
                                }else if (nuovoElementino=="false"){
                                  heartAcquired[k]=false; nuovoElementino=""; k++;
                                }   
                              }else{
                                nuovoElementino="";
                              }                            
                            }
                          } 
                          break;
                        case 12: //subtank
                          subtank[0].life=parseInt(stringaElemento,10);
                          break;
                        case 13:
                          if(stringaElemento=="true"){subtank[0].acquired=true;
                          }else{subtank[0].acquired=false; subtank[0].life=0;}
                          break;
                        case 14:
                          subtank[1].life=parseInt(stringaElemento,10);
                          break;
                        case 15:
                          if(stringaElemento=="true"){subtank[1].acquired=true;
                          }else{subtank[1].acquired=false; subtank[1].life=0;}    
                          break;
                        case 16:
                          subtank[2].life=parseInt(stringaElemento,10);
                          break;
                        case 17:
                          if(stringaElemento=="true"){subtank[2].acquired=true;
                          }else{subtank[2].acquired=false; subtank[2].life=0;}
                          break;
                        case 18:
                          subtank[3].life=parseInt(stringaElemento,10);
                          break;
                        case 19:
                          if(stringaElemento=="true"){subtank[3].acquired=true;
                          }else{subtank[3].acquired=false; subtank[3].life=0;}
                          break;
                        case 20: //armaturaAcquired
                          var nuovoElementino="";
                          for (k=0; k<4; k++){
                            for(j=0; j<stringaElemento.length;j++){
                              if(stringaElemento[j]!=","){
                                nuovoElementino+=stringaElemento[j];
                                if (nuovoElementino=="true"){
                                  armaturaAcquired[k]=true; nuovoElementino=""; k++;
                                }else if (nuovoElementino=="false"){
                                  armaturaAcquired[k]=false; nuovoElementino=""; k++;
                                }   
                              }else{
                                nuovoElementino="";
                              }                            
                            }
                          }                        
                          break;                                  
                   }
                }    
            } //fine di caricaPartita()                           
        }//fine di controllaFile()                
     }//fine di drawMenu()               
	}//fine di menuCaricaPartita

	function newMenuPrincipale(){
		this.width=canvasWidth;
		this.height=canvasHeight;
		this.indice=0;
		this.isClosing=false;
		this.closingIndex=0;
		this.isGoingToStageSelection=false;
		this.drawMenuPrincipale = function (canInput){
			ctx.clearRect(0,0,canvasWidth,canvasHeight);//pulisce tutto
			ctx.fillStyle = "#020219"; ctx.fillRect(0,0,canvasWidth+1,canvasHeight+1);//sfondo nero
			ctx.textAlign = "right";
      ctx.font = "small-caps bold 15px Lucida Console";
      disegnaTestoConBordino("by lordf", canvasWidth-3, canvasHeight-2,"#d2d2d2bb","#020219");
      ctx.textAlign = "left";
      disegnaTestoConBordino(versioneDiGioco, 3, canvasHeight-2,"#d2d2d2bb","#020219");
			ctx.font = "small-caps bold oblique 250px Lucida Console";
			disegnaTestoConBordino("X",73+canvasWidth/2,243,"#ff9200","#ffd600");
			ctx.font = "small-caps bold oblique 125px Lucida Console";
			disegnaTestoConBordino("simple",17+canvasWidth/20,200,"#0001cb","#02b0ef");
			ctx.font = "small-caps bold oblique 75px Lucida Console";
			disegnaTestoConBordino("js",234+canvasWidth/2,245,"#0001cb","#02b0ef");
			ctx.font = "small-caps bold 30px Lucida Console"; ctx.textAlign = "center";
			if(this.indice==0){disegnaTestoConBordino("new game",canvasWidth/2,350,"#ff9200","#f9c065");}else{disegnaTestoConBordino("new game",canvasWidth/2,350,"#0001cb","#02b0ef");}
			if(this.indice==1){disegnaTestoConBordino("load game",canvasWidth/2,400,"#ff9200","#f9c065");}else{disegnaTestoConBordino("load game",canvasWidth/2,400,"#0001cb","#02b0ef");}
			if(this.indice==2){disegnaTestoConBordino("options",canvasWidth/2,450,"#ff9200","#f9c065");}else{disegnaTestoConBordino("options",canvasWidth/2,450,"#0001cb","#02b0ef");}
			if(canInput && !this.isClosing){//input dei tasti
            	if(keys[sukey] && !tastoGiaSchiacciato) {
					if(this.indice > 0){
						this.indice--;
					}else{
						this.indice=2;
					}
            	}
            	if(keys[giukey] && !tastoGiaSchiacciato) {
					if(this.indice < 2){
						this.indice++;
					}else{
						this.indice=0;
					}
            	}
            	if((keys[startkey]||keys[dashkey]) && !tastoGiaSchiacciato) {
					switch(this.indice){
						case 0://nuovo gioco 
              this.isClosing=true;
							this.isGoingToStageSelection=true;
              //azzero tutto
              levelDefeated = [false, false, false, false, false, false, false, false];
              heartAcquired = [false, false, false, false, false, false, false, false];
              armaturaAcquired = [false, false, false, false];
              subtank = [
            		{lifeMax: 20, life:parseInt(0,10), acquired:false},
            		{lifeMax: 20, life:parseInt(0,10), acquired:false},
            		{lifeMax: 20, life:parseInt(0,10), acquired:false},
            		{lifeMax: 20, life:parseInt(0,10), acquired:false},
              ];              
							break;
						case 1://carica partita
              objMenuCaricaPartita=new newMenuCaricaPartita();
              gamestate=6;
							break;
						case 2://opzioni 
            				objMenuOpzioni=new newMenuOpzioni(0, 0, false);
            				tastoGiaSchiacciato=true;
            				gamestate=3;                				
                		break;													
					}	
            	}                        
            	if(keys[startkey] || keys[sukey] || keys[giukey] || keys[sinistrakey] || keys[destrakey] || keys[dashkey] || keys[jumpkey]){
                	tastoGiaSchiacciato=true;
            	}else{
                	tastoGiaSchiacciato=false;
            	}				
			}
        	if(this.isClosing){//animazione di chiusura del menu
        		ctx.fillStyle = "#000000";
        		this.closingIndex+=13;
        		ctx.fillRect(0,0,canvasWidth,this.closingIndex);
        		ctx.fillRect(0,canvasHeight-this.closingIndex,canvasWidth,this.closingIndex);
				    ctx.fillRect(0,0,this.closingIndex,canvasHeight);
				    ctx.fillRect(canvasWidth-this.closingIndex,0,canvasWidth-this.closingIndex,canvasHeight);
        		if ( this.closingIndex > ((canvasWidth/2)-1) ){//quando e' tutto chiuso
        			ctx.textAlign = "left";// se no si bugga della roba
              		if(this.isGoingToStageSelection){
              			gamestate=1;
              		}else{
              		   //boh...
              		}
              	}
          	}		
	    }
	}

  function SalvaPartita(){
    stringaSalvataggio=jumpkey+"|"+destrakey+"|"+sinistrakey+"|"+sukey+"|"+giukey+"|"+dashkey+"|"+sparokey+"|"+startkey+"|"+lkey+"|"+rkey+"|"+levelDefeated+"|"+heartAcquired;
    for (i=0; i<4; i++){
        stringaSalvataggio+="|"+subtank[i].life+"|"+subtank[i].acquired;
    }
    stringaSalvataggio+="|"+armaturaAcquired;    
    {//creo il file simpleXjs.dataDiOggi.savegame da scaricare
        const dataDiOggi=creaData(); //prende la data di oggi
        var element = document.createElement('a');
        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(stringaSalvataggio));
        element.setAttribute('download', "simpleXjs."+dataDiOggi+".savegame");
        element.style.display = 'none';
        document.body.appendChild(element);
        element.click();
        document.body.removeChild(element);
        document.getElementById('canvasDivId').focus();
        return;
        
        function creaData(){
          var temp = new Date();
          var dateStr = padStr(temp.getFullYear()) +"."+
                        padStr(1 + temp.getMonth()) +"."+
                        padStr(temp.getDate()) +"-"+
                        padStr(temp.getHours()) +"."+
                        padStr(temp.getMinutes());
          return dateStr;
          function padStr(i) {//sistema tipo 01 e 11 per avere tutto su due cifre
              return (i < 10) ? "0" + i : "" + i;
          }        
        }
    }
  }
