      var versioneDiGioco = "v0.20220614"
      //crea il canvas
      var canvasWidth = 720;
      var canvasHeight = 540;
      if(document.getElementsByTagName('canvas').length == 0) {     //crea il canvas con le variabili che ho creato
          document.body.innerHTML += "".concat("<div class='caricaPartitaDiv' id='caricaPartitaDiv'><input type='file' id='fileCaricaPartita' disabled></div><div class='canvasDiv' id='canvasDivId' tabIndex='1'><canvas id='canvas' width=" , canvasWidth , " height=" , canvasHeight , "></canvas></div>");
      }   var ctx = document.getElementById('canvas').getContext('2d');

    var stringaSalvataggio="";

	  //variabili dei tasti - prima o poi faro' un'opzione nel menu per poterli cambiare ingame
      var keys = []; //vettore associativo dei tasti (tiene dentro dei bool)
      var tastoGiaSchiacciato = false;  //mi serve per alcune funzioni tipo selectScreen()
      var jumpkey = "z";         		//salta - default z
      var destrakey = "ArrowRight";     //muovi sinistra - default freccia destra
      var sinistrakey = "ArrowLeft";    //muovi destra - default freccia sinistra
      var sukey = "ArrowUp";           	//default freccia su
      var giukey = "ArrowDown";         //default freccia giu
      var dashkey = "x";		    	//dash - default x
      var sparokey = "a";				//shoot - default a
      var startkey = "Enter";			//start - default INVIO/ENTER
      var lkey = "d";					//power+ - default e
      var rkey = "c";					//power- - default c

      var ultimoTastoLetto="";
      document.addEventListener("keydown", function(e) {//events - leggi tasti schiacciati
          keys[e.key] = true;
          ultimoTastoLetto=e.key;
      });
      document.addEventListener("keyup", function(e) {//events - leggi tasti rilasciati
          keys[e.key] = false;
      });

      //prototipo del player
      function Player() {
      	this.lifeMax=16;
        for(i=0; i<8; i++){if(heartAcquired[i]){this.lifeMax+=2;}} //aumenta la vita massima di 2 per ogni cuore trovato
        this.life=this.lifeMax;
        this.x= 0;
        this.y= 0;
        this.yv= 0;
        this.xv= 0;
        this.slope= 0;
        this.width= 24;
        this.height= 38;
        this.color= '#0400f8';
        this.defaultColor= '#0400f8';
        this.damagedColor= '#990003';
        this.charge0color= '#ffc000';
        this.charge1color= '#49ff37';
        this.charge2color= '#14dfff';        
        this.speed= 0.9;
        this.defaultspeed= 0.9;
        this.jumpheight= 11.5;
        this.giasaltato = false;
        this.giasparato = false;
        this.facingRight = true;
        this.isInWater = false;
        this.invulnerability = 0;
        this.canMove = true;
        this.carica = 0;
        this.power = [ //vettore dei poteri
        {usageMax: 32, usage:32, color:'#8e8363', nome:'Homing Torpedo'},
        {usageMax: 32, usage:32, color:'#00af3b', nome:'Chameleon Sting'},
        {usageMax: 32, usage:32, color:'#ff6666', nome:'Rolling Shield'},
        {usageMax: 32, usage:32, color:'#ff5a00', nome:'Fire Wave'},
        {usageMax: 32, usage:32, color:'#e40097', nome:'Storm Tornado'},
        {usageMax: 32, usage:32, color:'#e5ac00', nome:'Electric Spark'},
        {usageMax: 32, usage:32, color:'#65766b', nome:'Boomerang Cutter'},
        {usageMax: 32, usage:32, color:'#05e9ff', nome:'Shotgun Ice'},
        ];
      }
      levelDefeated = [false, false, false, false, false, false, false, false]; //vettore che tiene quanti livelli sono stati superati
      heartAcquired = [false, false, false, false, false, false, false, false]; //vettore che tiene quanti cuori sono stati trovati
      subtank = [//vettore di subtanks - e' scollegata dal player almeno non si resetta al cambio del livello
    		{lifeMax: 20, life:parseInt(0,10), acquired:false},
    		{lifeMax: 20, life:parseInt(0,10), acquired:false},
    		{lifeMax: 20, life:parseInt(0,10), acquired:false},
    		{lifeMax: 20, life:parseInt(0,10), acquired:false},
      ];
      
  //gamestate - se tutto i gamestate sono false lo stato e' "in gioco"
  var stageSelection=false; //stato: selezione del livello
  var menuDiPausa=false; //stato: menu di pausa
  var nelMenuOpzioni=false; //stato: menu opzioni
  var nelleOpzioniStageSelect=false; //stato: opzioni nelle stage selection
  var nelMenuPrincipale=true; //stato: nel menu principale
  var nelMenuCaricaPartita=false; //stato: nel menu carica partita
  var objMenuPrincipale= new newMenuPrincipale(); //inizializza il menu principale
  
	//caricare il livello
	var level = []; //create the level array
	var lvlNumber=1;
      					
    //prendo lvlNumber e carico il livello scelto - sadly non ancora da file perchÃ¨ siamo a corto di budget
	function leggiLivelloDaFile() {	//funz che carica il livello scelto - i livello sono salvati come stringhe
		switch (lvlNumber) {/*
i livelli sono disposti cosi in realta':1 8
			  						  3     4    
			  						  5     7
										6 2     (mi serve per assegnare correttamente i poteri)*/
			case 1: stringToLevel("tttttttttttttttttttttttttttttttttttttttttttttttttttl...................................................l...................................................l..................................................l..................................................l......................................P...........l..................................................l..................................................l..................................................l..................................................l..................................................l..................................................l..................................................l..................................................l..................................................l..................................................l..................................................l..................................................l..................................................l..................................................l..................................................l..................................................l..................................................l..................................................l..................................................l..................................................l..............................P...................l..X.................................P.............l..................................................z0.62;0.85;");
				break;

			case 8: stringToLevel("tttttttttttttttttttttttttttttttttttttttttttttttttttttttttttl..........................................................l..........................................................l..eeeeeee.................................................l..........................................................l............ggggggg.......................................l..........................................................l.....................fffffff..............................l..........................................................l..........................................................l..............................ggggggg.....................l..........................................................l........................................eeeeeee...........l..........................................................l..................................................aaa.....l..........a...............................................l..........a.......h...h..ccccc.ddd.ccc.d.d.c.ddd.c.c.....fl..........a...bbb.h.h.h..c.....d.d.c.c.d.d....d..c.c......l..........a...b.b.h.h.h..c..cc.dd..ccc.d.d.c..d...c.......l..........aaa.bbb..h.h...c...c.d.d.c.c..d..c..d...c.......l.........................cccc.............................l.........................................................gl..........................................................l..........................................................l...........................cccccccccccccccccccccccccccc...l....X.....................................................l....................bb....................................l................bb........................................l............gg............................................l........ff................................................l....ee....................................................z0.25;0.85;moon.jpg;#2F4858;#716F71;#81B2C5;#6D98BA;#EACDC2;#ebdb9d;#d6ba54;#490047;");
				break;

			case 4: stringToLevel("ttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttl...................................................................................................................................................................................................................l...................................................................................................................................................................................................................l...................................................................................................................................................................................................................l..j...j.kkk.jjj.k...jj...kkk...j.....kkk...j.......................................................................................................................................................................l..j...j.k.k.j.j.k...j.j..k.k..jj.....k.k..jj.......................................................................................................................................................................l..j.j.j.k.k.jjj.k...j.j..k.k.j.j.iii.k.k.j.j.......................................................................................................................................................................l..j.j.j.k.k.jj..k...j.j..k.k...j.....k.k...j.......................................................................................................................................................................l...j.j..kkk.j.j.kkk.jj...kkk...j.....kkk...j.......................................................................................................................................................................l...................................................................................................................................................................................................................l...................................................................................................................................................................................................................l.........................................................................................................................................................................................................f.........l.........................................................................................................................................................................................................hi........l.........................................................................................................................................................................................................hii.......l................................................................................................................................................................................................gg.......h.........l...............................................................................................................................................................................................ggg.......h.........l......................d.........................................................dddddddd...dddd................e............ddd....dddd.......................................................gggg.......h.........l.............................................................................................................................................................................................ggggg.......h...g.g.g.l.............................................ffff.......ffff................................................................................g..g..........gg..g.............................gggggg.......h...ggggg.l...............d....deddd............ffff.....ff.........ff..................ddd..............e......dd.....e..e..e.....d...........de.....gg..gg........ggg..gg...........dddd............ggggggg.......h...ggggg.l.X.........................ffff.......ff......ff.........ff...............................................................................ggg..ggg......gggg..ggg....ffff............ffff.gggggggg.......h...gg.gg.l............................ff........ff......ff.........ff..............................................................................gggg..gggg....ggggg..gggg....ff..............ff.ggggggggg......ggg..gg.gg.lccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc..ccccccccccccccc...ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc..ccccccccccccccccccccccccccccccccccccccccccccccccccccclbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbc..cbbbbbbbbbbbbbc...cbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbc..cbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbblbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb..bbbbbbbbbbbbbbb...bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb..bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbblbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb..bbbbbbbbbbbbbbb...bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb..bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbblbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb..bbbbbbbbbbbbbbb...bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb..bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbblbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb..bbbbbbbbbbbbbbb...bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb..bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbblbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbSSbbbbbbbbbbbbbbbSSSbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbSSbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbz0.62;0.85;sunnySky.png;#00000000;#5d4900;#21ad10;#c34e29;#d6ba54;#005f00;#86310e;#bcbcbc;#fcfcfc;#a60000;#402fd6;");
				break;
        
      		case 7: stringToLevel("tttttttttttttttttttttttttttttttttttttttttttttttttttl...................................................l..................................................l..................................................l......................................P...........l..................................................l..................................................l..................................................l..................................................l..................................................l..................................................l..................................................l..................................................l..................................................l..................................................w...bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb................l..................................................l..................................................l..................................................l..................................................l..................................................l..................................................l..................................................l..................................................l..................................................l..............................P...................l..X.................................P.............l..................................................z0.62;0.85;");  
        		break;
        
			case 5: stringToLevel("ttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttl...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l..................................................................................................................................................................................................mmmmmmcccccccccccccccccccddccccccccccccccccccccc.............................................................................................................................................................l..................................................................................................................................................................................................mmmmmmcccccccccccccccccccddccccccccccccccccccccc.............................................................................................................................................................l..................................................................................................................................................................................................mmmmmmcccccccccccccccccccddccccccccccccccccccccc.............................................................................................................................................................l..................................................................................................................................................................................................mmmmmmcccccccccccccccccccddccccccccccccccccccccc.............................................................................................................................................................l..................................................................................................................................................................................................mmmmmmcccccccccccccccccccddccccccccccccccccccccc.............................................................................................................................................................l..................................................................................................................................................................................................mmmmmmcccccccccccccccccccddccccccccccccccccccccc.............................................................................................................................................................l..................................................................................................................................................................................................mmmmmmcccccccccccccccccccddccccccccccccccccccccc.............................................................................................................................................................l..................................................................................................................................................................................................mmmmmmcccccccccccccccccccddccccccccccccccccccccc.............................................................................................................................................................l..................................................................................................................................................................................................mmmmmmcccccccccccccccccccddccccccccccccccccccccc.............................................................................................................................................................l..................................................................................................................................................................................................mmmmmmcccccccccccccccccccddccccccccccccccccccccc.............................................................................................................................................................l..................................................................................................................................................................................................mmmmmmcccccccccccccccccccddccccccccccccccccccccc.............................................................................................................................................................l...................................................................................................................................................................................................mmmmmcccccccccccccccccccddccccccccccccccccccccc.............................................................................................................................................................l...................................................................................................................................................................................................mmmmmcccccccccccccqqqqqqddccccccccccccccccccccc.............................................................................................................................................................l....................................................................................................................................................................................................mmmmcccccccccccccqqqqqqddccccccccccccccccccccc.............................................................................................................................................................l....................................................................................................................................................................................................mmmmmqccccqqqqqqqqqqqqqddccccccccccccccccccccc.............................................................................................................................................................l....................................................................................................................................................................................................pqmmmqccccqqqqqqqqqqqqqddccccccccccccccccccccc.............................................................................................................................................................l....................................................................................................................................................................................................pqmmmqPqqqqqqqqqqqqqqqqddddddddddddddddddddddd.............................................................................................................................................................l....................................................................................................................................................................................................pqmmmqqqqqqqqqqqqqqqqqqddddddddddddddddddddddd.............................................................................................................................................................l....................................................................................................................................................................................................pqmmmqqqqqqqqqqqqqqqqqqddccccccccccccccccccccc.............................................................................................................................................................l....................................................................................................................................................................................................pqmmmqqqqqqqqqqqqqqqqqqddccccccccccccccccccccc.............................................................................................................................................................l..........................................................................................................bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb..........................................................pqmmmqqqqqqqqqqqqqqqqqqddccccccccccccccccccccc.............................................................................................................................................................l..........................................................................................................bccccccccccccccccccccccccccccccc..........................................................pqmmmqqqqqqqqqqqqqqqqqqddccccccccccccccccccccc.............................................................................................................................................................l..........................................................................................................ccccccccccccccccccccccccccccccccbbbb............................................bbbbbbbbbbbbbbddddd..............ddccccccccccccccccccccc.............................................................................................................................................................l..........................................................................................................cccccccccccccccccccccccccccccccccccb............................................ccccccccccccccccccc..............ddccccccccccccccccccccc.............................................................................................................................................................l..............................................bbbbbbbbbbbbbbbbbbbbbbbb....................................cccccccccccccccccccccccccccccccccccc................................bbbbbbbbbbbbccccccccccccccccccc..............ddddddddddddddddddddddd.............................................................................................................................................................l..............................................cccccccccccccccccccccccc....................................cccccccccccccccccccccccccccccccccccc................................ccccccccccccccccccccccccccccccc..............ddddddddddddddddddddddd.............................................................................................................................................................l.X................................bbbbbbbbbbbbccccccccccccccccccccccccbbbb................................cccccccccccccccccccccccccccccccccccc....................bbbbbbbbbbbbcccccccccccccccccccccccccccccccdd............ddccccccccccccccccccccc.............................................................................................................................................................l..................................cccccccccccccccccccccccccccccccccccccccc................................cccccccccccccccccccccccccccccccccccc....................ccccccccccccccccccccccccccccccccccccccccccccc............ddccccccccccccccccccccc.............................................................................................................................................................lbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccccccccccccccccccccccccccccccccccccccbbbb....................bbbbbbbbccccccccccccccccccccccccccccccccccccbbbbbbbbbbbbbbbbbbbbccccccccccccccccccccccccccccccccccccccccccccc...............cccccccccccccccccccc.............................................................................................................................................................lcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc....................ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc...............cccccccccccccccccccc.............................................................................................................................................................lccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccbbbbbbbbbbbbbbbbbbbbccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc...............cccccccccccccccccccc.............................................................................................................................................................lccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc...............cccccccccccccccccccc.............................................................................................................................................................lccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc...............ccccccccccccccccccccd............................................................................................................................................................lcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccd..............cccccccccccccccccccdd............................................................................................................................................................lccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccd...................cccccccccccccdd............................................................................................................................................................lcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccd..................cccccccccccccdd............................................................................................................................................................lccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccd.................cccccccccccccdd............................................................................................................................................................lcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccd................cccccccccccccdd............................................................................................................................................................lccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccd...............cccccccccccccdd............................................................................................................................................................lccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc...............cccccccccccccdd............................................................................................................................................................l..........................................................cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc..................................................................................ccccccccccc...............cccccccccccccdd............................................................................................................................................................l..........................................................cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc..................................................................................ccccccccccc...............cccccccccccccdd............................................................................................................................................................l..........................................................................................................................................................................................................ccccccccccc...................cccccccccdd............................................................................................................................................................l..........................................................................................................................................................................................................ccccccccccc...................cccccccccdddddddddddddddddddddddddddddddddddddddddddddddd..............................................................................................................l..........................................................................................................................................................................................................ccccccccccc...................cccccccccdddddddddddddddddddddddddddddddddddddddddddddddd..............................................................................................................l..........................................................................................................................................................................................................ccccccccccc.......................qqqccddcccccccccccccccccccccccccccccccccccccccccccccc..............................................................................................................l..........................................................................................................................................................................................................cccccccccccd......................qqqccddcccccccccccccccccccccccccccccccccccccccccccccc..............................................................................................................l..........................................................................................................................................................................................................ccccccccccccd.....................qqqccdd............................................................................................................................................................l..........................................................................................................................................................................................................cccccccccccccd....................qqqccdd............................................................................................................................................................l..........................................................................................................................................................................................................ccccccccccccccd...................qqqccdd............................................................................................................................................................l..........................................................................................................................................................................................................cccccccccccccccd..................qqqcc..............................................................................................................................................................l..........................................................................................................................................................................................................ccccccccccccccccd.................qqqcc..............................................................................................................................................................l..........................................................................................................................................................................................................ccccccccccccccccc.................qqrrr..............................................................................................................................................................l..........................................................................................................................................................................................................ccccccccccccccccc.................qrrrr..............................................................................................................................................................l..........................................................................................................................................................................................................ccccccccccccccccc.................qrrrr..............................................................................................................................................................l..........................................................................................................................................................................................................ccccccccccccccccc.................qrrrr..............................................................................................................................................................l..........................................................................................................................................................................................................ccccccccccccccccc.................qrrrr..............................................................................................................................................................l..........................................................................................................................................................................................................cccccccccccccccccdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd..............................................................................................................l..........................................................................................................................................................................................................ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc..............................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................l...............................................................................................................................................................................................................................................................................................................................................................................................................z0.62;0.85;ice.png;#00000000;#dee9ff;#ccce7c;#8fdada;;;;;;;;#aa9f11;;;#81790c;#413003;#123551;");
				break; //questo diventera' il case 8

			case 3: stringToLevel("tttttttttttttttttttttttttttttttttttl..................................l.aaa.bbb.ccc.dd..eee.fff.gggg.h.h.l.a.a.b.b.c...d.d.e...f...g....h.h.l.aaa.bb..c.P.d.d.eee.fff.g.gg.hhh.l.a.a.b.b.c...d.d.e...f...g..g.h.h.l.a.a.bbb.ccc.dd..eee.f...ggg..h.h.l..................................l..................................l...aaaaaaaaaaaaaaaaaaaaaaaaaaaa...l..................................l..................................l.i.jjjjj.k.k......................l.....j...k.k......................l.i...j...kk.......................l.i.j.j...k.k......................l.i.jjj...k.k......................l..................................l..................................l..................................l...m...m.n...n.ooo.ppp.qqqq.rrr...l...mm.mm.nn..n.o.o.p.p.q..q.r.r...l...m.m.m.n.n.n.o.o.ppp.q..q.rrr...l.X.m...m.n..nn.o.o.p...q.qq.rr....l...m...m.n...n.ooo.p...qqqq.r.r...l..................................z0.62;0.85;ice.png;#000000;#dee9ff;#ccce7c;#8fdada;#d7dc8f;;;;;;;#aa9f11;;;#81790c;#413003;#123551;");
				break;
										
			default:
				alert("Errore nel caricamento del livello - carico il level 1")
				lvlNumber=1;
				leggiLivelloDaFile();
		}
		return
	}

	function stringToLevel(lvlString){			
		level = []; //azzera level
		entity = []; //azzera entity
		var foreground = []; //crea un vettore tipo level per i blocchi di foreground
		var background = []; //crea un vettore tipo level per i blocchi di background
		var widthTot=0;
		var heightTot=1;
		for (i = 0; i < lvlString.length; i++) { //ciclo la stringa livello per trasformarlo da stringa a livello vero
			switch (lvlString[i]){
				case 'X'://posizione iniziale del player
					level['xStartingPos'] = (i%widthTot)*20;
					level['yStartingPos'] = (heightTot-2)*20;
					if(lvlString[i-1]=='p' || lvlString[i-1]=='q' || lvlString[i-1]=='r' ){blockBackground(lvlString[i-1]);} //se il blocco prima era un background lo carica sotto il player
					break;

				case 't': // t Ã¨ il top floor/ceiling
					widthTot++;
					break;
					
				case 'l': // l Ã¨ il left floor
					heightTot++;
					break;
        
        case 'w': // w funziona come left floor ma indica anche il water level
					heightTot++;
          level['waterLevel'] = ((heightTot-1)*20)+7; //setta il waterlevel
					break;

				case '.': // . Ã¨ vuoto/aria
					break;
              
        //ora le entita' (lettere maiuscole)
        case 'P': // P indica un pipistrello
        	var pipistrello = new newPipistrello();
         	pipistrello.x= (i%widthTot)*20;
        	pipistrello.y= (heightTot-1)*20+10;
					entity.push(pipistrello);
					if(lvlString[i-1]=='p' || lvlString[i-1]=='q' || lvlString[i-1]=='r' ){leggiBlocco(background,lvlString[i-1]);} //se il blocco prima era un background lo carica sotto la entita' letta
					break;
          
        case 'S': //S sono le spike (le spine che instaKillano)
          var spike= new newSpike();
          spike.x= (i%widthTot)*20;
        	spike.y= (heightTot-1)*20; 
					entity.push(spike);
          break;  							

				//i blocchi
				case 'a': case 'b': case 'c': case 'd': case 'e': case 'f': case 'g': case 'h': case 'i': case 'j': case 'k': 
					// le lettere dalla a alla k indicano un blocco da 20px*20px di colori diversi
					leggiBlocco(level,lvlString[i]);
					break;

				case 'm': case 'n': case 'o'://foreground
					leggiBlocco(foreground,lvlString[i]);
					break;

				case 'p': case 'q': case 'r'://background 
					leggiBlocco(background,lvlString[i]);
					break;	
											
				case 'z': // 'z' indica la fine del livello. Da qui in poi non sto leggendo piu blocchi e entita' ma le caratteristiche del livello come gravita', posizione iniziale del player e colore dei blocchi del livello
					widthTot++;
					heightTot++;
					level['gravity'] = readNumber();
					level['friction'] = readNumber();
          			level['gravityWater'] = level.gravity*4/7;
          			level['frictionWater'] = level.friction*9/10;
					level['backGroundImg'] = readBackground();
					blocksColors(level,11);//this will push color[] to level, it will contain the blocks colors
					blocksColors(foreground,3);
					blocksColors(background,3);
					level['foreground'] = foreground;
					level['background'] = background;
					break;
			}//fine dello switch case															
		}//fine del for
					        
		//imposto la grandezza del livello e lo confronto con la grandezza del canvas
		level['maxWidth'] = widthTot*20;
		level['maxHeight'] = heightTot*20;
        if (level.maxWidth < canvas.width){ //controlla che il livello non sia piu piccolo del canvas, che se no si bugga tutto - le x
           		canvasWidth=level.maxWidth;
        }else{
           		canvasWidth=canvas.width;
        }
        if (level.maxHeight < canvas.height){ //controlla che il livello non sia piu piccolo del canvas, che se no si bugga tutto - le y
           		canvasHeight=level.maxHeight;
        }else{
           		canvasHeight=canvas.height;
        }     
		//imposto i colori dei blocchi in base a quello che ho letto
		for(i=0; i<level.length;i++){
			switch(level[i].lettera){
				case 'a': level[i].color=level.color[0]; break;
				case 'b': level[i].color=level.color[1]; break;
				case 'c': level[i].color=level.color[2]; break;
				case 'd': level[i].color=level.color[3]; break;
				case 'e': level[i].color=level.color[4]; break;
				case 'f': level[i].color=level.color[5]; break;
				case 'g': level[i].color=level.color[6]; break;
				case 'h': level[i].color=level.color[7]; break;
				case 'i': level[i].color=level.color[8]; break;
				case 'j': level[i].color=level.color[9]; break;
				case 'k': level[i].color=level.color[10]; break;
			}
		}
		for(i=0; i<level.foreground.length;i++){
			switch(level.foreground[i].lettera){
				case 'm': level.foreground[i].color=level.foreground.color[0]; break;
				case 'n': level.foreground[i].color=level.foreground.color[1]; break;
				case 'o': level.foreground[i].color=level.foreground.color[2]; break;
			}
		}
		for(i=0; i<level.background.length;i++){
			switch(level.background[i].lettera){
				case 'p': level.background[i].color=level.background.color[0]; break;
				case 'q': level.background[i].color=level.background.color[1]; break;
				case 'r': level.background[i].color=level.background.color[2]; break;
			}
		}				
    //ora inizializzo i bordi - ho schiacciato il codice perche' occupava righe inutili. e' molto simile al prototipo di blocco    
		var ground = {x: 0, width: level.maxWidth, height: (20)+1, color: level.color[0]};  ground['y']=level.maxHeight-ground.height;
    	var ceiling = {x: 0, y: 0, width: level.maxWidth, height: (20)+1, color: level.color[0]};        	            
    	var leftWall = {x: 0, y: 0, width: (20)+1, height: level.maxHeight, color: level.color[0]};
    	var rightWall = {y: 0, width: (20)+1, height: level.maxHeight, color: level.color[0]}; rightWall['x']= level.maxWidth-rightWall.width;	            				
		level.push(ground, ceiling, leftWall, rightWall); //this pushes all of the static objects into the level				   

    // ora definisco le funzioni interne di stringToLevel()
		function readNumber(){//compone i vari caratteri di una stringa in numero. Esempio traduce "10.91;" in numeroLetto=10.91
			var numeroLetto=0;
			var isDecimale=false;
			var esponente=0;
			for (i++ ; i < lvlString.length; i++) {
				if (lvlString[i] != ";"){
					if (lvlString[i]=='.' || lvlString[i]==','){ //determina se il numero che sto leggendo avra' delle cifre decimali
						isDecimale=true;
					}else{
						if(!isDecimale){
							numeroLetto=(numeroLetto*10)+Number(lvlString[i]);
						}else{
							esponente--;
							numeroLetto=numeroLetto+(Number(lvlString[i])*Math.pow(10,esponente))
						}
					}
				}else{
					break;
				}			
			}
			return numeroLetto;
		}
		function readBackground(){
			var immagineLetta="";
			if (i < lvlString.length){
				for (i++ ; i < lvlString.length; i++) {
					if (lvlString[i] != ";"){
						immagineLetta+=lvlString[i]
					}else{
						break;
					}
				}
			}
			if (immagineLetta!=""){
				return document.getElementById(immagineLetta);
			}else{
				return immagineLetta;
			}
		}
		function readColor(){
			var coloreLetto="";
			if (i < lvlString.length){
				for (i++ ; i < lvlString.length; i++) {
					if (lvlString[i] != ";"){
						coloreLetto+=lvlString[i]
					}else{
						break;
					}
				}
			}
			if (coloreLetto==""){
				return "#155261";
			}else{
				return coloreLetto;
			}						
		}
		function blocksColors(vettore,numeroDiLetture){
			var color = [];
			for (n=0; n<numeroDiLetture; n++){
				color[n]=readColor();	
			}
			vettore['color']=color;
		}
		function leggiBlocco(vettore,lettera){
			var blocco = new Blocco(i,widthTot,heightTot);
			for (n=1; ;n++){	//controllo che se le lettere dopo sono uguali a questo blocco. Se lo sono non sto a creare tanti blocchetti ma ne faccio solo uno piu' largo per ottimizzare
					if(lvlString[i+n]==lettera){
						blocco.width=blocco.width+(20);
					}else{
						i=i+n-1;
						break; //del for
					}
			}
			blocco.width=blocco.width+1;
			blocco['lettera'] = lettera;
			vettore.push(blocco);
		}				
		function Blocco(i,widthTot,heightTot) { //prototipo di blocco
           	this.x= (i%widthTot)*20;
            this.y= (heightTot-1)*20;
            this.width= 20;
      		  this.height= 20+1;
            this.color= '#155261';            													
		}					
	}//fine di stringToLevel()
      
      var entity = []; //create the entity array. Ogni entitÃ  deve avere: x, y, width, height e il metodo physics che determinerÃ  come si comporta l'entitÃ 
      //adesso inizio i prototipi delle entita'
      function newSparo() {//lo sparo creato dal player
        this.life= 1;
        this.type= "sparoDelPlayer";
        this.damage= 1;
        this.x= player.x;
        this.y= player.y+10;
        this.xv= 0;
        this.width= 20;
        this.height= 10;
        this.color= player.charge0color;
        this.speed= 3.9;
        this.facingRight= player.facingRight;
        this.perforation= false;
        this.hasPhysics=true;
        this.physics= function( xdisegnata, ydisegnata, indiceDiQuestaEntity){
          //movimento dello sparo
          if (this.facingRight){
            this.xv -= this.speed;
          }else{
            this.xv += this.speed;
          }
          this.xv *= level.friction;
          this.x += -this.xv;    
          //collisione dello sparo con level
          for (i=0; i<level.length;i++){
            if (collisionBetween(this,level[i])){
              this.life--;
            }
          }
          //collisione dello sparo con altre entita'
          for (i=0; i<entity.length;i++){
            if (!(i == indiceDiQuestaEntity)){
              if ( entity[i].life > 0 && !(this.type == entity[i].type)  && collisionBetween(this,entity[i]) ){	//controlla che l'entita da colpire sia viva, che non siano lo stesso proiettile e infine se c'Ã¨ una collisione
                entity[i].life-=this.damage;
                if (!(entity[i].life < 1 && this.perforation)){
                  this.life--;
                }
              }
            }
          }
        }
      }

      function newPipistrello() {//mostro pipistrello
        this.life= 1;
        this.type= "mostro";
        this.damage= 1;
        this.x= 0;
        this.y= 0;
        this.xv= 0;
        this.yv= 0;
        this.slope = 0;
        this.width= 30;
        this.height= 30;
        this.color= '#a400ff';
        this.speed= 0.5;
        this.hasPhysics=true;
        this.physics= function( xdisegnata, ydisegnata, indiceDiQuestaEntity){
          //movimento
          if (this.x < player.x-1){
            this.xv -= this.speed;
          }else if(this.x > player.x+player.width-1){
            this.xv += this.speed;
          }
          if (this.y < player.y+1){
            this.yv -= this.speed;
          }else{
            this.yv += this.speed;
          }
          this.xv *= level.friction;
          this.yv *= level.friction;
          this.x += -this.xv;
          this.y += -this.yv;   
          
          this.slope = 0;	//serve per i bordi tipo
          for(var i = 0; i < level.length; i++) {
            if(collisionBetween(this, level[i])) {
              if(this.slope != -8) {
                this.y -= 1;
                this.slope += 1;
              }
            }
          }
          // level collision
          for(var i = 0; i < level.length; i++) {
            if(collisionBetween(this, level[i])) {
              this.y += this.slope;
              this.x += this.xv*2;
              this.xv = 0;
            } 
            if(collisionBetween(this, level[i])) {
              this.y += this.yv*2;
              this.yv = 0;
            }   
          }
          //other entity mostro collision - e' un po buggata
          for(var i = 0; i < entity.length; i++) {
          	if (entity[i].life > 0 && entity[i].type=="mostro" && !(i==indiceDiQuestaEntity)){
            	if(collisionBetween(this, entity[i])) {
              		this.x += this.xv*1.95;
              		this.xv = 0;
					this.y += this.yv*1.95;
					this.yv = 0;
            	}  
            }
          }
          //collision col player
          if(collisionBetween(this, player)) {
        	this.xv = 0;
			this.yv = 0;		
          }            
        }              
      }
                  
      function newSpike() {//mostro pipistrello
        this.life= 9999999999;
        this.type= "ostacolo";
        this.damage= 9999999999;
        this.x= 0;
        this.y= 0;
        this.width= 20;
        this.height= 20;
        this.canSelfDraw=true;
        this.hasPhysics=false;
        this.color= '#bcbcbc';
        this.selfDraw= function( xdisegnata, ydisegnata, indiceDiQuestaEntity){
          //funzione per disegnare la spina
        	ctx.beginPath();
		      ctx.lineWidth = "1";
		      ctx.fillStyle = this.color;
		      ctx.moveTo(xdisegnata, ydisegnata+this.height);
		      ctx.lineTo(xdisegnata+this.width, ydisegnata+this.height);
          ctx.lineTo(xdisegnata+(this.width/2), ydisegnata-2);
          ctx.lineTo(xdisegnata, ydisegnata+this.height);
		      ctx.fill();
        }              
      }      
      			
  //start the engine
  window.onload = start;
            
  //this function is called at the start
	function start() {
    var player = new Player(); //creo il player
    update();
	}
	
  function nuovoLivello(){	//azzera i dati del player e carica un nuovo livello (da stringa e non da file...)
		player = new Player();
		leggiLivelloDaFile();
    	player.x = level.xStartingPos;
    	player.y = level.yStartingPos;
	}
                                
  function update() {//this function is called every frame
    requestAnimationFrame(update); //credo che sia la roba che crea il ciclo del gioco
    if (stageSelection){
      stageSelect();
    }else if (menuDiPausa){
      objMenuDiPausa.drawMenuDiPausa();
    }else if(nelMenuOpzioni){
      objMenuOpzioni.drawMenuOpzioni();
    }else if(nelMenuPrincipale){
      objMenuPrincipale.drawMenuPrincipale(true);
    }else if (nelleOpzioniStageSelect){
      objMenuOpzioniStageSelect.drawMenu(); 
    }else if (nelMenuCaricaPartita){
      objMenuCaricaPartita.drawMenu();
    }else{
      disegnaSchermoDiGioco(true); //ATTENZIONE: se le viene passato true oltre a disegnare le entita' calcola anche le lore physics
      playerPhysics(player, level); //chiama la funzione physics del player
    }
  }
      
      function disegnaSchermoDiGioco(doEntityPhysics){
          ctx.clearRect(0, 0, canvas.width, canvas.height);	//pulisci tutto il canvas
          drawBackgroundImage();
          drawLvl(level.background);//disegna i blocchi non materiali che colorano lo sfondo (passa false come isDrawingWater - non disegna l'acqua)
          drawLvl(level);//disegna i blocchi fisici del livello (passa false come isDrawingWater - non disegna l'acqua)
          drawHUD(); //if you move drawHUD() under playerPhysics() the HUD will always be drawn on top of everything, but i like it this way. Entities and the player are more important then the hud lol
          drawEntity(doEntityPhysics); //in questa funzione viene chiamata anche il metodo entity[i].physics per le entitÃ  che vengono disegnate su schermo (le uniche che carico)
          drawPlayer(); //disegna il player
          drawLvl(level.foreground);//disegna i blocchi non materiali che stanno sopra tutto il resto (effetto grafico) e il waterlevel (passa true a isDrawingWater)
          drawWater();
      }

      function xDisegnata(){
        if (player.x+(player.width/2) < canvasWidth/2) {	//se la x del player Ã¨ minore di mezzo canvas la tiene com'Ã¨
          xdisegnata=player.x;
        }else{
          if (player.x+(player.width/2) > level.maxWidth-canvasWidth/2){ //altrimenti controlla: se Ã¨ in mezzo al livello disegna il player al centro del canvas, altrimenti lo lascia scorrere dal centro verso la fine
              xdisegnata=canvasWidth-level.maxWidth+player.x;
          }else{
              xdisegnata=canvasWidth/2-(player.width/2);	
          }
        }
        return xdisegnata;	
	  }
	  function yDisegnata(){
       if (player.y < canvasHeight/2) {	//se la y del player Ã¨ minore di mezzo canvas la tiene com'Ã¨
           ydisegnata=player.y;
        }else{
            if (player.y > level.maxHeight-canvasHeight/2){ //altrimenti controlla: se Ã¨ in mezzo al livello disegna il player al centro del canvas, altrimenti lo lascia scorrere dal centro verso la fine
              ydisegnata=canvasHeight-level.maxHeight+player.y;
            }else{
              ydisegnata=canvasHeight/2;	
            }
        }
        return ydisegnata;
	  }
            
      function drawPlayer() {
        var xdisegnata=xDisegnata(); //mi serve per semplificare le scritture dopo, praticamente gestisce la visuale sull asse x
        var ydisegnata=yDisegnata(); //mi serve per semplificare le scritture dopo, praticamente gestisce la visuale sull'asse y  
        //ombre del dash
        if (player.speed>player.defaultspeed){
            if (player.xv < -10){
                ctx.fillStyle =player.color+'45';//aggiunge la trasparenza
                ctx.fillRect(xdisegnata-50, ydisegnata+3, player.width-3, player.height-6);
                ctx.fillStyle =player.color+'90';
                ctx.fillRect(xdisegnata-26, ydisegnata+1, player.width-1, player.height-2);
            }else if (player.xv > 10){
               ctx.fillStyle =player.color+'45';
               ctx.fillRect(xdisegnata+50+3, ydisegnata+3, player.width-3, player.height-6);
               ctx.fillStyle =player.color+'90';
               ctx.fillRect(xdisegnata+26+1, ydisegnata+1, player.width-1, player.height-2);
            }
        }
		//ora disegna effettivamente il player
        ctx.fillStyle = player.color;
        ctx.fillRect(xdisegnata, ydisegnata, player.width, player.height);
      }

	function drawBackgroundImage(){//disegna immagine di sfondo
        if(level.backGroundImg != "" && level.backGroundImg != null ){//se esiste disegna lo sfondo
        	ctx.drawImage(level.backGroundImg, 0, 0, canvasWidth,canvasHeight);
        }
	}
  
  function drawWater(){  //disegna l'acqua
      ctx.fillStyle = player.defaultColor + "50";
      var ydisegnata=0
      if (player.y < canvasHeight/2){
        ydisegnata=level.waterLevel;
      }else{
        if (player.y > level.maxHeight-canvasHeight/2){
        ydisegnata=level.waterLevel-level.maxHeight+canvasHeight;
        }else{
          ydisegnata=level.waterLevel-player.y+canvasHeight/2;
        }
      }
      ctx.fillRect(0, ydisegnata, canvasWidth, canvasHeight);        
  }
	          
      //this function draws the level (usata anche per level.foreground e level.background - basta che sia un arrey di oggetti blocco)
      function drawLvl(lvl) {
        for (var i = 0; i < lvl.length; i++) {
          ctx.fillStyle = lvl[i].color;
          //variabili per disegnare il livello rispetto alla posizione di x (rispetto ai bordi del canvas) - visuale
          var xdisegnata=0
          if (player.x+(player.width/2) < canvasWidth/2){
            xdisegnata=lvl[i].x;
          }else{
            if (player.x+(player.width/2) > level.maxWidth-canvasWidth/2){
              xdisegnata=lvl[i].x-level.maxWidth+canvasWidth;
            }else{
              xdisegnata=lvl[i].x-player.x-(player.width/2)+canvasWidth/2;
            }
          }
		  var ydisegnata=0
          if (player.y < canvasHeight/2){
            ydisegnata=lvl[i].y;
          }else{
            if (player.y > level.maxHeight-canvasHeight/2){
              ydisegnata=lvl[i].y-level.maxHeight+canvasHeight;
            }else{
              ydisegnata=lvl[i].y-player.y+canvasHeight/2;
            }
          }
          //ora disegno il livello[i]                    
          ctx.fillRect(xdisegnata, ydisegnata, lvl[i].width, lvl[i].height);
        }
      }

      function drawHUD(){
      	ctx.fillStyle = '#9e9e9e';
		ctx.fillRect(8, 8, player.lifeMax*6+39, 29);
		ctx.fillStyle = '#3d3b3b';
		ctx.fillRect(10, 10, player.lifeMax*6+40, 30);		
		ctx.beginPath();//ora inizio a disegnare la x che sara' del colore del player attivo
		ctx.lineWidth = "7";
		ctx.strokeStyle = player.color;
		ctx.moveTo(15, 15);
		ctx.lineTo(35, 35);
		ctx.stroke(); // Disegna la prima meta'della X
		ctx.moveTo(35, 15);
		ctx.lineTo(15, 35);
		ctx.stroke(); // Disegna la seconda meta'della X
				
		for (i=0; i < player.lifeMax; i++) { //disegno le barre della vita
			if (i < player.life){
				ctx.fillStyle = player.charge0color;
			}else{
				ctx.fillStyle = '#797979';
			}
			ctx.fillRect(i*6+43, 15, 5, 20);
		}
      }
      
      function drawEntity(doEntityPhysics){   //disegna le entitÃ  a schermo e chiama la entity[i].physics
        for (var i = 0; i < entity.length; i++) {
          if (entity[i].life > 0){ //calcola la entita solo se la sua vita Ã¨ maggiore di zero
            ctx.fillStyle = entity[i].color;
            //variabili per disegnare il livello rispetto alla posizione di x (rispetto ai bordi del canvas) - visuale
            var xdisegnata=0;
            if (player.x+(player.width/2) < canvasWidth/2){
              xdisegnata=entity[i].x;
            }else{
              if (player.x+(player.width/2) > level.maxWidth-canvasWidth/2){
                xdisegnata=entity[i].x-level.maxWidth+canvasWidth;
              }else{
                xdisegnata=entity[i].x-player.x-(player.width/2)+canvasWidth/2;
              }
            }
			var ydisegnata=0;
            if (player.y < canvasHeight/2){
              ydisegnata=entity[i].y;
            }else{
              if (player.y > level.maxHeight-canvasHeight/2){
                ydisegnata=entity[i].y-level.maxHeight+canvasHeight;
              }else{
                ydisegnata=entity[i].y-player.y+canvasHeight/2;
              }
            }
            //ora disegno l'entita e chiamo physics se e' dentro il canvas disegnato+unQuartoDiCanvas (questa roba non si applica se Ã¨ uno sparo del player - se no si bugga tutto)                    
            if ( (xdisegnata > (-canvasWidth/8) && xdisegnata < (canvasWidth+(canvasWidth/8))) && (ydisegnata > (-canvasHeight/8) && ydisegnata < (canvasHeight+(canvasHeight/8))) || entity[i].type=="sparoDelPlayer") { //questo if fa i controlli spiegati sopra 
              if(entity[i].canSelfDraw){
                  entity[i].selfDraw(xdisegnata,ydisegnata, i);
              }else{
                  ctx.fillRect(xdisegnata, ydisegnata, entity[i].width, entity[i].height);
              }
              if(doEntityPhysics && entity[i].hasPhysics){entity[i].physics(xdisegnata,ydisegnata, i);}
            }
          }
        }
      }
            
      
      function playerPhysics(p1, lvl) {//this function handles the platformer physics - in realta' solo del player
      var gravityApplicata = 0; var frizioneApplicata = 0;
        if (p1.y > level.waterLevel){  //determina se sei in acqua o no
            if (!p1.isInWater){
                p1.isInWater = true;
                p1.yv = 0;
            }
            gravityApplicata = level.gravityWater;
            frizioneApplicata = level.frictionWater;
        }else{
            p1.isInWater = false;
            gravityApplicata = level.gravity;
            frizioneApplicata = level.friction;            
        }
                
        p1.yv += gravityApplicata;//get level gravity
        p1.y += p1.yv;//apply gravity
                        
        for(var i = 0; i < lvl.length; i++) {//y collision
          if(collisionBetween(p1, lvl[i])) {
            p1.y += -p1.yv;            
            if(keys[dashkey] && player.canMove) {//dash
              p1.speed=p1.defaultspeed*2.5;
            }else{
              p1.speed=player.defaultspeed;
            }            
            if(keys[jumpkey] && player.canMove) {//jump
              if(!p1.giasaltato) {
                p1.yv = -p1.jumpheight;
                p1.giasaltato = true;
              } else {
                p1.yv = 0; 
              }
            } else {
              p1.yv = 0;
              p1.giasaltato = false;
            }
          }	
        }        
                       
        if(keys[destrakey] && player.canMove) {//x movement
          p1.xv -= p1.speed;
          player.facingRight = true;
        }
        if(keys[sinistrakey] && player.canMove) {
          p1.xv += p1.speed;
          player.facingRight = false;
        }
        p1.xv *= frizioneApplicata;
        p1.x += -p1.xv;
                
        if(keys[sparokey] && player.canMove) {//shooting
          if(!player.giasparato){
            var sparo = new newSparo();
            entity.push(sparo);
            player.giasparato = true;
          }else{
            player.carica++;//disegna i pallini del colore della carica intorno al player
            if (player.carica > 80){ //level 2 charge
              var xdisegnata=xDisegnata(); var ydisegnata=yDisegnata();
              var xrandom=((-player.width/4)+Math.floor(Math.random() * (player.width/2)))*3; var yrandom=((-player.height/4)+Math.floor(Math.random() * (player.height/2)))*2;
              ctx.fillStyle = player.charge0color;
              ctx.fillRect(xdisegnata+(player.width/2)+xrandom, ydisegnata+(player.height/2)+yrandom, 8, 8);
            }else if(player.carica > 25){ //level 1 charge
              var xdisegnata=xDisegnata(); var ydisegnata=yDisegnata();
              var xrandom=((-player.width/4)+Math.floor(Math.random() * (player.width/2)))*3; var yrandom=((-player.height/4)+Math.floor(Math.random() * (player.height/2)))*2;
              ctx.fillStyle = player.charge1color;
              ctx.fillRect(xdisegnata+(player.width/2)+xrandom, ydisegnata+(player.height/2)+yrandom, 8, 8);
            }   
          }
        }else{
          if (player.giasparato){
            if (player.carica > 80){
            	var sparo = new newSparo();
                sparo.width= 50;
                sparo.height= 25;
                if (!sparo.facingRight){
                	sparo.x= sparo.x-player.width;
                }
                sparo.y= player.y+5;
                sparo.color= player.charge2color;
                sparo.perforation=true;
                entity.push(sparo);
            }else if (player.carica > 25){
            	var sparo = new newSparo();
            	sparo.width= 35;
            	sparo.height= 15;
            	sparo.color= player.charge1color;
            	entity.push(sparo);
            }
            player.color=player.defaultColor ;
            player.carica=0;
            player.giasparato=false;
          }
        }
                
        p1.slope = 0;	//serve per i bordi tipo - serve anche per le x collision
        for(var i = 0; i < lvl.length; i++) {
          if(collisionBetween(p1, lvl[i])) {
            if(p1.slope != -8) {
              p1.y -= 1;
              p1.slope += 1;
            }
          }
        }

       	for(var i = 0; i < lvl.length; i++) {//x collision
          if(collisionBetween(p1, lvl[i])) {
            p1.y += p1.slope;
            p1.x -= -p1.xv;
            if(keys[dashkey] && player.canMove) {//wall dash
              p1.speed=p1.defaultspeed*2.5;
            }else{
              p1.speed=player.defaultspeed;
            }           
            if(keys[jumpkey] && player.canMove) {//wall jumping
              if(!p1.giasaltato) { 
                p1.yv = -p1.jumpheight + 1;
                if(p1.xv > 0) {
                  p1.xv = -10;
                } else {
                  p1.xv = 10;
                }
                p1.giasaltato = true;
              } else {
                p1.xv = 0;
              }
            } else {
              p1.xv = 0;
              p1.giasaltato = false;
            }   
          }
        }
      
        if (player.invulnerability < 1){//entity collison
		for(var i = 0; i < entity.length; i++) {
			if(entity[i].life > 0 && !(entity[i].type=="sparoDelPlayer")) {
              			if(collisionBetween(player, entity[i])) {
				    player.color=player.damagedColor;
				    player.life=player.life-entity[i].damage;
				    player.invulnerability=40;
				    player.canMove=false;
				    break;
            			}
        		}
        	}
       	}else{
       		player.invulnerability--;
       		if (player.invulnerability < 30){
       			player.color=player.defaultColor+'80';
       		}
       		if (player.invulnerability < 20){
       			player.canMove=true;
       		}       		
       		if (player.invulnerability < 5){
       			player.color=player.defaultColor;    			
       		}	
       	}
      	
      	if(player.life<1){//gameover
      		disegnaSchermoDiGioco(false);
      		alert("Gameover");
      		stageSelection=true;
      	}
        
        if(keys[startkey]) {//menu di pausa
          if (!tastoGiaSchiacciato && !(player.life<1)){//ho dovuto fare il check della vita se no era possibile far aprire il menu dopo essere morti se si schiacciava INVIO nello stesso frame in cui si moriva
            objMenuDiPausa=new newMenuDiPausa();
            disegnaSchermoDiGioco(false);
            tastoGiaSchiacciato=true;
            menuDiPausa=true;
          }
        }else if(tastoGiaSchiacciato && !keys[startkey]){
          tastoGiaSchiacciato=false;
        }
         
      } //fine della funzione playerPhysics - se riesco la faccio diventare un metodo di player invece che una funzione sestante
          
      function collisionBetween(p1, lvl) {//this function detects the collision between the two given objects - la uso anche con le entitÃ  lol
        if (lvl.x < p1.x + p1.width 
        && lvl.x + lvl.width > p1.x 
        && lvl.y < p1.y + p1.height 
        && lvl.y + lvl.height > p1.y) {
                return true;
        } else {
                return false;
        } 
      }     

      function stageSelect(){
          var img = document.getElementById("stageselect");
          ctx.drawImage(img, 0, 0, canvasWidth,canvasHeight);
            //leggo che tasto viene schiacciato. Con invio o dash si inizia a giocare, con le freccie si cicla tra i livelli
            if ((keys[dashkey]) && !tastoGiaSchiacciato){//avvia il livello selezionato
              stageSelection=false;
              nuovoLivello();
            }
            if ((keys[startkey]) && !tastoGiaSchiacciato){//apre le opzioni di scelta livello
              stageSelection=false;
              objMenuOpzioniStageSelect=new newMenuOpzioniStageSelect();
              tastoGiaSchiacciato=true;
              nelleOpzioniStageSelect=true;
            }                                       
            if (keys[sukey] && !tastoGiaSchiacciato){
             if(lvlNumber==4){lvlNumber=8; }else if(lvlNumber==5){lvlNumber=3;}else if(lvlNumber==6){lvlNumber=1;}else if(lvlNumber==7){lvlNumber=4;}else if(lvlNumber==3){lvlNumber=1;}else if(lvlNumber==2){lvlNumber=8;}             
            }
            if (keys[giukey] && !tastoGiaSchiacciato){
             if(lvlNumber==1){lvlNumber=6;}else if(lvlNumber==5){lvlNumber=6;}else if(lvlNumber==3){lvlNumber=5;}else if(lvlNumber==8){lvlNumber=2;}else if(lvlNumber==7){lvlNumber=2;}else if(lvlNumber==4){lvlNumber=7;}                      
            }
            if (keys[sinistrakey] && !tastoGiaSchiacciato){
             if(lvlNumber==2){lvlNumber=6;}else if(lvlNumber==7){lvlNumber=5;}else if(lvlNumber==4){lvlNumber=3;}else if(lvlNumber==8){lvlNumber=1;}else if(lvlNumber==1){lvlNumber=3;}else if(lvlNumber==6){lvlNumber=5;}                 
            }
            if (keys[destrakey] && !tastoGiaSchiacciato){
             if(lvlNumber==1){lvlNumber=8;}else if(lvlNumber==2){lvlNumber=7;}else if(lvlNumber==5){lvlNumber=7;}else if(lvlNumber==6){lvlNumber=2;}else if(lvlNumber==3){lvlNumber=4;}else if(lvlNumber==8){lvlNumber=4;} 
            }            
            if(keys[destrakey] || keys[sinistrakey] || keys[giukey] || keys[sukey] || keys[startkey] || keys[dashkey]){ //serve per evitare che in un attimo ti sposti di un bordello di livelli 
                   tastoGiaSchiacciato=true;
            }else{ tastoGiaSchiacciato=false;}
            
            //ora disegno un quadrato intorno al livello selezionato
            if (levelDefeated[lvlNumber-1]){
                 ctx.fillStyle = "#b7a4a6";    //se il livello selezionato e' stato battuto fa il quadrato rosso
            }else{
                ctx.fillStyle = "#ffc000";    //se il livello selezionato non e' stato battuto fa il quadrato giallo
            }            
            switch (lvlNumber){
              case 1:ctx.fillRect(137, 10, 135, 10);ctx.fillRect(137, 10, 10, 135);ctx.fillRect(137, 135, 135, 10);ctx.fillRect(263, 10, 10, 135);break;                
              case 8:ctx.fillRect(265, 10, 135, 10);ctx.fillRect(265, 10, 10, 135);ctx.fillRect(265, 135, 135, 10);ctx.fillRect(391, 10, 10, 135);break;                
              case 4:ctx.fillRect(395, 140, 135, 10);ctx.fillRect(395, 140, 10, 135);ctx.fillRect(395, 265, 135, 10);ctx.fillRect(521, 140, 10, 135);break;                
              case 7:ctx.fillRect(395, 270, 135, 10);ctx.fillRect(395, 270, 10, 135);ctx.fillRect(395, 395, 135, 10);ctx.fillRect(521, 270, 10, 135);break;                
              case 2:ctx.fillRect(265, 396, 135, 10);ctx.fillRect(265, 396, 10, 135);ctx.fillRect(265, 521, 135, 10);ctx.fillRect(391, 396, 10, 135);break;                
              case 6:ctx.fillRect(137, 396, 135, 10);ctx.fillRect(137, 396, 10, 135);ctx.fillRect(137, 521, 135, 10);ctx.fillRect(263, 396, 10, 135);break;                
              case 5:ctx.fillRect(9, 270, 135, 10);ctx.fillRect(9, 270, 10, 135);ctx.fillRect(9, 395, 135, 10);ctx.fillRect(135, 270, 10, 135);break;                
              case 3:ctx.fillRect(9, 140, 135, 10);ctx.fillRect(9, 140, 10, 135);ctx.fillRect(9, 265, 135, 10);ctx.fillRect(135, 140, 10, 135);break;                                                                                                                
            }
      }

      function disegnaTestoConBordino(stringaDiTesto, xdisegnata, ydisegnata, coloreTesto, coloreBordino){
      	ctx.fillStyle = coloreBordino;
      	ctx.fillText(stringaDiTesto, xdisegnata+1, ydisegnata+1);
      	ctx.fillText(stringaDiTesto, xdisegnata+1, ydisegnata-1);
      	ctx.fillText(stringaDiTesto, xdisegnata-1, ydisegnata+1);
      	ctx.fillText(stringaDiTesto, xdisegnata-1, ydisegnata-1);
      	ctx.fillStyle = coloreTesto;
      	ctx.fillText(stringaDiTesto, xdisegnata, ydisegnata);
      }
      
      function newMenuDiPausa(){
        this.width=0;
        this.height=0;
        this.widthMax=canvasWidth-150;
        this.heightMax=canvasHeight-150;
        this.isOpen=false;
        this.isClosing=false;
        this.canInput=true;
        this.tornaStageSelection=false;
        this.indice=0;
        this.settore=0;
        this.usingSubtank=4; //4 vuol dire che non sto usando la subtank (da 0 a 3 e' l'indice della subtank usata)
        this.lastSubtankAcquired=4;//se rimane uguale a 4 vuol dire che non e' stata acquisita nessuna subtank
        this.drawMenuDiPausa = function (){
          ctx.textAlign = "left";
          ctx.font = "small-caps bold 20px Lucida Console"; //tipo di font per le scritte
          if (!this.isOpen && !this.isClosing){//animazione di apertura del menu + lettura subtank acquisite
            if (this.width < this.widthMax){this.width+=10;}
            if (this.height < this.heightMax){this.height+=15;}
            if (this.height > this.heightMax-1 && this.width > this.widthMax-1){//quando il menu e' tutto aperto:
            	this.isOpen=true;
            	for(var j=0; j<4; j++){//legge l'indice dell'ultima subtank acquisita
            		if(subtank[j].acquired){this.lastSubtankAcquired=j;}
            	}
            }
          }
          ctx.clearRect((canvasWidth/2)-this.width/2-15,(canvasHeight/2)-this.height/2-15, this.width+30, this.height+30);	//pulisci la parte dove viene mostrato il menu
          ctx.fillStyle = "#d2d2d2"; ctx.fillRect((canvasWidth/2)-this.width/2-15,(canvasHeight/2)-this.height/2-15, this.width+30, this.height+30); //disegna il bordo grigio 
          ctx.fillStyle = "#52b58b"; ctx.fillRect((canvasWidth/2)-this.width/2,(canvasHeight/2)-this.height/2, this.width, this.height); //disegna lo sfondo verde
          if (this.isOpen){ //qui dentro devo mostrare il testo del menu e gestire cosa succede quando schiaccio i tasti
              ctx.fillStyle = "#d2d2d2"; 
              ctx.fillRect((canvasWidth/2)+this.width/2-250,(canvasHeight/2)-this.height/2, 15, this.height); ctx.fillRect((canvasWidth/2)+this.width/2-250,(canvasHeight/2), 250, 15); //disegna i settori del menu
              for(i=0;i<9;i++){ //disegna le scritte del settore 0 (xbuster e poteri di X)
                var xdisegnata = (canvasWidth/2)-this.width/2+13;
                var ydisegnata = ((canvasHeight/2)-this.height/2)+(44*i)-7;
                if (i-1 < 0){ //scrive xbuster
                	disegnaTestoConBordino("X Buster", xdisegnata, ydisegnata+33,"#d2d2d2","#000000");
                }else{
                  if(levelDefeated[i-1]){//disegna i poteri e le loro barre
                  	disegnaTestoConBordino(player.power[i-1].nome, xdisegnata, ydisegnata+21,player.power[i-1].color,"#000000");
                    for (j=0; j<player.power[i-1].usageMax; j++){
                      if(player.power[i-1].usage < j+1){ctx.fillStyle = '#a7a7a7'; }
                      ctx.fillRect(j*9+xdisegnata+2, ydisegnata+25, 8, 12);
                    }
                  }
                }
              }
              for(i=0;i<5;i++){//disegna le subtank
              	var xdisegnata=(canvasWidth/2)+this.width/2-250+15;
              	var ydisegnata=((canvasHeight/2)-this.height/2)+(40*i)-6;
                if (i < 1){ //scrive Subtanks
                	ctx.textAlign = "center";
                	disegnaTestoConBordino("Subtanks", xdisegnata+(250-15)/2, ydisegnata+30,"#d2d2d2","#000000");
                }else{ //disegna le barre delle subtanks
                	ctx.textAlign = "left";
                	if (subtank[i-1].acquired){
                		disegnaTestoConBordino("S", xdisegnata+15,ydisegnata+28,"#ffc000","#000000");
                    	for (j=0; j<subtank[i-1].lifeMax; j++){
                      		if(subtank[i-1].life < j+1){ctx.fillStyle = '#a7a7a7'; }
                      		ctx.fillRect(j*9+xdisegnata+39, ydisegnata+12, 8, 17);
                      	}	
                    }                	
                }              	
              }
              for(i=0;i<3;i++){//ora disegno la parte sotto le subtanks
              	ctx.textAlign = "left";
              	var xdisegnata=(canvasWidth/2)+this.width/2-250+15+10;
              	var ydisegnata=((canvasHeight/2)+15+((canvasHeight-this.height+30)/3*(i+1)))-1;
  				switch (i){
  					case 0:
  						disegnaTestoConBordino("resume game", xdisegnata+5,ydisegnata+7-((canvasHeight-this.height+30)/3)/2,"#d2d2d2","#000000");
  						break;
  
  					case 1:
  						disegnaTestoConBordino("options", xdisegnata+5,ydisegnata+7-((canvasHeight-this.height+30)/3)/2,"#d2d2d2","#000000");
  						break;
  
  					case 2:
  						disegnaTestoConBordino("return to the", xdisegnata+5,ydisegnata-2-((canvasHeight-this.height+30)/3)/2,"#d2d2d2","#000000");
  						disegnaTestoConBordino("level selection", xdisegnata+5,ydisegnata+15-((canvasHeight-this.height+30)/3)/2,"#d2d2d2","#000000");
  						break;												
  				}
			  }
                            
              if(this.settore == 0){//disegna i quadrati intorno alla scritta scelta - parte poteri
                ctx.fillStyle = "#ffc000";
                var xdisegnata = (canvasWidth/2)-this.width/2+13;
                var ydisegnata = ((canvasHeight/2)-this.height/2)+(44*this.indice)-7;
                if (this.indice==0){
                	ctx.fillRect((canvasWidth/2)-this.width/2, ydisegnata+5, (canvasWidth/2)+this.width/2-325, 8);
                	ctx.fillRect((canvasWidth/2)-this.width/2, ydisegnata+40, (canvasWidth/2)+this.width/2-325, 8);
                	ctx.fillRect((canvasWidth/2)-this.width/2, ydisegnata+5, 8, 40);
                	ctx.fillRect((canvasWidth/2)+this.width/2-258, ydisegnata+5, 8, 40);
                }else{
                	ctx.fillRect((canvasWidth/2)-this.width/2, ydisegnata-5, (canvasWidth/2)+this.width/2-325, 8);
                	ctx.fillRect((canvasWidth/2)-this.width/2, ydisegnata+42, (canvasWidth/2)+this.width/2-325, 8);
                	ctx.fillRect((canvasWidth/2)-this.width/2, ydisegnata-5, 8, 51);
                	ctx.fillRect((canvasWidth/2)+this.width/2-258, ydisegnata-5, 8, 51);
                }
              }else if(this.settore == 1){//disegna i quadrati intorno alla scritta scelta - parte subtank e sotto subtank
              	if (this.indice < 4){//disegna quadrati del settore subtank
              		ctx.fillStyle = "#ffc000";
              		var xdisegnata=(canvasWidth/2)+this.width/2-250+15;
              		var ydisegnata=((canvasHeight/2)-this.height/2)+(40*(this.indice+1))-6;
                	ctx.fillRect(xdisegnata, ydisegnata, 235, 9);
                	ctx.fillRect(xdisegnata, ydisegnata+32, 235, 9);
                	ctx.fillRect(xdisegnata, ydisegnata, 9, 40);
                	ctx.fillRect(xdisegnata+235-9, ydisegnata, 9, 40);              	
                }else{//disegna quadrati della parte sotto le subtank
                	ctx.fillStyle = "#ffc000";
					var xdisegnata=(canvasWidth/2)+this.width/2-250+15;
              		var ydisegnata=((canvasHeight/2)+15+((canvasHeight-this.height+30)/3*(this.indice-4)))-1;
                	ctx.fillRect(xdisegnata, ydisegnata, 235, 9);
                	ctx.fillRect(xdisegnata, ydisegnata+((canvasHeight-this.height+30)/3-8), 235, 9);
                	ctx.fillRect(xdisegnata, ydisegnata, 9, ((canvasHeight-this.height+30)/3-8));
                	ctx.fillRect(xdisegnata+235-9, ydisegnata, 9, ((canvasHeight-this.height+30)/3-8));              		
                }
              }
              if(this.usingSubtank < 4){//se il menu e' impostato nell'usare una subtank:
              	if(subtank[this.usingSubtank].life > 0){
              		subtank[this.usingSubtank].life-=0.5;
              		if(player.life<player.lifeMax){
              			player.life+=0.5; drawHUD();
              		}
              	}else{//esce dallo stato di depleting della subtank
              		this.usingSubtank=4;
              		this.canInput=true;
              	}
              }              
             if(this.canInput){//cosa succede quando vengono schiacciati i tasti (solo se this e' in lettura di input - this.canInput)
              if((keys[startkey] || keys[dashkey]) && !tastoGiaSchiacciato) {//attiva la voce selezionata
              	if (this.settore==0){ // se e' nella sezione poteri, attiva il potere selezionato e chiude il menu(per il momento chiude solo il menu)
					this.isClosing=true;
                	this.isOpen=false;
              	}else{ //se e' nell'altro settore fa delle cose in base all'indice
              		if(this.indice<4){//hai scelto una subtank
              			if(player.life<player.lifeMax){
              				this.usingSubtank=this.indice;
              				this.canInput=false;
              			}
              		}else{
              			switch (this.indice){
              				case 4://ritorna al gioco - chiude il menu
								this.isClosing=true;
                				this.isOpen=false;              				
                				break;
                			case 5://opzioni - non l'ho ancora implementato
            					objMenuOpzioni=new newMenuOpzioni(this.width, this.height, true);
            					tastoGiaSchiacciato=true;
            					menuDiPausa=false;
            					nelMenuOpzioni=true;                				
                				break;
                			case 6://torna alla selezione del livello
								this.tornaStageSelection=true; lvlNumber=1;
								this.isClosing=true;
								this.isOpen=false;
                				break;
              			}
              		}
              	}
              }
              if(keys[jumpkey] && !tastoGiaSchiacciato) {//esci dal menu di pausa
                this.isClosing=true;
                this.isOpen=false;
              }              
              if(keys[giukey] && !tastoGiaSchiacciato) {
              	if (this.settore==0){//se sei nella parte a sinistra
                	for (i=1; i < 10; i++){
                  		if(levelDefeated[this.indice+i-1]){
                    		this.indice+=i;
                    		break;
                  		}else if(i == 9){ this.indice=0; break;}
                	}
                  if(this.indice==9){this.indice=0;}
                }else if (this.settore==1){//se sei nella parte a destra
                	if (this.indice<this.lastSubtankAcquired){//se sei nella parte delle subtank-1
                		for(var k=1; k<(4-this.indice); k++){
							if(subtank[this.indice+k].acquired){
								this.indice+=k;
								break;
							}
						}
                	}else if(this.indice==this.lastSubtankAcquired && this.lastSubtankAcquired!=4){//se hai selezionato l'ultima subtank disponibile e schiacci giu'
                		this.indice=4;
                	}else{//se sei nella parte sotto le subtank
                		if (this.indice<6){
                			this.indice++;
                		}
                	}
                }
              }
              if(keys[sukey] && !tastoGiaSchiacciato) {
              	if (this.settore==0){
                	if(this.indice == 0){ this.indice=9; }
                	for (i=1; i < this.indice+1; i++){
                  		if(levelDefeated[this.indice-i-1]){
                    		this.indice-=i;
                    		break;
                  		}else if(i == this.indice){ this.indice=0; break;}
                	}
                }else if (this.settore==1){//se sei nella parte a destra
                	if (this.indice<4){//se sei nella parte delle subtank
						if(this.indice>0){
							for(var k=1; k<this.indice+1;k++){
								if(subtank[this.indice-k].acquired){
									this.indice-=k;
									break;
								}
							}
						}
                	}else{
                		if (this.indice>4){//se sei nel menu tutto ok
                			this.indice--;
                		}else{//schiacci su e ti stai spostando nelle subtank - devo vedere che io ne possegga almeno una
							this.indice=this.lastSubtankAcquired;
                		}
                	}
                }                                
              }
              if(keys[destrakey] && !tastoGiaSchiacciato) {
				for (var j=0; j<4; j++){
					if(subtank[j].acquired){
						this.indice=j;
						break;
					}else{
						this.indice=4;
					}
				}
                this.settore=1;
              }
              if(keys[sinistrakey] && !tastoGiaSchiacciato) {
                this.indice=0;
                this.settore=0;
              }
              if(keys[startkey] || keys[sukey] || keys[giukey] || keys[sinistrakey] || keys[destrakey] || keys[dashkey] || keys[jumpkey]){
                tastoGiaSchiacciato=true;
              }else{
                tastoGiaSchiacciato=false;
              }
          }              
         }
          if(this.isClosing){//animazione di chiusura del menu + regolazione delle subtanks
              if (this.width > 0){this.width-=20;}
              if (this.height > 0){this.height-=20;}
              ctx.clearRect((canvasWidth/2)-this.width/2-15,(canvasHeight/2)-this.height/2-15, this.width+30, this.height+30);	//pulisci la parte dove viene mostrato il menu
              disegnaSchermoDiGioco(false);
              ctx.fillStyle = "#d2d2d2"; ctx.fillRect((canvasWidth/2)-this.width/2-15,(canvasHeight/2)-this.height/2-15, this.width+30, this.height+30); //disegna il bordo grigio 
              ctx.fillStyle = "#52b58b"; ctx.fillRect((canvasWidth/2)-this.width/2,(canvasHeight/2)-this.height/2, this.width, this.height); //disegna lo sfondo verde
              if (this.height-1 < 0 && this.width-1 < 0){//quando il menu e' tutto chiuso:
              	menuDiPausa=false;
              	if(this.tornaStageSelection){stageSelection=true;}
              	var sommaSubtank=0;//aggiusto la vita delle subtank (la metto tutta nelle prime subtank disponibili)
        				for (var j=0; j<4; j++){//azzero tutte le subtank e carico tutta la vita per ridistribuirla nel prossimo for
        					if (subtank[j].acquired){
        						sommaSubtank+=subtank[j].life;
        						subtank[j].life=0;
        					}
        				}
                if(sommaSubtank>0){//ridistribuisco la vita alle subtank dalla prima all'ultima
          				for (var j=0; j<4; j++){
                    if(subtank[j].life<subtank[j].lifeMax && subtank[j].acquired){
  			              if (sommaSubtank>(subtank[j].lifeMax-subtank[j].life)){
                        sommaSubtank-=(subtank[j].lifeMax-subtank[j].life);
                        subtank[j].life=subtank[j].lifeMax;
                      }else{
                        subtank[j].life+=sommaSubtank;
                        sommaSubtank=0;
                      }
            				}
                  }
                }
             }             
          }
        }     
      }//fine menu di pausa       
	
  function newMenuOpzioniStageSelect(){
	      this.isOpen=false;
        this.isClosing=false;
        this.apriLivello=false;
        this.confermaUscita=false;
        this.width=0;
        this.height=0;
        this.widthMax=canvasWidth-440;
        this.heightMax=canvasHeight-400;
        this.indice=0;
        this.indiceUscita=0;
        this.numeroDiVoci=3;
        this.staCambiandoTasto=false;
        this.drawMenu = function (){
          if (!this.isOpen && !this.isClosing){//animazione di apertura del menu
            if (this.width < this.widthMax){this.width+=10;}
            if (this.height < this.heightMax){this.height+=15;}
            if (this.height > this.heightMax-1 && this.width > this.widthMax-1){//quando il menu e' tutto aperto:
            	this.isOpen=true;
            }
          }
          ctx.clearRect((canvasWidth/2)-this.width/2-15,(canvasHeight/2)-this.height/2-15, this.width+30, this.height+30);	//pulisci la parte dove viene mostrato il menu
		      ctx.fillStyle = "#d2d2d2"; ctx.fillRect((canvasWidth/2)-this.width/2-15,(canvasHeight/2)-this.height/2-15, this.width+30, this.height+30); //disegna il bordo grigio 
          ctx.fillStyle = "#52b58b"; ctx.fillRect((canvasWidth/2)-this.width/2,(canvasHeight/2)-this.height/2, this.width, this.height); //disegna lo sfondo verde

          if(this.isOpen){ //quando il menu e' tutto aperto
            if (!this.confermaUscita){//se non e' attivo il conferma uscita - caso del menu normale
                ctx.font = "small-caps bold 20px Lucida Console"; //tipo di font per le scritte
                for(var i=0;i<this.numeroDiVoci;i++){//disegno tutte le scritte
                  var ydisegnata=6+((canvasHeight/2)-(this.height/2))+(((this.height)/this.numeroDiVoci)*i)+(this.height/(this.numeroDiVoci*2));
                  ctx.textAlign = "center";
          				switch (i){//scrive le scritte
          					case 0:
          						disegnaTestoConBordino("open the level selected", canvasWidth/2, ydisegnata,"#d2d2d2","#000000");
          						break;
          					case 1:
          						disegnaTestoConBordino("save game", canvasWidth/2, ydisegnata,"#d2d2d2","#000000");
          						break;
          					case 2:
          						disegnaTestoConBordino("back to the main menu", canvasWidth/2, ydisegnata,"#d2d2d2","#000000");
                      break;									
          				}
                  ctx.textAlign = "left"; //lo reimposto left se no si bugga tutto
          			}		
          			{//disegno il quadrato intorno all'opzione selezionata - uso le {} per ridurre lo scope di xdisegnata e ydisegnata
                        ctx.fillStyle = "#ffc000";
                      	var xdisegnata = (canvasWidth/2)-(this.width/2);
                      	var ydisegnata = (((canvasHeight/2)-(this.height/2))+(((this.height)/this.numeroDiVoci)*this.indice));
                      	ctx.fillRect(xdisegnata, ydisegnata, this.width, 9);
                      	ctx.fillRect(xdisegnata, ydisegnata-9+(this.height)/this.numeroDiVoci, this.width, 9);
                      	ctx.fillRect(xdisegnata, ydisegnata, 9, (this.height)/this.numeroDiVoci-8);
                      	ctx.fillRect(xdisegnata+this.width-9, ydisegnata, 9, (this.height)/this.numeroDiVoci-8);			
          			}
                //ora gestisco gli input
                if(keys[sukey] && !tastoGiaSchiacciato) {
        				  if(this.indice > 0){ this.indice--;
        				  }else{ this.indice=this.numeroDiVoci-1;}
                }
                if(keys[giukey] && !tastoGiaSchiacciato) {
        				    if(this.indice < this.numeroDiVoci-1){ this.indice++;
        				    }else{ this.indice=0;}
                }
                if((keys[dashkey] || keys[startkey]) && !tastoGiaSchiacciato) {
                  switch (this.indice){
                    case 0: //apri livello selezionato
                      this.apriLivello=true;
                      this.isClosing=true;
                      this.isOpen=false;
                      break;
                    case 1: //salva la partita
                      SalvaPartita();
                      break;
                    case 2: //chiedi conferma uscita
                      this.confermaUscita=true;
                      break;
                  }
                }                            			
                if(keys[jumpkey] && !tastoGiaSchiacciato) {//chiude il menu
                  this.isOpen=false;
                  this.isClosing=true;
                }
                if(keys[startkey] || keys[sukey] || keys[giukey] || keys[sinistrakey] || keys[destrakey] || keys[dashkey] || keys[jumpkey]){
                  tastoGiaSchiacciato=true;
                }else{
                  tastoGiaSchiacciato=false;
                }
            }else{ //se e' attivo il conferma uscita
                ctx.textAlign = "center"; ctx.font = "small-caps bold 20px Lucida Console"; //tipo di font per le scritte
                disegnaTestoConBordino("do you want to go back", (canvasWidth/2), ((canvasHeight/2)+15-this.heightMax/2),"#d2d2d2","#000000");
                disegnaTestoConBordino("to the main menu?", (canvasWidth/2), ((canvasHeight/2)+35-this.heightMax/2),"#d2d2d2","#000000");
                disegnaTestoConBordino("every progress not", (canvasWidth/2), ((canvasHeight/2)+55-this.heightMax/2),"#d2d2d2","#000000");
                disegnaTestoConBordino("saved will be lost", (canvasWidth/2), ((canvasHeight/2)+75-this.heightMax/2),"#d2d2d2","#000000");
                ctx.font = "small-caps bold 28px Lucida Console"; //tipo di font per le scritte
                for(var j=0;j<2;j++){//disegno tutte le scritte
                  ctx.textAlign = "center";
                  var ydisegnata=57+canvasHeight/2;
          				switch (j){//scrive le scritte
          					case 0:
                      var xdisegnata=(canvasWidth/2)-((this.width/4));
          						disegnaTestoConBordino("no", xdisegnata, ydisegnata,"#d2d2d2","#000000");
          						break;
          					case 1:
                      var xdisegnata=(canvasWidth/2)+((this.width/4));
          						disegnaTestoConBordino("yes", xdisegnata, ydisegnata,"#d2d2d2","#000000");
          						break;								
          				}
                  ctx.textAlign = "left"; //lo reimposto left se no si bugga tutto
          			}		
          			{//disegno il quadrato intorno all'opzione selezionata - uso le {} per ridurre lo scope di xdisegnata e ydisegnata
                        ctx.fillStyle = "#ffc000";
                        var ydisegnata = 25+canvasHeight/2;
                        switch (this.indiceUscita){
                          case 0: xdisegnata = (canvasWidth/2)-(this.width/2); break;
                          case 1: xdisegnata = (canvasWidth/2); break;
                        }
                      	ctx.fillRect(xdisegnata, ydisegnata, this.width/2, 9);
                      	ctx.fillRect(xdisegnata, ydisegnata-9+(this.height)/this.numeroDiVoci, this.width/2, 9);
                      	ctx.fillRect(xdisegnata, ydisegnata, 9, (this.height)/this.numeroDiVoci-8);
                      	ctx.fillRect(xdisegnata+(this.width/2)-9, ydisegnata, 9, (this.height)/this.numeroDiVoci-8);			
          			}
                //ora gestisco gli input
                if(keys[destrakey] && !tastoGiaSchiacciato) {
                    this.indiceUscita=1;
                }
                if(keys[sinistrakey] && !tastoGiaSchiacciato) {
                    this.indiceUscita=0;
                }
                if((keys[dashkey] || keys[startkey]) && !tastoGiaSchiacciato) {
                  switch (this.indiceUscita){
                    case 0: //no
                      this.confermaUscita=false;
                      break;
                    case 1: //si
                      nelleOpzioniStageSelect=false;
                      objMenuPrincipale= new newMenuPrincipale(); 
                      nelMenuPrincipale=true;                       
                      break;
                  }
                }                            			
                if(keys[jumpkey] && !tastoGiaSchiacciato) {//chiude il menu
                  this.confermaUscita=false;
                }
                if(keys[startkey] || keys[sukey] || keys[giukey] || keys[sinistrakey] || keys[destrakey] || keys[dashkey] || keys[jumpkey]){
                  tastoGiaSchiacciato=true;
                }else{
                  tastoGiaSchiacciato=false;
                }                
            }				          	
        }//fine di if(is.Open)
          
        if(this.isClosing){//animazione di chiusura del menu
            stageSelect(); //disegna stageSelect() - serve per pulire lo schermo disegnando quello che sara' lo sfondo sotto il menu
            if (this.width > 0){this.width-=20;}
            if (this.height > 0){this.height-=20;}           
            ctx.fillStyle = "#d2d2d2"; ctx.fillRect((canvasWidth/2)-this.width/2-15,(canvasHeight/2)-this.height/2-15, this.width+30, this.height+30); //disegna il bordo grigio 
            ctx.fillStyle = "#52b58b"; ctx.fillRect((canvasWidth/2)-this.width/2,(canvasHeight/2)-this.height/2, this.width, this.height); //disegna lo sfondo verde
            if (this.height-1 < 0 && this.width-1 < 0){//quando il menu e' tutto chiuso:
            	nelleOpzioniStageSelect=false;
            	if(this.apriLivello){
            	  nuovoLivello();
            	}else{
                stageSelection=true;
              }
            }
        }//fine di if(is.Closing)
     }
	}

	function newMenuOpzioni(widthPassata, heightPassata, apertoDalMenuDiPausa){
	    this.isOpen=false;
        this.isClosing=false;
        this.width=widthPassata;
        this.height=heightPassata;
        this.widthMax=canvasWidth-150;
        this.heightMax=canvasHeight-150;
        this.indice=0;
        this.contatoreAnimazione=0;
        this.staCambiandoTasto=false;
        this.drawMenuOpzioni = function (){
          if (!this.isOpen && !this.isClosing){//animazione di apertura del menu
            if (this.width < this.widthMax){this.width+=10;}
            if (this.height < this.heightMax){this.height+=15;}
            if (this.height > this.heightMax-1 && this.width > this.widthMax-1){//quando il menu e' tutto aperto:
            	this.isOpen=true;
            }
          }
          ctx.clearRect((canvasWidth/2)-this.width/2-15,(canvasHeight/2)-this.height/2-15, this.width+30, this.height+30);	//pulisci la parte dove viene mostrato il menu
		  ctx.fillStyle = "#d2d2d2"; ctx.fillRect((canvasWidth/2)-this.width/2-15,(canvasHeight/2)-this.height/2-15, this.width+30, this.height+30); //disegna il bordo grigio 
          ctx.fillStyle = "#52b58b"; ctx.fillRect((canvasWidth/2)-this.width/2,(canvasHeight/2)-this.height/2, this.width, this.height); //disegna lo sfondo verde

          if(this.isOpen){ //quando il menu e' tutto aperto
          	ctx.font = "small-caps bold 23px Lucida Console"; ctx.textAlign = "center"; disegnaTestoConBordino("OPTIONS",canvasWidth/2, 110,"#d2d2d2","#000000"); //scrive la scritta OPTIONS al centro in alto
          	ctx.font = "small-caps bold 20px Lucida Console"; //tipo di font per le scritte
            for(i=0;i<10;i++){//disegno tutte le scritte
              	var xdisegnata=75;
              	var ydisegnata=(128+(this.heightMax+75-17-128)/10*(i));
				switch (i){//scrive le varie impostazioni dei tasti
					case 0:
						ctx.textAlign = "right"; disegnaTestoConBordino("move up :   ", canvasWidth/2, ydisegnata+7+((this.heightMax+75-17-128)/10)/2,"#d2d2d2","#000000");
						ctx.textAlign = "left"; disegnaTestoConBordino("   "+tasto(sukey.toLowerCase()), canvasWidth/2, ydisegnata+7+((this.heightMax+75-17-128)/10)/2,"#d2d2d2","#000000");
						break;
					case 1:
						ctx.textAlign = "right"; disegnaTestoConBordino("move down :   ", canvasWidth/2, ydisegnata+7+((this.heightMax+75-17-128)/10)/2,"#d2d2d2","#000000");
						ctx.textAlign = "left"; disegnaTestoConBordino("   "+tasto(giukey.toLowerCase()), canvasWidth/2, ydisegnata+7+((this.heightMax+75-17-128)/10)/2,"#d2d2d2","#000000");
						break;
					case 2:
						ctx.textAlign = "right"; disegnaTestoConBordino("move left :   ", canvasWidth/2, ydisegnata+7+((this.heightMax+75-17-128)/10)/2,"#d2d2d2","#000000");
						ctx.textAlign = "left"; disegnaTestoConBordino("   "+tasto(sinistrakey.toLowerCase()), canvasWidth/2, ydisegnata+7+((this.heightMax+75-17-128)/10)/2,"#d2d2d2","#000000");
						break;	
					case 3:
						ctx.textAlign = "right"; disegnaTestoConBordino("move right :   ", canvasWidth/2, ydisegnata+7+((this.heightMax+75-17-128)/10)/2,"#d2d2d2","#000000");
						ctx.textAlign = "left"; disegnaTestoConBordino("   "+tasto(destrakey.toLowerCase()), canvasWidth/2, ydisegnata+7+((this.heightMax+75-17-128)/10)/2,"#d2d2d2","#000000");
						break;
					case 4:
						ctx.textAlign = "right"; disegnaTestoConBordino("confirm & dash :   ", canvasWidth/2, ydisegnata+7+((this.heightMax+75-17-128)/10)/2,"#d2d2d2","#000000");
						ctx.textAlign = "left"; disegnaTestoConBordino("   "+tasto(dashkey.toLowerCase()), canvasWidth/2, ydisegnata+7+((this.heightMax+75-17-128)/10)/2,"#d2d2d2","#000000");
						break;
					case 5:
						ctx.textAlign = "right"; disegnaTestoConBordino("cancel & jump :   ", canvasWidth/2, ydisegnata+7+((this.heightMax+75-17-128)/10)/2,"#d2d2d2","#000000");
						ctx.textAlign = "left"; disegnaTestoConBordino("   "+tasto(jumpkey.toLowerCase()), canvasWidth/2, ydisegnata+7+((this.heightMax+75-17-128)/10)/2,"#d2d2d2","#000000");
						break;
					case 6:
						ctx.textAlign = "right"; disegnaTestoConBordino("shoot :   ", canvasWidth/2, ydisegnata+7+((this.heightMax+75-17-128)/10)/2,"#d2d2d2","#000000");
						ctx.textAlign = "left"; disegnaTestoConBordino("   "+tasto(sparokey.toLowerCase()), canvasWidth/2, ydisegnata+7+((this.heightMax+75-17-128)/10)/2,"#d2d2d2","#000000");
						break;						
					case 7:
						ctx.textAlign = "right"; disegnaTestoConBordino("previous power :   ", canvasWidth/2, ydisegnata+7+((this.heightMax+75-17-128)/10)/2,"#d2d2d2","#000000");
						ctx.textAlign = "left"; disegnaTestoConBordino("   "+tasto(lkey.toLowerCase()), canvasWidth/2, ydisegnata+7+((this.heightMax+75-17-128)/10)/2,"#d2d2d2","#000000");
						break;																																									
					case 8:
						ctx.textAlign = "right"; disegnaTestoConBordino("next power :   ", canvasWidth/2, ydisegnata+7+((this.heightMax+75-17-128)/10)/2,"#d2d2d2","#000000");
						ctx.textAlign = "left"; disegnaTestoConBordino("   "+tasto(rkey.toLowerCase()), canvasWidth/2, ydisegnata+7+((this.heightMax+75-17-128)/10)/2,"#d2d2d2","#000000");
						break;						
					case 9:
						ctx.textAlign = "right"; disegnaTestoConBordino("menu & start :   ", canvasWidth/2, ydisegnata+7+((this.heightMax+75-17-128)/10)/2,"#d2d2d2","#000000");
						ctx.textAlign = "left"; disegnaTestoConBordino("   "+tasto(startkey.toLowerCase()), canvasWidth/2, ydisegnata+7+((this.heightMax+75-17-128)/10)/2,"#d2d2d2","#000000");
						break;

					function tasto(key){
						if (key==" "){return "space bar"}
						return key
					}											
				}
			}
			
			{//disegno il quadrato intorno all'opzione selezionata - uso le {} per ridurre lo scope di xdisegnata e ydisegnata
              ctx.fillStyle = "#ffc000";
            	var xdisegnata = 75;
            	var ydisegnata = (128+(this.heightMax+75-17-128)/10*(this.indice));
            	ctx.fillRect(xdisegnata, ydisegnata-2, this.width, 9);
            	ctx.fillRect(xdisegnata, ydisegnata+((this.heightMax+75-17-128)/10)-5, this.width, 9);
            	ctx.fillRect(xdisegnata, ydisegnata, 9, ((this.heightMax+75-17-128)/10)-5);
            	ctx.fillRect(xdisegnata+this.width-9, ydisegnata, 9, ((this.heightMax+75-17-128)/10)-5);			
			}
			
			if(this.staCambiandoTasto){//da qui in giu determino cosa succede in base a che tasto viene schiacciato. le due grosse distinzioni sono se staCambiandoTasto oppure se siamo nel menu e basta 
				if(this.contatoreAnimazione < 40){//fa l'animazione del testo che appare e disappare
					ctx.fillStyle = "#52b58b"; ctx.fillRect(canvasWidth/2,(128+(this.heightMax+75-17-128)/10*(this.indice))+7, this.width/2-9, ((this.heightMax+75-17-128)/10)-12);
					this.contatoreAnimazione++;
				}else{
					this.contatoreAnimazione++;
					if(this.contatoreAnimazione>79){
						this.contatoreAnimazione=0;
					}
				}
				if(ultimoTastoLetto!=""){//se viene schiacciato un tasto qualsiasi
					switch(this.indice){
						case 0: sukey=ultimoTastoLetto; break;
						case 1: giukey=ultimoTastoLetto; break;
						case 2: sinistrakey=ultimoTastoLetto; break;
						case 3: destrakey=ultimoTastoLetto; break;
						case 4: dashkey=ultimoTastoLetto; break;
						case 5: jumpkey=ultimoTastoLetto; break;
						case 6: sparokey=ultimoTastoLetto; break;
						case 7: lkey=ultimoTastoLetto; break;
						case 8: rkey=ultimoTastoLetto; break;
						case 9: startkey=ultimoTastoLetto; break;
					}
					this.staCambiandoTasto=false;	
				}
			}else{
              if(keys[sukey] && !tastoGiaSchiacciato) {
				if(this.indice > 0){ this.indice--;
				}else{ this.indice=9;}
              }
              if(keys[giukey] && !tastoGiaSchiacciato) {
				if(this.indice < 9){ this.indice++;
				}else{ this.indice=0;}
              }
              if((keys[dashkey] || keys[startkey]) && !tastoGiaSchiacciato) {
              	ultimoTastoLetto="";
                this.staCambiandoTasto=true;
              }                            			
              if(keys[jumpkey] && !tastoGiaSchiacciato) {//chiude il menu
                this.isOpen=false;
                this.isClosing=true;
              }
              if(keys[startkey] || keys[sukey] || keys[giukey] || keys[sinistrakey] || keys[destrakey] || keys[dashkey] || keys[jumpkey]){
                tastoGiaSchiacciato=true;
              }else{
                tastoGiaSchiacciato=false;
              }				
			}          	
          }//fine di if(is.Open)
          
          if(this.isClosing){//animazione di chiusura del menu
              if (this.width > widthPassata){this.width-=20;}
              if (this.height > heightPassata){this.height-=20;}
              ctx.clearRect((canvasWidth/2)-this.width/2-15,(canvasHeight/2)-this.height/2-15, this.width+30, this.height+30);	//pulisci la parte dove viene mostrato il menu
              if (!apertoDalMenuDiPausa){objMenuPrincipale.drawMenuPrincipale(false);}           
              ctx.fillStyle = "#d2d2d2"; ctx.fillRect((canvasWidth/2)-this.width/2-15,(canvasHeight/2)-this.height/2-15, this.width+30, this.height+30); //disegna il bordo grigio 
              ctx.fillStyle = "#52b58b"; ctx.fillRect((canvasWidth/2)-this.width/2,(canvasHeight/2)-this.height/2, this.width, this.height); //disegna lo sfondo verde
              if (this.height-1 < heightPassata && this.width-1 < widthPassata){//quando il menu e' tutto chiuso:
              	nelMenuOpzioni=false;
              	if(apertoDalMenuDiPausa){
              		menuDiPausa=true;
              	}else{//se viene aperto dal menu principale - devo ancora crearlo pero' lol
              		nelMenuPrincipale=true;
              	}
              }
          }//fine di if(is.Closing)
     }
	}

  function newMenuCaricaPartita(){
	      this.isOpen=false;
        this.isClosing=false;
        this.indexAlterato=false;
        this.fileLetto=false;
        this.width=0;
        this.height=0;
        this.widthMax=canvasWidth-500;
        this.heightMax=canvasHeight-425;
        this.indice=0;
        this.numeroDiVoci=1;

        this.drawMenu = async function (){ //asincrono perche' se viene caricata la partita bisogna aspettare che legga il file
          if (!this.isOpen && !this.isClosing){//animazione di apertura del menu
            if (this.width < this.widthMax){this.width+=10;}
            if (this.height < this.heightMax){this.height+=15;}
            if (this.height > this.heightMax-1 && this.width > this.widthMax-1){//quando il menu e' tutto aperto:
            	this.isOpen=true;
            }
          }
          ctx.clearRect((canvasWidth/2)-this.width/2-15,(canvasHeight/2)-this.height/2-15, this.width+30, this.height+30);	//pulisci la parte dove viene mostrato il menu
		      ctx.fillStyle = "#d2d2d2"; ctx.fillRect((canvasWidth/2)-this.width/2-15,(canvasHeight/2)-this.height/2-15, this.width+30, this.height+30); //disegna il bordo grigio 
          ctx.fillStyle = "#52b58b"; ctx.fillRect((canvasWidth/2)-this.width/2,(canvasHeight/2)-this.height/2, this.width, this.height); //disegna lo sfondo verde

          if(this.isOpen){ //quando il menu e' tutto aperto
                if (!this.indexAlterato){
                  document.getElementById("caricaPartitaDiv").style.zIndex = "10";
                  document.getElementById("fileCaricaPartita").disabled=false;
                  this.indexAlterato=true;
                }
                ctx.font = "small-caps bold 25px Lucida Console"; //tipo di font per le scritte
                {//disegno la scritta - {} per diminuire lo scope di ydisegnata
                  var ydisegnata=((canvasHeight/2)-(this.height/2))+30;
                  ctx.textAlign = "center";
                  disegnaTestoConBordino("upload save file", canvasWidth/2, ydisegnata,"#d2d2d2","#000000");
                  ctx.font = "small-caps bold 20px Lucida Console";
                  ydisegnata=((canvasHeight/2)+(this.height/2))-30;
                  disegnaTestoConBordino((dashkey+" to confirm"), canvasWidth/2, ydisegnata,"#d2d2d2","#000000");
                  if (jumpkey==" "){disegnaTestoConBordino((jumpkey+"spacebar to cancel"), canvasWidth/2, ydisegnata+20,"#d2d2d2","#000000");
                  }else{ disegnaTestoConBordino((jumpkey+" to cancel"), canvasWidth/2, ydisegnata+20,"#d2d2d2","#000000");}
                  ctx.textAlign = "left"; //lo reimposto left se no si bugga tutto
          			}		
                //ora gestisco gli input
                  if((keys[dashkey] || keys[startkey]) && !tastoGiaSchiacciato) { //conferma il caricamento del file
                    this.fileLetto=await controllaFile();
                    if (this.fileLetto){
                      this.isOpen=false;
                      this.isClosing=true;
                    }                                     
                  }                            			
                  if(keys[jumpkey] && !tastoGiaSchiacciato) {//chiude il menu
                    this.isOpen=false;
                    this.isClosing=true;
                  }
                  if(keys[startkey] || keys[sukey] || keys[giukey] || keys[sinistrakey] || keys[destrakey] || keys[dashkey] || keys[jumpkey]){
                    tastoGiaSchiacciato=true;
                  }else{
                    tastoGiaSchiacciato=false;
                  }			          	
        }//fine di if(is.Open)
          
        if(this.isClosing){//animazione di chiusura del menu
            if(this.indexAlterato){//disattiva il tasto "sfoglia file" e riporta il focus sul canvas
              document.getElementById("caricaPartitaDiv").style.zIndex = "-1";
              document.getElementById("fileCaricaPartita").disabled=true; //questo comando disattiva il focus sul canvas, devo riattivare il focus se no non legge piu i tasti
              document.getElementById('canvasDivId').focus(); //riporta il focus sul canvas
              this.indexAlterato=false;                           
            }
            objMenuPrincipale.drawMenuPrincipale(false); //pulisce lo schermo disegnando lo sfondo (menu principale)
            if (this.width > 0){this.width-=20;}
            if (this.height > 0){this.height-=20;}           
            ctx.fillStyle = "#d2d2d2"; ctx.fillRect((canvasWidth/2)-this.width/2-15,(canvasHeight/2)-this.height/2-15, this.width+30, this.height+30); //disegna il bordo grigio 
            ctx.fillStyle = "#52b58b"; ctx.fillRect((canvasWidth/2)-this.width/2,(canvasHeight/2)-this.height/2, this.width, this.height); //disegna lo sfondo verde
            if (this.height-1 < 0 && this.width-1 < 0){//quando il menu e' tutto chiuso:
            	nelMenuCaricaPartita=false;
              if (this.fileLetto){
                stageSelection=true;
              }else{
                nelMenuPrincipale=true;
                objMenuPrincipale.drawMenuPrincipale(false);
              }
            }
        }//fine di if(is.Closing)
        
        async function controllaFile(){ //controlla che il file sia caricato correttamente
            var uploadedFile = document.getElementById("fileCaricaPartita").files[0];
            var stringaCaricaPartita="";
            if(uploadedFile.size > (512)){//controlla la dimensione del file - non deve essere superiore a 512 Byte
               alert("The file size limit is 512Byte (half a kB). Upload a smaller file.");
               return false;
            }
            async function readFileAsDataURL(uploadedFile) {
                let text = await new Promise((resolve) => {
                    let fileReader = new FileReader();
                    fileReader.onload = (e) => resolve(fileReader.result);
                    fileReader.readAsText(uploadedFile);
                });
                return text;
            }          
            stringaCaricaPartita = await readFileAsDataURL(uploadedFile);
            return caricaDatiSalvataggio(stringaCaricaPartita);
            
            function caricaDatiSalvataggio(stringaCaricaPartita) { //carica effettivamente la partita dal risultato della lettura del file
                var numeroElemento=0;
                var stringaElemento="";
                for(i=0; i<stringaCaricaPartita.length; i++){
                  if(stringaCaricaPartita[i]=="|"){
                    caricaElemento();
                    numeroElemento++;
                    stringaElemento="";   
                  }else{
                    stringaElemento+=stringaCaricaPartita[i];
                  }
                }
                if ((numeroElemento==19) && (stringaElemento!="")){//carica l'ultimo elemento se esiste (che se no verrebbe skippato, facendo poi ritornare false)
                    caricaElemento();
                    numeroElemento++;                
                }
                if (numeroElemento==20){ //se ha caricato il numero corretto di elementi
                  return true;
                }else{
                  alert("The file is not using the correct format");
                  return false;
                }    
                function caricaElemento(){
                    switch (numeroElemento){
                        case 0: //jumpkey
                          jumpkey=stringaElemento;
                          break;
                        case 1: //destrakey
                          destrakey=stringaElemento;
                          break;
                        case 2: //sinistrakey
                          sinistrakey=stringaElemento;
                          break;
                        case 3: //sukey
                          sukey=stringaElemento;
                          break;
                        case 4: //giukey
                          giukey=stringaElemento;     
                          break;
                        case 5: //dashkey
                          dashkey=stringaElemento;
                          break;
                        case 6: //sparokey
                          sparokey=stringaElemento;
                          break;
                        case 7: //startkey
                          startkey=stringaElemento;
                          break;
                        case 8: //lkey
                          lkey=stringaElemento;
                          break;
                        case 9: //rkey
                          rkey=stringaElemento;
                          break;
                        case 10: //levelDefeated
                          var nuovoElementino="";
                          for (k=0; k<9; k++){
                            for(j=0; j<stringaElemento.length;j++){
                              if(stringaElemento[j]!=","){
                                nuovoElementino+=stringaElemento[j];
                                if (nuovoElementino=="true"){
                                  levelDefeated[k]=true; nuovoElementino=""; k++;
                                }else if (nuovoElementino=="false"){
                                  levelDefeated[k]=false; nuovoElementino=""; k++;
                                }   
                              }else{
                                nuovoElementino="";
                              }                            
                            }
                          }
                          break;
                        case 11: //heartAcquired
                          var nuovoElementino="";
                          for (k=0; k<9; k++){
                            for(j=0; j<stringaElemento.length;j++){
                              if(stringaElemento[j]!=","){
                                nuovoElementino+=stringaElemento[j];
                                if (nuovoElementino=="true"){
                                  heartAcquired[k]=true; nuovoElementino=""; k++;
                                }else if (nuovoElementino=="false"){
                                  heartAcquired[k]=false; nuovoElementino=""; k++;
                                }   
                              }else{
                                nuovoElementino="";
                              }                            
                            }
                          } 
                          break;
                        case 12: //subtank
                          subtank[0].life=parseInt(stringaElemento,10);
                          break;
                        case 13:
                          if(stringaElemento=="true"){subtank[0].acquired=true;
                          }else{subtank[0].acquired=false; subtank[0].life=0;}
                          break;
                        case 14:
                          subtank[1].life=parseInt(stringaElemento,10);
                          break;
                        case 15:
                          if(stringaElemento=="true"){subtank[1].acquired=true;
                          }else{subtank[1].acquired=false; subtank[1].life=0;}    
                          break;
                        case 16:
                          subtank[2].life=parseInt(stringaElemento,10);
                          break;
                        case 17:
                          if(stringaElemento=="true"){subtank[2].acquired=true;
                          }else{subtank[2].acquired=false; subtank[2].life=0;}
                          break;
                        case 18:
                          subtank[3].life=parseInt(stringaElemento,10);
                          break;
                        case 19:
                          if(stringaElemento=="true"){subtank[3].acquired=true;
                          }else{subtank[3].acquired=false; subtank[3].life=0;}
                          break;                                  
                   }
                }    
            } //fine di caricaPartita()                           
        }//fine di controllaFile()                
     }//fine di drawMenu()               
	}//fine di menuCaricaPartita

	function newMenuPrincipale(){
		this.width=canvasWidth;
		this.height=canvasHeight;
		this.indice=0;
		this.isClosing=false;
		this.closingIndex=0;
		this.isGoingToStageSelection=false;
		this.drawMenuPrincipale = function (canInput){
			ctx.clearRect(0,0,canvasWidth,canvasHeight);//pulisce tutto
			ctx.fillStyle = "#020219"; ctx.fillRect(0,0,canvasWidth+1,canvasHeight+1);//sfondo nero
			ctx.textAlign = "right";
      ctx.font = "small-caps bold 15px Lucida Console";
      disegnaTestoConBordino("by lordf", canvasWidth-3, canvasHeight-2,"#d2d2d2bb","#020219");
      ctx.textAlign = "left";
      disegnaTestoConBordino(versioneDiGioco, 3, canvasHeight-2,"#d2d2d2bb","#020219");
			ctx.font = "small-caps bold oblique 250px Lucida Console";
			disegnaTestoConBordino("X",73+canvasWidth/2,243,"#ff9200","#ffd600");
			ctx.font = "small-caps bold oblique 125px Lucida Console";
			disegnaTestoConBordino("simple",17+canvasWidth/20,200,"#0001cb","#02b0ef");
			ctx.font = "small-caps bold oblique 75px Lucida Console";
			disegnaTestoConBordino("js",234+canvasWidth/2,245,"#0001cb","#02b0ef");
			ctx.font = "small-caps bold 30px Lucida Console"; ctx.textAlign = "center";
			if(this.indice==0){disegnaTestoConBordino("new game",canvasWidth/2,350,"#ff9200","#f9c065");}else{disegnaTestoConBordino("new game",canvasWidth/2,350,"#0001cb","#02b0ef");}
			if(this.indice==1){disegnaTestoConBordino("load game",canvasWidth/2,400,"#ff9200","#f9c065");}else{disegnaTestoConBordino("load game",canvasWidth/2,400,"#0001cb","#02b0ef");}
			if(this.indice==2){disegnaTestoConBordino("options",canvasWidth/2,450,"#ff9200","#f9c065");}else{disegnaTestoConBordino("options",canvasWidth/2,450,"#0001cb","#02b0ef");}
			if(canInput && !this.isClosing){//input dei tasti
            	if(keys[sukey] && !tastoGiaSchiacciato) {
					if(this.indice > 0){
						this.indice--;
					}else{
						this.indice=2;
					}
            	}
            	if(keys[giukey] && !tastoGiaSchiacciato) {
					if(this.indice < 2){
						this.indice++;
					}else{
						this.indice=0;
					}
            	}
            	if((keys[startkey]||keys[dashkey]) && !tastoGiaSchiacciato) {
					switch(this.indice){
						case 0://nuovo gioco 
              this.isClosing=true;
							this.isGoingToStageSelection=true;
              //azzero tutto
              levelDefeated = [false, false, false, false, false, false, false, false]; //vettore che tiene quanti livelli sono stati superati
              heartAcquired = [false, false, false, false, false, false, false, false]; //vettore che tiene quanti cuori sono stati trovati
              subtank = [//vettore di subtanks - e' scollegata dal player almeno non si resetta al cambio del livello
            		{lifeMax: 20, life:parseInt(0,10), acquired:false},
            		{lifeMax: 20, life:parseInt(0,10), acquired:false},
            		{lifeMax: 20, life:parseInt(0,10), acquired:false},
            		{lifeMax: 20, life:parseInt(0,10), acquired:false},
              ];              
							break;
						case 1://carica partita
              objMenuCaricaPartita=new newMenuCaricaPartita();
              nelMenuPrincipale=false;
              nelMenuCaricaPartita=true;
							break;
						case 2://opzioni 
            				objMenuOpzioni=new newMenuOpzioni(0, 0, false);
            				tastoGiaSchiacciato=true;
            				nelMenuPrincipale=false;
            				nelMenuOpzioni=true;                				
                		break;													
					}	
            	}                        
            	if(keys[startkey] || keys[sukey] || keys[giukey] || keys[sinistrakey] || keys[destrakey] || keys[dashkey] || keys[jumpkey]){
                	tastoGiaSchiacciato=true;
            	}else{
                	tastoGiaSchiacciato=false;
            	}				
			}
        	if(this.isClosing){//animazione di chiusura del menu
        		ctx.fillStyle = "#000000";
        		this.closingIndex+=13;
        		ctx.fillRect(0,0,canvasWidth,this.closingIndex);
        		ctx.fillRect(0,canvasHeight-this.closingIndex,canvasWidth,this.closingIndex);
				    ctx.fillRect(0,0,this.closingIndex,canvasHeight);
				    ctx.fillRect(canvasWidth-this.closingIndex,0,canvasWidth-this.closingIndex,canvasHeight);
        		if ( this.closingIndex > ((canvasWidth/2)-1) ){//quando e' tutto chiuso
        			ctx.textAlign = "left";// se no si bugga della roba
              		nelMenuPrincipale=false;//disattiva lo stato menu principale
              		if(this.isGoingToStageSelection){
              			stageSelection=true;
              		}else{
              		   //boh...
              		}
              	}
          	}		
	    }
	}

  function SalvaPartita(){
    stringaSalvataggio=jumpkey+"|"+destrakey+"|"+sinistrakey+"|"+sukey+"|"+giukey+"|"+dashkey+"|"+sparokey+"|"+startkey+"|"+lkey+"|"+rkey+"|"+levelDefeated+"|"+heartAcquired;
    for (i=0; i<4; i++){
        stringaSalvataggio+="|"+subtank[i].life+"|"+subtank[i].acquired;
    }
    {//creo il file simpleXjs.dataDiOggi.savegame da scaricare
        const dataDiOggi=creaData(); //prende la data di oggi
        var element = document.createElement('a');
        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(stringaSalvataggio));
        element.setAttribute('download', "simpleXjs."+dataDiOggi+".savegame");
        element.style.display = 'none';
        document.body.appendChild(element);
        element.click();
        document.body.removeChild(element);
        alert("Downloading the save file...");
        return;
        
        function creaData(){
          var temp = new Date();
          var dateStr = padStr(temp.getFullYear()) +"."+
                        padStr(1 + temp.getMonth()) +"."+
                        padStr(temp.getDate()) +"-"+
                        padStr(temp.getHours()) +"."+
                        padStr(temp.getMinutes());
          return dateStr;
          function padStr(i) {//sistema tipo 01 e 11 per avere tutto su due cifre
              return (i < 10) ? "0" + i : "" + i;
          }        
        }
    }
  }